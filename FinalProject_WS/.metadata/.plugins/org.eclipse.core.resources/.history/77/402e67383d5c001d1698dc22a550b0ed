/******************************************************************************
 *
 * Module: Human ECU functions
 *
 * File Name: HMI_ECU.c
 *
 * Description: Functions Executed in Human ECU main function
 *
 * Author: Mariam Raouf
 *
 *******************************************************************************/

#include "HMI_func.h"

/*------------------------------------------------------------------------------
 *                              Global Variables                                *
--------------------------------------------------------------------------------*/
uint8 password[5];
uint8 confirmed_password[5];
uint8 g_ticks = 0;

/*---------------------------------------------------------------------------
 * [Function Name]: HMI_init
 *
 * [Description]:  Function used to initialize Human MCU in the start of the program
 *
 * [Args]:         void
 *
 * [Returns]:      void
 *
 ----------------------------------------------------------------------------------*/
void HMI_init(void){
	/*turn on interrupts*/
	SREG|=(1<<7);
	/* Uart Configuration & Initialization*/
	UART_ConfigType Config_type = {EIGHT_bIT, DISABLED, BIT_1,RATE_9600};
	UART_init(&Config_type);
	/* LCD Initialization*/
	LCD_init();
}

/*---------------------------------------------------------------------------
 * [Function Name]: take_pass
 *
 * [Description]:  Function used to receive password of 5 digits from user
 *
 * [Args]:         pass: array of uint8
 *
 * [Returns]:      void
 *
 ----------------------------------------------------------------------------------*/
void take_pass(uint8 pass[]){
	uint8 i=0;
	uint8 key = KEYPAD_getPressedKey();
	while(key != '='){
		if(key>=0 && key <= 9){
			if(i<5){
				pass[i] = key ;
				LCD_displayCharacter('*');
				i++;
			}
		}
		key = KEYPAD_getPressedKey();
		_delay_ms(500);
	}
}

/*---------------------------------------------------------------------------
 * [Function Name]: userPASSWORD
 *
 * [Description]:  Function used to take password and confirmation password from user
 * 				   and send both passwords to Control unit
 *
 * [Args]:         void
 *
 * [Returns]:      void
 *
 ----------------------------------------------------------------------------------*/
void userPASSWORD(void){
	LCD_clearScreen();
	LCD_displayString("plz enter pass:");
	LCD_moveCursor(1,0);

	take_pass(password);
	LCD_clearScreen();
	UART_sendByte(SEND_PASS);
	send_password(password);

	LCD_displayString("plz reenter pass:");
	LCD_moveCursor(1,0);

	take_pass(confirmed_password);
	LCD_clearScreen();

	LCD_displayString("comparing pass...");
	UART_sendByte(AGAIN);
	send_password(confirmed_password);
}

/*---------------------------------------------------------------------------
 * [Function Name]: send_password
 *
 * [Description]:  Function used to send password to Control unit
 *
 * [Args]:         pass: array of uint8
 *
 * [Returns]:      void
 *
 ----------------------------------------------------------------------------------*/
void send_password(uint8 pass[]){
	for(int i = 0; i < 5; i++){
		UART_sendByte(pass[i]);
		_delay_ms(50);
	}
}

/*---------------------------------------------------------------------------
 * [Function Name]: open
 *
 * [Description]:  Function used when user chooses open door function and enters correct password
 * 					to show on lCD steps of unlocking and locking door
 *
 * [Args]:         void
 *
 * [Returns]:      void
 *
 ----------------------------------------------------------------------------------*/
void open(void){
	LCD_clearScreen();
	Timer1_ConfigType Config_timer ={0, 8000, F_CPU_1024,CTC_MODE};
	Timer1_init(&Config_timer);
	Timer1_setCallBack(timer_setCallBack);
	g_ticks = 0;
	LCD_displayString("Door is Unlocking");
	while(g_ticks < 15);
	g_ticks = 0;
	LCD_clearScreen();
	while(g_ticks < 3);
	g_ticks = 0;
	LCD_displayString("Door is locking");
	while(g_ticks < 15);
	Timer1_deInit();
}

/*---------------------------------------------------------------------------
 * [Function Name]: send_password
 *
 * [Description]:  Function used to show ALERT message on LCD for 60 seconds
 *
 * [Args]:         void
 *
 * [Returns]:      void
 *
 ----------------------------------------------------------------------------------*/
void alert(void){
	LCD_clearScreen();
	Timer1_ConfigType Config_timer ={0, 8000, F_CPU_1024,CTC_MODE};
	Timer1_init(&Config_timer);
	Timer1_setCallBack(timer_setCallBack);
	g_ticks = 0;
	LCD_displayString("ALERT!");
	while(g_ticks < 60);
	Timer1_deInit();
}

/*---------------------------------------------------------------------------
 * [Function Name]: timer_setCallBack
 *
 * [Description]:  Call Back Function for timer1 increments g_ticks every second
 *
 * [Args]:         void
 *
 * [Returns]:      void
 *
 ----------------------------------------------------------------------------------*/
void timer_setCallBack(void){
	g_ticks++;
}


