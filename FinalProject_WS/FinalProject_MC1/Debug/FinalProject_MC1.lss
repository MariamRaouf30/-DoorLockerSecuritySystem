
FinalProject_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d8  00800060  00003dcc  00003e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800138  00800138  00003f38  2**0
                  ALLOC
  3 .stab         000035e8  00000000  00000000  00003f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012fa  00000000  00000000  00007520  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000881a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000895a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a713  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b5fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c3ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c50c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c799  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cf67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2d 1d 	jmp	0x3a5a	; 0x3a5a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 33       	cpi	r26, 0x38	; 56
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e3       	ldi	r26, 0x38	; 56
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 34       	cpi	r26, 0x4D	; 77
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 e4 1e 	jmp	0x3dc8	; 0x3dc8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e1       	ldi	r26, 0x1C	; 28
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e1       	ldi	r24, 0x1C	; 28
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

uint8 g_password[5];
uint8 received_byte=0;


int main(void){
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c5 56       	subi	r28, 0x65	; 101
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	/*Initialize Human Unit*/
	HMI_init();
     b60:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <HMI_init>
	state = 0; /*begin with state = 0, start state*/
     b64:	10 92 3d 01 	sts	0x013D, r1
	while(1){
		/*switch cases for different cases of program*/
		switch(state){
     b68:	80 91 3d 01 	lds	r24, 0x013D
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	a6 96       	adiw	r28, 0x26	; 38
     b72:	3f af       	std	Y+63, r19	; 0x3f
     b74:	2e af       	std	Y+62, r18	; 0x3e
     b76:	a6 97       	sbiw	r28, 0x26	; 38
     b78:	a6 96       	adiw	r28, 0x26	; 38
     b7a:	8e ad       	ldd	r24, Y+62	; 0x3e
     b7c:	9f ad       	ldd	r25, Y+63	; 0x3f
     b7e:	a6 97       	sbiw	r28, 0x26	; 38
     b80:	83 30       	cpi	r24, 0x03	; 3
     b82:	91 05       	cpc	r25, r1
     b84:	09 f4       	brne	.+2      	; 0xb88 <main+0x42>
     b86:	ee c3       	rjmp	.+2012   	; 0x1364 <main+0x81e>
     b88:	a6 96       	adiw	r28, 0x26	; 38
     b8a:	ee ad       	ldd	r30, Y+62	; 0x3e
     b8c:	ff ad       	ldd	r31, Y+63	; 0x3f
     b8e:	a6 97       	sbiw	r28, 0x26	; 38
     b90:	e4 30       	cpi	r30, 0x04	; 4
     b92:	f1 05       	cpc	r31, r1
     b94:	bc f4       	brge	.+46     	; 0xbc4 <main+0x7e>
     b96:	a6 96       	adiw	r28, 0x26	; 38
     b98:	2e ad       	ldd	r18, Y+62	; 0x3e
     b9a:	3f ad       	ldd	r19, Y+63	; 0x3f
     b9c:	a6 97       	sbiw	r28, 0x26	; 38
     b9e:	21 30       	cpi	r18, 0x01	; 1
     ba0:	31 05       	cpc	r19, r1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <main+0x60>
     ba4:	bb c1       	rjmp	.+886    	; 0xf1c <main+0x3d6>
     ba6:	a6 96       	adiw	r28, 0x26	; 38
     ba8:	8e ad       	ldd	r24, Y+62	; 0x3e
     baa:	9f ad       	ldd	r25, Y+63	; 0x3f
     bac:	a6 97       	sbiw	r28, 0x26	; 38
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	91 05       	cpc	r25, r1
     bb2:	0c f0       	brlt	.+2      	; 0xbb6 <main+0x70>
     bb4:	bb c1       	rjmp	.+886    	; 0xf2c <main+0x3e6>
     bb6:	a6 96       	adiw	r28, 0x26	; 38
     bb8:	ee ad       	ldd	r30, Y+62	; 0x3e
     bba:	ff ad       	ldd	r31, Y+63	; 0x3f
     bbc:	a6 97       	sbiw	r28, 0x26	; 38
     bbe:	30 97       	sbiw	r30, 0x00	; 0
     bc0:	11 f1       	breq	.+68     	; 0xc06 <main+0xc0>
     bc2:	d2 cf       	rjmp	.-92     	; 0xb68 <main+0x22>
     bc4:	a6 96       	adiw	r28, 0x26	; 38
     bc6:	2e ad       	ldd	r18, Y+62	; 0x3e
     bc8:	3f ad       	ldd	r19, Y+63	; 0x3f
     bca:	a6 97       	sbiw	r28, 0x26	; 38
     bcc:	25 30       	cpi	r18, 0x05	; 5
     bce:	31 05       	cpc	r19, r1
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <main+0x8e>
     bd2:	52 c2       	rjmp	.+1188   	; 0x1078 <main+0x532>
     bd4:	a6 96       	adiw	r28, 0x26	; 38
     bd6:	8e ad       	ldd	r24, Y+62	; 0x3e
     bd8:	9f ad       	ldd	r25, Y+63	; 0x3f
     bda:	a6 97       	sbiw	r28, 0x26	; 38
     bdc:	85 30       	cpi	r24, 0x05	; 5
     bde:	91 05       	cpc	r25, r1
     be0:	0c f4       	brge	.+2      	; 0xbe4 <main+0x9e>
     be2:	ed c4       	rjmp	.+2522   	; 0x15be <main+0xa78>
     be4:	a6 96       	adiw	r28, 0x26	; 38
     be6:	ee ad       	ldd	r30, Y+62	; 0x3e
     be8:	ff ad       	ldd	r31, Y+63	; 0x3f
     bea:	a6 97       	sbiw	r28, 0x26	; 38
     bec:	e6 30       	cpi	r30, 0x06	; 6
     bee:	f1 05       	cpc	r31, r1
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <main+0xae>
     bf2:	eb c4       	rjmp	.+2518   	; 0x15ca <main+0xa84>
     bf4:	a6 96       	adiw	r28, 0x26	; 38
     bf6:	2e ad       	ldd	r18, Y+62	; 0x3e
     bf8:	3f ad       	ldd	r19, Y+63	; 0x3f
     bfa:	a6 97       	sbiw	r28, 0x26	; 38
     bfc:	27 30       	cpi	r18, 0x07	; 7
     bfe:	31 05       	cpc	r19, r1
     c00:	09 f4       	brne	.+2      	; 0xc04 <main+0xbe>
     c02:	ec c4       	rjmp	.+2520   	; 0x15dc <main+0xa96>
     c04:	b1 cf       	rjmp	.-158    	; 0xb68 <main+0x22>
		case start: /*first case*/
			userPASSWORD(); /*take password and confirmation password from user*/
     c06:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <userPASSWORD>
			received_byte = UART_recieveByte(); /*receive response byte from control unit to compare passwords*/
     c0a:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <UART_recieveByte>
     c0e:	80 93 39 01 	sts	0x0139, r24
			if (received_byte == MATCHED ){ /* if passwords match*/
     c12:	80 91 39 01 	lds	r24, 0x0139
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	09 f0       	breq	.+2      	; 0xc1c <main+0xd6>
     c1a:	be c0       	rjmp	.+380    	; 0xd98 <main+0x252>
				LCD_clearScreen();
     c1c:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
				LCD_displayString("MATCHED"); /*display matched message for user*/
     c20:	80 e6       	ldi	r24, 0x60	; 96
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
     c28:	fe 01       	movw	r30, r28
     c2a:	e1 5a       	subi	r30, 0xA1	; 161
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	aa ef       	ldi	r26, 0xFA	; 250
     c34:	b3 e4       	ldi	r27, 0x43	; 67
     c36:	80 83       	st	Z, r24
     c38:	91 83       	std	Z+1, r25	; 0x01
     c3a:	a2 83       	std	Z+2, r26	; 0x02
     c3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c3e:	8e 01       	movw	r16, r28
     c40:	05 5a       	subi	r16, 0xA5	; 165
     c42:	1f 4f       	sbci	r17, 0xFF	; 255
     c44:	fe 01       	movw	r30, r28
     c46:	e1 5a       	subi	r30, 0xA1	; 161
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	60 81       	ld	r22, Z
     c4c:	71 81       	ldd	r23, Z+1	; 0x01
     c4e:	82 81       	ldd	r24, Z+2	; 0x02
     c50:	93 81       	ldd	r25, Z+3	; 0x03
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	4a ef       	ldi	r20, 0xFA	; 250
     c58:	54 e4       	ldi	r21, 0x44	; 68
     c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	f8 01       	movw	r30, r16
     c64:	80 83       	st	Z, r24
     c66:	91 83       	std	Z+1, r25	; 0x01
     c68:	a2 83       	std	Z+2, r26	; 0x02
     c6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c6c:	fe 01       	movw	r30, r28
     c6e:	e5 5a       	subi	r30, 0xA5	; 165
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	60 81       	ld	r22, Z
     c74:	71 81       	ldd	r23, Z+1	; 0x01
     c76:	82 81       	ldd	r24, Z+2	; 0x02
     c78:	93 81       	ldd	r25, Z+3	; 0x03
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	40 e8       	ldi	r20, 0x80	; 128
     c80:	5f e3       	ldi	r21, 0x3F	; 63
     c82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c86:	88 23       	and	r24, r24
     c88:	44 f4       	brge	.+16     	; 0xc9a <main+0x154>
		__ticks = 1;
     c8a:	fe 01       	movw	r30, r28
     c8c:	e7 5a       	subi	r30, 0xA7	; 167
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	91 83       	std	Z+1, r25	; 0x01
     c96:	80 83       	st	Z, r24
     c98:	64 c0       	rjmp	.+200    	; 0xd62 <main+0x21c>
	else if (__tmp > 65535)
     c9a:	fe 01       	movw	r30, r28
     c9c:	e5 5a       	subi	r30, 0xA5	; 165
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	60 81       	ld	r22, Z
     ca2:	71 81       	ldd	r23, Z+1	; 0x01
     ca4:	82 81       	ldd	r24, Z+2	; 0x02
     ca6:	93 81       	ldd	r25, Z+3	; 0x03
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	3f ef       	ldi	r19, 0xFF	; 255
     cac:	4f e7       	ldi	r20, 0x7F	; 127
     cae:	57 e4       	ldi	r21, 0x47	; 71
     cb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cb4:	18 16       	cp	r1, r24
     cb6:	0c f0       	brlt	.+2      	; 0xcba <main+0x174>
     cb8:	43 c0       	rjmp	.+134    	; 0xd40 <main+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cba:	fe 01       	movw	r30, r28
     cbc:	e1 5a       	subi	r30, 0xA1	; 161
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	60 81       	ld	r22, Z
     cc2:	71 81       	ldd	r23, Z+1	; 0x01
     cc4:	82 81       	ldd	r24, Z+2	; 0x02
     cc6:	93 81       	ldd	r25, Z+3	; 0x03
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e2       	ldi	r20, 0x20	; 32
     cce:	51 e4       	ldi	r21, 0x41	; 65
     cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	8e 01       	movw	r16, r28
     cda:	07 5a       	subi	r16, 0xA7	; 167
     cdc:	1f 4f       	sbci	r17, 0xFF	; 255
     cde:	bc 01       	movw	r22, r24
     ce0:	cd 01       	movw	r24, r26
     ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	f8 01       	movw	r30, r16
     cec:	91 83       	std	Z+1, r25	; 0x01
     cee:	80 83       	st	Z, r24
     cf0:	1f c0       	rjmp	.+62     	; 0xd30 <main+0x1ea>
     cf2:	fe 01       	movw	r30, r28
     cf4:	e9 5a       	subi	r30, 0xA9	; 169
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	88 ec       	ldi	r24, 0xC8	; 200
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	91 83       	std	Z+1, r25	; 0x01
     cfe:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d00:	fe 01       	movw	r30, r28
     d02:	e9 5a       	subi	r30, 0xA9	; 169
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	80 81       	ld	r24, Z
     d08:	91 81       	ldd	r25, Z+1	; 0x01
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	f1 f7       	brne	.-4      	; 0xd0a <main+0x1c4>
     d0e:	fe 01       	movw	r30, r28
     d10:	e9 5a       	subi	r30, 0xA9	; 169
     d12:	ff 4f       	sbci	r31, 0xFF	; 255
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d18:	de 01       	movw	r26, r28
     d1a:	a7 5a       	subi	r26, 0xA7	; 167
     d1c:	bf 4f       	sbci	r27, 0xFF	; 255
     d1e:	fe 01       	movw	r30, r28
     d20:	e7 5a       	subi	r30, 0xA7	; 167
     d22:	ff 4f       	sbci	r31, 0xFF	; 255
     d24:	80 81       	ld	r24, Z
     d26:	91 81       	ldd	r25, Z+1	; 0x01
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	11 96       	adiw	r26, 0x01	; 1
     d2c:	9c 93       	st	X, r25
     d2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d30:	fe 01       	movw	r30, r28
     d32:	e7 5a       	subi	r30, 0xA7	; 167
     d34:	ff 4f       	sbci	r31, 0xFF	; 255
     d36:	80 81       	ld	r24, Z
     d38:	91 81       	ldd	r25, Z+1	; 0x01
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	d1 f6       	brne	.-76     	; 0xcf2 <main+0x1ac>
     d3e:	28 c0       	rjmp	.+80     	; 0xd90 <main+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d40:	8e 01       	movw	r16, r28
     d42:	07 5a       	subi	r16, 0xA7	; 167
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
     d46:	fe 01       	movw	r30, r28
     d48:	e5 5a       	subi	r30, 0xA5	; 165
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	60 81       	ld	r22, Z
     d4e:	71 81       	ldd	r23, Z+1	; 0x01
     d50:	82 81       	ldd	r24, Z+2	; 0x02
     d52:	93 81       	ldd	r25, Z+3	; 0x03
     d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	f8 01       	movw	r30, r16
     d5e:	91 83       	std	Z+1, r25	; 0x01
     d60:	80 83       	st	Z, r24
     d62:	de 01       	movw	r26, r28
     d64:	ab 5a       	subi	r26, 0xAB	; 171
     d66:	bf 4f       	sbci	r27, 0xFF	; 255
     d68:	fe 01       	movw	r30, r28
     d6a:	e7 5a       	subi	r30, 0xA7	; 167
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	80 81       	ld	r24, Z
     d70:	91 81       	ldd	r25, Z+1	; 0x01
     d72:	11 96       	adiw	r26, 0x01	; 1
     d74:	9c 93       	st	X, r25
     d76:	8e 93       	st	-X, r24
     d78:	fe 01       	movw	r30, r28
     d7a:	eb 5a       	subi	r30, 0xAB	; 171
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <main+0x23c>
     d86:	fe 01       	movw	r30, r28
     d88:	eb 5a       	subi	r30, 0xAB	; 171
     d8a:	ff 4f       	sbci	r31, 0xFF	; 255
     d8c:	91 83       	std	Z+1, r25	; 0x01
     d8e:	80 83       	st	Z, r24
				_delay_ms(500);
				state = Main_menu; /*Go to main menu if passwords match to choose desired step*/
     d90:	85 e0       	ldi	r24, 0x05	; 5
     d92:	80 93 3d 01 	sts	0x013D, r24
     d96:	e8 ce       	rjmp	.-560    	; 0xb68 <main+0x22>
			}
			else if (received_byte == UNMATCHED ){ /*if passwords don't match*/
     d98:	80 91 39 01 	lds	r24, 0x0139
     d9c:	83 30       	cpi	r24, 0x03	; 3
     d9e:	09 f0       	breq	.+2      	; 0xda2 <main+0x25c>
     da0:	e3 ce       	rjmp	.-570    	; 0xb68 <main+0x22>
				LCD_clearScreen();
     da2:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
				LCD_displayString("PASSWORD UNMATCHED"); /*display passwords don't match message*/
     da6:	88 e6       	ldi	r24, 0x68	; 104
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
     dae:	fe 01       	movw	r30, r28
     db0:	ef 5a       	subi	r30, 0xAF	; 175
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	aa ef       	ldi	r26, 0xFA	; 250
     dba:	b3 e4       	ldi	r27, 0x43	; 67
     dbc:	80 83       	st	Z, r24
     dbe:	91 83       	std	Z+1, r25	; 0x01
     dc0:	a2 83       	std	Z+2, r26	; 0x02
     dc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc4:	8e 01       	movw	r16, r28
     dc6:	03 5b       	subi	r16, 0xB3	; 179
     dc8:	1f 4f       	sbci	r17, 0xFF	; 255
     dca:	fe 01       	movw	r30, r28
     dcc:	ef 5a       	subi	r30, 0xAF	; 175
     dce:	ff 4f       	sbci	r31, 0xFF	; 255
     dd0:	60 81       	ld	r22, Z
     dd2:	71 81       	ldd	r23, Z+1	; 0x01
     dd4:	82 81       	ldd	r24, Z+2	; 0x02
     dd6:	93 81       	ldd	r25, Z+3	; 0x03
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	4a ef       	ldi	r20, 0xFA	; 250
     dde:	54 e4       	ldi	r21, 0x44	; 68
     de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de4:	dc 01       	movw	r26, r24
     de6:	cb 01       	movw	r24, r22
     de8:	f8 01       	movw	r30, r16
     dea:	80 83       	st	Z, r24
     dec:	91 83       	std	Z+1, r25	; 0x01
     dee:	a2 83       	std	Z+2, r26	; 0x02
     df0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     df2:	fe 01       	movw	r30, r28
     df4:	e3 5b       	subi	r30, 0xB3	; 179
     df6:	ff 4f       	sbci	r31, 0xFF	; 255
     df8:	60 81       	ld	r22, Z
     dfa:	71 81       	ldd	r23, Z+1	; 0x01
     dfc:	82 81       	ldd	r24, Z+2	; 0x02
     dfe:	93 81       	ldd	r25, Z+3	; 0x03
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e8       	ldi	r20, 0x80	; 128
     e06:	5f e3       	ldi	r21, 0x3F	; 63
     e08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e0c:	88 23       	and	r24, r24
     e0e:	44 f4       	brge	.+16     	; 0xe20 <main+0x2da>
		__ticks = 1;
     e10:	fe 01       	movw	r30, r28
     e12:	e5 5b       	subi	r30, 0xB5	; 181
     e14:	ff 4f       	sbci	r31, 0xFF	; 255
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	91 83       	std	Z+1, r25	; 0x01
     e1c:	80 83       	st	Z, r24
     e1e:	64 c0       	rjmp	.+200    	; 0xee8 <main+0x3a2>
	else if (__tmp > 65535)
     e20:	fe 01       	movw	r30, r28
     e22:	e3 5b       	subi	r30, 0xB3	; 179
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	60 81       	ld	r22, Z
     e28:	71 81       	ldd	r23, Z+1	; 0x01
     e2a:	82 81       	ldd	r24, Z+2	; 0x02
     e2c:	93 81       	ldd	r25, Z+3	; 0x03
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	3f ef       	ldi	r19, 0xFF	; 255
     e32:	4f e7       	ldi	r20, 0x7F	; 127
     e34:	57 e4       	ldi	r21, 0x47	; 71
     e36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e3a:	18 16       	cp	r1, r24
     e3c:	0c f0       	brlt	.+2      	; 0xe40 <main+0x2fa>
     e3e:	43 c0       	rjmp	.+134    	; 0xec6 <main+0x380>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e40:	fe 01       	movw	r30, r28
     e42:	ef 5a       	subi	r30, 0xAF	; 175
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	60 81       	ld	r22, Z
     e48:	71 81       	ldd	r23, Z+1	; 0x01
     e4a:	82 81       	ldd	r24, Z+2	; 0x02
     e4c:	93 81       	ldd	r25, Z+3	; 0x03
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e2       	ldi	r20, 0x20	; 32
     e54:	51 e4       	ldi	r21, 0x41	; 65
     e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	8e 01       	movw	r16, r28
     e60:	05 5b       	subi	r16, 0xB5	; 181
     e62:	1f 4f       	sbci	r17, 0xFF	; 255
     e64:	bc 01       	movw	r22, r24
     e66:	cd 01       	movw	r24, r26
     e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	f8 01       	movw	r30, r16
     e72:	91 83       	std	Z+1, r25	; 0x01
     e74:	80 83       	st	Z, r24
     e76:	1f c0       	rjmp	.+62     	; 0xeb6 <main+0x370>
     e78:	fe 01       	movw	r30, r28
     e7a:	e7 5b       	subi	r30, 0xB7	; 183
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	88 ec       	ldi	r24, 0xC8	; 200
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	80 83       	st	Z, r24
     e86:	fe 01       	movw	r30, r28
     e88:	e7 5b       	subi	r30, 0xB7	; 183
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	80 81       	ld	r24, Z
     e8e:	91 81       	ldd	r25, Z+1	; 0x01
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <main+0x34a>
     e94:	fe 01       	movw	r30, r28
     e96:	e7 5b       	subi	r30, 0xB7	; 183
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	91 83       	std	Z+1, r25	; 0x01
     e9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e9e:	de 01       	movw	r26, r28
     ea0:	a5 5b       	subi	r26, 0xB5	; 181
     ea2:	bf 4f       	sbci	r27, 0xFF	; 255
     ea4:	fe 01       	movw	r30, r28
     ea6:	e5 5b       	subi	r30, 0xB5	; 181
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	80 81       	ld	r24, Z
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	11 96       	adiw	r26, 0x01	; 1
     eb2:	9c 93       	st	X, r25
     eb4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb6:	fe 01       	movw	r30, r28
     eb8:	e5 5b       	subi	r30, 0xB5	; 181
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	80 81       	ld	r24, Z
     ebe:	91 81       	ldd	r25, Z+1	; 0x01
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	d1 f6       	brne	.-76     	; 0xe78 <main+0x332>
     ec4:	28 c0       	rjmp	.+80     	; 0xf16 <main+0x3d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec6:	8e 01       	movw	r16, r28
     ec8:	05 5b       	subi	r16, 0xB5	; 181
     eca:	1f 4f       	sbci	r17, 0xFF	; 255
     ecc:	fe 01       	movw	r30, r28
     ece:	e3 5b       	subi	r30, 0xB3	; 179
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	60 81       	ld	r22, Z
     ed4:	71 81       	ldd	r23, Z+1	; 0x01
     ed6:	82 81       	ldd	r24, Z+2	; 0x02
     ed8:	93 81       	ldd	r25, Z+3	; 0x03
     eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	f8 01       	movw	r30, r16
     ee4:	91 83       	std	Z+1, r25	; 0x01
     ee6:	80 83       	st	Z, r24
     ee8:	de 01       	movw	r26, r28
     eea:	a9 5b       	subi	r26, 0xB9	; 185
     eec:	bf 4f       	sbci	r27, 0xFF	; 255
     eee:	fe 01       	movw	r30, r28
     ef0:	e5 5b       	subi	r30, 0xB5	; 181
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	80 81       	ld	r24, Z
     ef6:	91 81       	ldd	r25, Z+1	; 0x01
     ef8:	11 96       	adiw	r26, 0x01	; 1
     efa:	9c 93       	st	X, r25
     efc:	8e 93       	st	-X, r24
     efe:	fe 01       	movw	r30, r28
     f00:	e9 5b       	subi	r30, 0xB9	; 185
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	80 81       	ld	r24, Z
     f06:	91 81       	ldd	r25, Z+1	; 0x01
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <main+0x3c2>
     f0c:	fe 01       	movw	r30, r28
     f0e:	e9 5b       	subi	r30, 0xB9	; 185
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	80 83       	st	Z, r24
				_delay_ms(500);
				state = start; /*stay in case 0 repeat until passwords match*/
     f16:	10 92 3d 01 	sts	0x013D, r1
     f1a:	26 ce       	rjmp	.-948    	; 0xb68 <main+0x22>
			}
			break;
		case user_password :
			userPASSWORD(); /*user change password case*/
     f1c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <userPASSWORD>
			state++;
     f20:	80 91 3d 01 	lds	r24, 0x013D
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	80 93 3d 01 	sts	0x013D, r24
     f2a:	1e ce       	rjmp	.-964    	; 0xb68 <main+0x22>
			break;
		case confirmation : /*confirm password and confirmation password*/
			received_byte = UART_recieveByte(); /*receive confirmation byte from control*/
     f2c:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <UART_recieveByte>
     f30:	80 93 39 01 	sts	0x0139, r24
			if(received_byte == MATCHED){
     f34:	80 91 39 01 	lds	r24, 0x0139
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	09 f0       	breq	.+2      	; 0xf3e <main+0x3f8>
     f3c:	8f c0       	rjmp	.+286    	; 0x105c <main+0x516>
				LCD_clearScreen();
     f3e:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
				LCD_displayString("MATCHED");
     f42:	80 e6       	ldi	r24, 0x60	; 96
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
     f4a:	fe 01       	movw	r30, r28
     f4c:	ed 5b       	subi	r30, 0xBD	; 189
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	aa ef       	ldi	r26, 0xFA	; 250
     f56:	b3 e4       	ldi	r27, 0x43	; 67
     f58:	80 83       	st	Z, r24
     f5a:	91 83       	std	Z+1, r25	; 0x01
     f5c:	a2 83       	std	Z+2, r26	; 0x02
     f5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f60:	8e 01       	movw	r16, r28
     f62:	01 5c       	subi	r16, 0xC1	; 193
     f64:	1f 4f       	sbci	r17, 0xFF	; 255
     f66:	fe 01       	movw	r30, r28
     f68:	ed 5b       	subi	r30, 0xBD	; 189
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	60 81       	ld	r22, Z
     f6e:	71 81       	ldd	r23, Z+1	; 0x01
     f70:	82 81       	ldd	r24, Z+2	; 0x02
     f72:	93 81       	ldd	r25, Z+3	; 0x03
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	4a ef       	ldi	r20, 0xFA	; 250
     f7a:	54 e4       	ldi	r21, 0x44	; 68
     f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	f8 01       	movw	r30, r16
     f86:	80 83       	st	Z, r24
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	a2 83       	std	Z+2, r26	; 0x02
     f8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f8e:	fe 01       	movw	r30, r28
     f90:	ff 96       	adiw	r30, 0x3f	; 63
     f92:	60 81       	ld	r22, Z
     f94:	71 81       	ldd	r23, Z+1	; 0x01
     f96:	82 81       	ldd	r24, Z+2	; 0x02
     f98:	93 81       	ldd	r25, Z+3	; 0x03
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e8       	ldi	r20, 0x80	; 128
     fa0:	5f e3       	ldi	r21, 0x3F	; 63
     fa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fa6:	88 23       	and	r24, r24
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <main+0x46e>
		__ticks = 1;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	9e af       	std	Y+62, r25	; 0x3e
     fb0:	8d af       	std	Y+61, r24	; 0x3d
     fb2:	46 c0       	rjmp	.+140    	; 0x1040 <main+0x4fa>
	else if (__tmp > 65535)
     fb4:	fe 01       	movw	r30, r28
     fb6:	ff 96       	adiw	r30, 0x3f	; 63
     fb8:	60 81       	ld	r22, Z
     fba:	71 81       	ldd	r23, Z+1	; 0x01
     fbc:	82 81       	ldd	r24, Z+2	; 0x02
     fbe:	93 81       	ldd	r25, Z+3	; 0x03
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	3f ef       	ldi	r19, 0xFF	; 255
     fc4:	4f e7       	ldi	r20, 0x7F	; 127
     fc6:	57 e4       	ldi	r21, 0x47	; 71
     fc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fcc:	18 16       	cp	r1, r24
     fce:	64 f5       	brge	.+88     	; 0x1028 <main+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd0:	fe 01       	movw	r30, r28
     fd2:	ed 5b       	subi	r30, 0xBD	; 189
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	60 81       	ld	r22, Z
     fd8:	71 81       	ldd	r23, Z+1	; 0x01
     fda:	82 81       	ldd	r24, Z+2	; 0x02
     fdc:	93 81       	ldd	r25, Z+3	; 0x03
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9e af       	std	Y+62, r25	; 0x3e
     ffc:	8d af       	std	Y+61, r24	; 0x3d
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <main+0x4d8>
    1000:	88 ec       	ldi	r24, 0xC8	; 200
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9c af       	std	Y+60, r25	; 0x3c
    1006:	8b af       	std	Y+59, r24	; 0x3b
    1008:	8b ad       	ldd	r24, Y+59	; 0x3b
    100a:	9c ad       	ldd	r25, Y+60	; 0x3c
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <main+0x4c6>
    1010:	9c af       	std	Y+60, r25	; 0x3c
    1012:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8d ad       	ldd	r24, Y+61	; 0x3d
    1016:	9e ad       	ldd	r25, Y+62	; 0x3e
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9e af       	std	Y+62, r25	; 0x3e
    101c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1020:	9e ad       	ldd	r25, Y+62	; 0x3e
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <main+0x4ba>
    1026:	16 c0       	rjmp	.+44     	; 0x1054 <main+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	fe 01       	movw	r30, r28
    102a:	ff 96       	adiw	r30, 0x3f	; 63
    102c:	60 81       	ld	r22, Z
    102e:	71 81       	ldd	r23, Z+1	; 0x01
    1030:	82 81       	ldd	r24, Z+2	; 0x02
    1032:	93 81       	ldd	r25, Z+3	; 0x03
    1034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	9e af       	std	Y+62, r25	; 0x3e
    103e:	8d af       	std	Y+61, r24	; 0x3d
    1040:	8d ad       	ldd	r24, Y+61	; 0x3d
    1042:	9e ad       	ldd	r25, Y+62	; 0x3e
    1044:	9a af       	std	Y+58, r25	; 0x3a
    1046:	89 af       	std	Y+57, r24	; 0x39
    1048:	89 ad       	ldd	r24, Y+57	; 0x39
    104a:	9a ad       	ldd	r25, Y+58	; 0x3a
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <main+0x506>
    1050:	9a af       	std	Y+58, r25	; 0x3a
    1052:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(500);
				state = Main_menu;
    1054:	85 e0       	ldi	r24, 0x05	; 5
    1056:	80 93 3d 01 	sts	0x013D, r24
    105a:	86 cd       	rjmp	.-1268   	; 0xb68 <main+0x22>
				/*if passwords matched display on LCD for user then go to main menu*/
			}
			else if(received_byte == UNMATCHED){
    105c:	80 91 39 01 	lds	r24, 0x0139
    1060:	83 30       	cpi	r24, 0x03	; 3
    1062:	09 f0       	breq	.+2      	; 0x1066 <main+0x520>
    1064:	81 cd       	rjmp	.-1278   	; 0xb68 <main+0x22>
				state = change_error;
    1066:	84 e0       	ldi	r24, 0x04	; 4
    1068:	80 93 3d 01 	sts	0x013D, r24
				count_error++;
    106c:	80 91 38 01 	lds	r24, 0x0138
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	80 93 38 01 	sts	0x0138, r24
    1076:	78 cd       	rjmp	.-1296   	; 0xb68 <main+0x22>
				/*if passwords unmatched go to change password error state and increment error counter*/
			}
			break;
		case Main_menu:
			LCD_clearScreen();
    1078:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
			LCD_displayString("+: open door");
    107c:	8b e7       	ldi	r24, 0x7B	; 123
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
			LCD_moveCursor(1,0);
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	0e 94 09 1c 	call	0x3812	; 0x3812 <LCD_moveCursor>
			LCD_displayString("-: change pass");
    108c:	88 e8       	ldi	r24, 0x88	; 136
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
			/*Messages appearing on LCD giving choices to user*/
			uint8 key = KEYPAD_getPressedKey(); /*take input from user*/
    1094:	0e 94 a4 10 	call	0x2148	; 0x2148 <KEYPAD_getPressedKey>
    1098:	fe 01       	movw	r30, r28
    109a:	ed 59       	subi	r30, 0x9D	; 157
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	80 83       	st	Z, r24
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	aa ef       	ldi	r26, 0xFA	; 250
    10a6:	b3 e4       	ldi	r27, 0x43	; 67
    10a8:	8d ab       	std	Y+53, r24	; 0x35
    10aa:	9e ab       	std	Y+54, r25	; 0x36
    10ac:	af ab       	std	Y+55, r26	; 0x37
    10ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b0:	6d a9       	ldd	r22, Y+53	; 0x35
    10b2:	7e a9       	ldd	r23, Y+54	; 0x36
    10b4:	8f a9       	ldd	r24, Y+55	; 0x37
    10b6:	98 ad       	ldd	r25, Y+56	; 0x38
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	4a ef       	ldi	r20, 0xFA	; 250
    10be:	54 e4       	ldi	r21, 0x44	; 68
    10c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	89 ab       	std	Y+49, r24	; 0x31
    10ca:	9a ab       	std	Y+50, r25	; 0x32
    10cc:	ab ab       	std	Y+51, r26	; 0x33
    10ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10d0:	69 a9       	ldd	r22, Y+49	; 0x31
    10d2:	7a a9       	ldd	r23, Y+50	; 0x32
    10d4:	8b a9       	ldd	r24, Y+51	; 0x33
    10d6:	9c a9       	ldd	r25, Y+52	; 0x34
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 e8       	ldi	r20, 0x80	; 128
    10de:	5f e3       	ldi	r21, 0x3F	; 63
    10e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10e4:	88 23       	and	r24, r24
    10e6:	2c f4       	brge	.+10     	; 0x10f2 <main+0x5ac>
		__ticks = 1;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	98 ab       	std	Y+48, r25	; 0x30
    10ee:	8f a7       	std	Y+47, r24	; 0x2f
    10f0:	3f c0       	rjmp	.+126    	; 0x1170 <main+0x62a>
	else if (__tmp > 65535)
    10f2:	69 a9       	ldd	r22, Y+49	; 0x31
    10f4:	7a a9       	ldd	r23, Y+50	; 0x32
    10f6:	8b a9       	ldd	r24, Y+51	; 0x33
    10f8:	9c a9       	ldd	r25, Y+52	; 0x34
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	3f ef       	ldi	r19, 0xFF	; 255
    10fe:	4f e7       	ldi	r20, 0x7F	; 127
    1100:	57 e4       	ldi	r21, 0x47	; 71
    1102:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1106:	18 16       	cp	r1, r24
    1108:	4c f5       	brge	.+82     	; 0x115c <main+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    110a:	6d a9       	ldd	r22, Y+53	; 0x35
    110c:	7e a9       	ldd	r23, Y+54	; 0x36
    110e:	8f a9       	ldd	r24, Y+55	; 0x37
    1110:	98 ad       	ldd	r25, Y+56	; 0x38
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e2       	ldi	r20, 0x20	; 32
    1118:	51 e4       	ldi	r21, 0x41	; 65
    111a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	bc 01       	movw	r22, r24
    1124:	cd 01       	movw	r24, r26
    1126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	98 ab       	std	Y+48, r25	; 0x30
    1130:	8f a7       	std	Y+47, r24	; 0x2f
    1132:	0f c0       	rjmp	.+30     	; 0x1152 <main+0x60c>
    1134:	88 ec       	ldi	r24, 0xC8	; 200
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	9e a7       	std	Y+46, r25	; 0x2e
    113a:	8d a7       	std	Y+45, r24	; 0x2d
    113c:	8d a5       	ldd	r24, Y+45	; 0x2d
    113e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	f1 f7       	brne	.-4      	; 0x1140 <main+0x5fa>
    1144:	9e a7       	std	Y+46, r25	; 0x2e
    1146:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1148:	8f a5       	ldd	r24, Y+47	; 0x2f
    114a:	98 a9       	ldd	r25, Y+48	; 0x30
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	98 ab       	std	Y+48, r25	; 0x30
    1150:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1152:	8f a5       	ldd	r24, Y+47	; 0x2f
    1154:	98 a9       	ldd	r25, Y+48	; 0x30
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	69 f7       	brne	.-38     	; 0x1134 <main+0x5ee>
    115a:	14 c0       	rjmp	.+40     	; 0x1184 <main+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115c:	69 a9       	ldd	r22, Y+49	; 0x31
    115e:	7a a9       	ldd	r23, Y+50	; 0x32
    1160:	8b a9       	ldd	r24, Y+51	; 0x33
    1162:	9c a9       	ldd	r25, Y+52	; 0x34
    1164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	98 ab       	std	Y+48, r25	; 0x30
    116e:	8f a7       	std	Y+47, r24	; 0x2f
    1170:	8f a5       	ldd	r24, Y+47	; 0x2f
    1172:	98 a9       	ldd	r25, Y+48	; 0x30
    1174:	9c a7       	std	Y+44, r25	; 0x2c
    1176:	8b a7       	std	Y+43, r24	; 0x2b
    1178:	8b a5       	ldd	r24, Y+43	; 0x2b
    117a:	9c a5       	ldd	r25, Y+44	; 0x2c
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <main+0x636>
    1180:	9c a7       	std	Y+44, r25	; 0x2c
    1182:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);
			if (key == '+'){ /*if user chooses to open door*/
    1184:	fe 01       	movw	r30, r28
    1186:	ed 59       	subi	r30, 0x9D	; 157
    1188:	ff 4f       	sbci	r31, 0xFF	; 255
    118a:	80 81       	ld	r24, Z
    118c:	8b 32       	cpi	r24, 0x2B	; 43
    118e:	89 f5       	brne	.+98     	; 0x11f2 <main+0x6ac>
				LCD_clearScreen();
    1190:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
				LCD_displayString("enter saved pass:");  /*ask for saved password*/
    1194:	87 e9       	ldi	r24, 0x97	; 151
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
				LCD_moveCursor(1,0);
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	0e 94 09 1c 	call	0x3812	; 0x3812 <LCD_moveCursor>
				take_pass(g_password);
    11a4:	8e e3       	ldi	r24, 0x3E	; 62
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	0e 94 37 0b 	call	0x166e	; 0x166e <take_pass>
				UART_sendByte(GSEND_PASS);
    11ac:	87 e0       	ldi	r24, 0x07	; 7
    11ae:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <UART_sendByte>
				send_password(g_password);
    11b2:	8e e3       	ldi	r24, 0x3E	; 62
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	0e 94 17 0c 	call	0x182e	; 0x182e <send_password>
				/*receive password from user and send it to control unit to compare with stored password*/
				received_byte = UART_recieveByte(); /*receive whether passwords match or not from Control unit*/
    11ba:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <UART_recieveByte>
    11be:	80 93 39 01 	sts	0x0139, r24
				if (received_byte == MATCHED ){
    11c2:	80 91 39 01 	lds	r24, 0x0139
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	31 f4       	brne	.+12     	; 0x11d6 <main+0x690>
					LCD_clearScreen();
    11ca:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
					state = open_door;
    11ce:	86 e0       	ldi	r24, 0x06	; 6
    11d0:	80 93 3d 01 	sts	0x013D, r24
    11d4:	c9 cc       	rjmp	.-1646   	; 0xb68 <main+0x22>
					/*if password matched saved password go to open door state*/
				}
				else if (received_byte == UNMATCHED ){
    11d6:	80 91 39 01 	lds	r24, 0x0139
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <main+0x69a>
    11de:	c4 cc       	rjmp	.-1656   	; 0xb68 <main+0x22>
					state = Unlock_error;
    11e0:	83 e0       	ldi	r24, 0x03	; 3
    11e2:	80 93 3d 01 	sts	0x013D, r24
					count_error++;
    11e6:	80 91 38 01 	lds	r24, 0x0138
    11ea:	8f 5f       	subi	r24, 0xFF	; 255
    11ec:	80 93 38 01 	sts	0x0138, r24
    11f0:	bb cc       	rjmp	.-1674   	; 0xb68 <main+0x22>
					/*if passwords don't match go to unlock door error state and increment error counter*/
				}
			}
			else if (key == '-'){
    11f2:	fe 01       	movw	r30, r28
    11f4:	ed 59       	subi	r30, 0x9D	; 157
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	80 81       	ld	r24, Z
    11fa:	8d 32       	cpi	r24, 0x2D	; 45
    11fc:	09 f0       	breq	.+2      	; 0x1200 <main+0x6ba>
    11fe:	b4 cc       	rjmp	.-1688   	; 0xb68 <main+0x22>
				state = user_password;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	80 93 3d 01 	sts	0x013D, r24
    1206:	b0 cc       	rjmp	.-1696   	; 0xb68 <main+0x22>
				/*if user chooses to change password go to user password state*/
			}
			break;
		case Unlock_error:
			while(count_error<=3){
				if(count_error == 3){
    1208:	80 91 38 01 	lds	r24, 0x0138
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	31 f4       	brne	.+12     	; 0x121c <main+0x6d6>
					state = Alert;
    1210:	87 e0       	ldi	r24, 0x07	; 7
    1212:	80 93 3d 01 	sts	0x013D, r24
					count_error = 0;
    1216:	10 92 38 01 	sts	0x0138, r1
    121a:	a6 cc       	rjmp	.-1716   	; 0xb68 <main+0x22>
					break;
				}
				/*if user types incorrect password 3 consecutive times go to alert state*/
				LCD_clearScreen();
    121c:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
				LCD_displayString("PASSWORD UNMATCHED");/*passwords unmatched message*/
    1220:	88 e6       	ldi	r24, 0x68	; 104
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	aa ef       	ldi	r26, 0xFA	; 250
    122e:	b3 e4       	ldi	r27, 0x43	; 67
    1230:	8f a3       	std	Y+39, r24	; 0x27
    1232:	98 a7       	std	Y+40, r25	; 0x28
    1234:	a9 a7       	std	Y+41, r26	; 0x29
    1236:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1238:	6f a1       	ldd	r22, Y+39	; 0x27
    123a:	78 a5       	ldd	r23, Y+40	; 0x28
    123c:	89 a5       	ldd	r24, Y+41	; 0x29
    123e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	4a ef       	ldi	r20, 0xFA	; 250
    1246:	54 e4       	ldi	r21, 0x44	; 68
    1248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	8b a3       	std	Y+35, r24	; 0x23
    1252:	9c a3       	std	Y+36, r25	; 0x24
    1254:	ad a3       	std	Y+37, r26	; 0x25
    1256:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1258:	6b a1       	ldd	r22, Y+35	; 0x23
    125a:	7c a1       	ldd	r23, Y+36	; 0x24
    125c:	8d a1       	ldd	r24, Y+37	; 0x25
    125e:	9e a1       	ldd	r25, Y+38	; 0x26
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	40 e8       	ldi	r20, 0x80	; 128
    1266:	5f e3       	ldi	r21, 0x3F	; 63
    1268:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    126c:	88 23       	and	r24, r24
    126e:	2c f4       	brge	.+10     	; 0x127a <main+0x734>
		__ticks = 1;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	9a a3       	std	Y+34, r25	; 0x22
    1276:	89 a3       	std	Y+33, r24	; 0x21
    1278:	3f c0       	rjmp	.+126    	; 0x12f8 <main+0x7b2>
	else if (__tmp > 65535)
    127a:	6b a1       	ldd	r22, Y+35	; 0x23
    127c:	7c a1       	ldd	r23, Y+36	; 0x24
    127e:	8d a1       	ldd	r24, Y+37	; 0x25
    1280:	9e a1       	ldd	r25, Y+38	; 0x26
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	3f ef       	ldi	r19, 0xFF	; 255
    1286:	4f e7       	ldi	r20, 0x7F	; 127
    1288:	57 e4       	ldi	r21, 0x47	; 71
    128a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    128e:	18 16       	cp	r1, r24
    1290:	4c f5       	brge	.+82     	; 0x12e4 <main+0x79e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1292:	6f a1       	ldd	r22, Y+39	; 0x27
    1294:	78 a5       	ldd	r23, Y+40	; 0x28
    1296:	89 a5       	ldd	r24, Y+41	; 0x29
    1298:	9a a5       	ldd	r25, Y+42	; 0x2a
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	40 e2       	ldi	r20, 0x20	; 32
    12a0:	51 e4       	ldi	r21, 0x41	; 65
    12a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	bc 01       	movw	r22, r24
    12ac:	cd 01       	movw	r24, r26
    12ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	9a a3       	std	Y+34, r25	; 0x22
    12b8:	89 a3       	std	Y+33, r24	; 0x21
    12ba:	0f c0       	rjmp	.+30     	; 0x12da <main+0x794>
    12bc:	88 ec       	ldi	r24, 0xC8	; 200
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	98 a3       	std	Y+32, r25	; 0x20
    12c2:	8f 8f       	std	Y+31, r24	; 0x1f
    12c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12c6:	98 a1       	ldd	r25, Y+32	; 0x20
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <main+0x782>
    12cc:	98 a3       	std	Y+32, r25	; 0x20
    12ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d0:	89 a1       	ldd	r24, Y+33	; 0x21
    12d2:	9a a1       	ldd	r25, Y+34	; 0x22
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	9a a3       	std	Y+34, r25	; 0x22
    12d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12da:	89 a1       	ldd	r24, Y+33	; 0x21
    12dc:	9a a1       	ldd	r25, Y+34	; 0x22
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	69 f7       	brne	.-38     	; 0x12bc <main+0x776>
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <main+0x7c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e4:	6b a1       	ldd	r22, Y+35	; 0x23
    12e6:	7c a1       	ldd	r23, Y+36	; 0x24
    12e8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ea:	9e a1       	ldd	r25, Y+38	; 0x26
    12ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	9a a3       	std	Y+34, r25	; 0x22
    12f6:	89 a3       	std	Y+33, r24	; 0x21
    12f8:	89 a1       	ldd	r24, Y+33	; 0x21
    12fa:	9a a1       	ldd	r25, Y+34	; 0x22
    12fc:	9e 8f       	std	Y+30, r25	; 0x1e
    12fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1300:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1302:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <main+0x7be>
    1308:	9e 8f       	std	Y+30, r25	; 0x1e
    130a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				LCD_clearScreen();
    130c:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
				LCD_displayString("plz enter pass:");
    1310:	89 ea       	ldi	r24, 0xA9	; 169
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
				LCD_moveCursor(1,0);
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	0e 94 09 1c 	call	0x3812	; 0x3812 <LCD_moveCursor>
				take_pass(password);
    1320:	83 e4       	ldi	r24, 0x43	; 67
    1322:	91 e0       	ldi	r25, 0x01	; 1
    1324:	0e 94 37 0b 	call	0x166e	; 0x166e <take_pass>
				/*take password one more time from user*/
				UART_sendByte(ERROR1_CHECK);/*open door error to control unit*/
    1328:	89 e0       	ldi	r24, 0x09	; 9
    132a:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <UART_sendByte>
				send_password(password);/*send password*/
    132e:	83 e4       	ldi	r24, 0x43	; 67
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	0e 94 17 0c 	call	0x182e	; 0x182e <send_password>
				received_byte = UART_recieveByte();/*wait for comparison result*/
    1336:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <UART_recieveByte>
    133a:	80 93 39 01 	sts	0x0139, r24
				/*if passwords match and count error is less than 3 go to next state*/
				if (received_byte == MATCHED ){
    133e:	80 91 39 01 	lds	r24, 0x0139
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	31 f4       	brne	.+12     	; 0x1352 <main+0x80c>
					state = open_door;
    1346:	86 e0       	ldi	r24, 0x06	; 6
    1348:	80 93 3d 01 	sts	0x013D, r24
					count_error = 0;
    134c:	10 92 38 01 	sts	0x0138, r1
    1350:	0b cc       	rjmp	.-2026   	; 0xb68 <main+0x22>
					break;
				}
				if (received_byte == UNMATCHED ){
    1352:	80 91 39 01 	lds	r24, 0x0139
    1356:	83 30       	cpi	r24, 0x03	; 3
    1358:	29 f4       	brne	.+10     	; 0x1364 <main+0x81e>
					count_error++;
    135a:	80 91 38 01 	lds	r24, 0x0138
    135e:	8f 5f       	subi	r24, 0xFF	; 255
    1360:	80 93 38 01 	sts	0x0138, r24
				state = user_password;
				/*if user chooses to change password go to user password state*/
			}
			break;
		case Unlock_error:
			while(count_error<=3){
    1364:	80 91 38 01 	lds	r24, 0x0138
    1368:	84 30       	cpi	r24, 0x04	; 4
    136a:	08 f4       	brcc	.+2      	; 0x136e <main+0x828>
    136c:	4d cf       	rjmp	.-358    	; 0x1208 <main+0x6c2>
    136e:	fc cb       	rjmp	.-2056   	; 0xb68 <main+0x22>
			}
			break;

		case change_error:
			while(count_error<=3){ /* while error counter is less than or equals 3*/
				if(count_error == 3){
    1370:	80 91 38 01 	lds	r24, 0x0138
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	31 f4       	brne	.+12     	; 0x1384 <main+0x83e>
					state = Alert;
    1378:	87 e0       	ldi	r24, 0x07	; 7
    137a:	80 93 3d 01 	sts	0x013D, r24
					count_error = 0;
    137e:	10 92 38 01 	sts	0x0138, r1
    1382:	f2 cb       	rjmp	.-2076   	; 0xb68 <main+0x22>
					break;
				}
				/*if user types incorrect password 3 consecutive times go to alert state*/
				LCD_clearScreen();
    1384:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
				LCD_displayString("PASSWORD UNMATCHED"); /*passwords unmatched message*/
    1388:	88 e6       	ldi	r24, 0x68	; 104
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	aa ef       	ldi	r26, 0xFA	; 250
    1396:	b3 e4       	ldi	r27, 0x43	; 67
    1398:	89 8f       	std	Y+25, r24	; 0x19
    139a:	9a 8f       	std	Y+26, r25	; 0x1a
    139c:	ab 8f       	std	Y+27, r26	; 0x1b
    139e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a0:	69 8d       	ldd	r22, Y+25	; 0x19
    13a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	4a ef       	ldi	r20, 0xFA	; 250
    13ae:	54 e4       	ldi	r21, 0x44	; 68
    13b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	8d 8b       	std	Y+21, r24	; 0x15
    13ba:	9e 8b       	std	Y+22, r25	; 0x16
    13bc:	af 8b       	std	Y+23, r26	; 0x17
    13be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13c0:	6d 89       	ldd	r22, Y+21	; 0x15
    13c2:	7e 89       	ldd	r23, Y+22	; 0x16
    13c4:	8f 89       	ldd	r24, Y+23	; 0x17
    13c6:	98 8d       	ldd	r25, Y+24	; 0x18
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d4:	88 23       	and	r24, r24
    13d6:	2c f4       	brge	.+10     	; 0x13e2 <main+0x89c>
		__ticks = 1;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9c 8b       	std	Y+20, r25	; 0x14
    13de:	8b 8b       	std	Y+19, r24	; 0x13
    13e0:	3f c0       	rjmp	.+126    	; 0x1460 <main+0x91a>
	else if (__tmp > 65535)
    13e2:	6d 89       	ldd	r22, Y+21	; 0x15
    13e4:	7e 89       	ldd	r23, Y+22	; 0x16
    13e6:	8f 89       	ldd	r24, Y+23	; 0x17
    13e8:	98 8d       	ldd	r25, Y+24	; 0x18
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	3f ef       	ldi	r19, 0xFF	; 255
    13ee:	4f e7       	ldi	r20, 0x7F	; 127
    13f0:	57 e4       	ldi	r21, 0x47	; 71
    13f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13f6:	18 16       	cp	r1, r24
    13f8:	4c f5       	brge	.+82     	; 0x144c <main+0x906>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fa:	69 8d       	ldd	r22, Y+25	; 0x19
    13fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1400:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e2       	ldi	r20, 0x20	; 32
    1408:	51 e4       	ldi	r21, 0x41	; 65
    140a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	bc 01       	movw	r22, r24
    1414:	cd 01       	movw	r24, r26
    1416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	9c 8b       	std	Y+20, r25	; 0x14
    1420:	8b 8b       	std	Y+19, r24	; 0x13
    1422:	0f c0       	rjmp	.+30     	; 0x1442 <main+0x8fc>
    1424:	88 ec       	ldi	r24, 0xC8	; 200
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	9a 8b       	std	Y+18, r25	; 0x12
    142a:	89 8b       	std	Y+17, r24	; 0x11
    142c:	89 89       	ldd	r24, Y+17	; 0x11
    142e:	9a 89       	ldd	r25, Y+18	; 0x12
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <main+0x8ea>
    1434:	9a 8b       	std	Y+18, r25	; 0x12
    1436:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1438:	8b 89       	ldd	r24, Y+19	; 0x13
    143a:	9c 89       	ldd	r25, Y+20	; 0x14
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	9c 8b       	std	Y+20, r25	; 0x14
    1440:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1442:	8b 89       	ldd	r24, Y+19	; 0x13
    1444:	9c 89       	ldd	r25, Y+20	; 0x14
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	69 f7       	brne	.-38     	; 0x1424 <main+0x8de>
    144a:	14 c0       	rjmp	.+40     	; 0x1474 <main+0x92e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144c:	6d 89       	ldd	r22, Y+21	; 0x15
    144e:	7e 89       	ldd	r23, Y+22	; 0x16
    1450:	8f 89       	ldd	r24, Y+23	; 0x17
    1452:	98 8d       	ldd	r25, Y+24	; 0x18
    1454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	9c 8b       	std	Y+20, r25	; 0x14
    145e:	8b 8b       	std	Y+19, r24	; 0x13
    1460:	8b 89       	ldd	r24, Y+19	; 0x13
    1462:	9c 89       	ldd	r25, Y+20	; 0x14
    1464:	98 8b       	std	Y+16, r25	; 0x10
    1466:	8f 87       	std	Y+15, r24	; 0x0f
    1468:	8f 85       	ldd	r24, Y+15	; 0x0f
    146a:	98 89       	ldd	r25, Y+16	; 0x10
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <main+0x926>
    1470:	98 8b       	std	Y+16, r25	; 0x10
    1472:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				LCD_clearScreen();
    1474:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
				LCD_displayString("plz enter pass:");
    1478:	89 ea       	ldi	r24, 0xA9	; 169
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
				LCD_moveCursor(1,0);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	0e 94 09 1c 	call	0x3812	; 0x3812 <LCD_moveCursor>
				take_pass(password);
    1488:	83 e4       	ldi	r24, 0x43	; 67
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	0e 94 37 0b 	call	0x166e	; 0x166e <take_pass>
				/*take password one more time from user*/
				UART_sendByte(ERROR2_CHECK); /*change password error to control unit*/
    1490:	80 e2       	ldi	r24, 0x20	; 32
    1492:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <UART_sendByte>
				send_password(password); /*send password*/
    1496:	83 e4       	ldi	r24, 0x43	; 67
    1498:	91 e0       	ldi	r25, 0x01	; 1
    149a:	0e 94 17 0c 	call	0x182e	; 0x182e <send_password>
				received_byte = UART_recieveByte(); /*wait for comparison result*/
    149e:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <UART_recieveByte>
    14a2:	80 93 39 01 	sts	0x0139, r24
				/*if passwords match and count error is less than 3 go to next state*/
				if (received_byte == MATCHED ){
    14a6:	80 91 39 01 	lds	r24, 0x0139
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <main+0x96a>
    14ae:	7e c0       	rjmp	.+252    	; 0x15ac <main+0xa66>
					LCD_clearScreen();
    14b0:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
					LCD_displayString("SAVED");
    14b4:	89 eb       	ldi	r24, 0xB9	; 185
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a8 e4       	ldi	r26, 0x48	; 72
    14c2:	b3 e4       	ldi	r27, 0x43	; 67
    14c4:	8b 87       	std	Y+11, r24	; 0x0b
    14c6:	9c 87       	std	Y+12, r25	; 0x0c
    14c8:	ad 87       	std	Y+13, r26	; 0x0d
    14ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	4a ef       	ldi	r20, 0xFA	; 250
    14da:	54 e4       	ldi	r21, 0x44	; 68
    14dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	8f 83       	std	Y+7, r24	; 0x07
    14e6:	98 87       	std	Y+8, r25	; 0x08
    14e8:	a9 87       	std	Y+9, r26	; 0x09
    14ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ec:	6f 81       	ldd	r22, Y+7	; 0x07
    14ee:	78 85       	ldd	r23, Y+8	; 0x08
    14f0:	89 85       	ldd	r24, Y+9	; 0x09
    14f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e8       	ldi	r20, 0x80	; 128
    14fa:	5f e3       	ldi	r21, 0x3F	; 63
    14fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1500:	88 23       	and	r24, r24
    1502:	2c f4       	brge	.+10     	; 0x150e <main+0x9c8>
		__ticks = 1;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9e 83       	std	Y+6, r25	; 0x06
    150a:	8d 83       	std	Y+5, r24	; 0x05
    150c:	3f c0       	rjmp	.+126    	; 0x158c <main+0xa46>
	else if (__tmp > 65535)
    150e:	6f 81       	ldd	r22, Y+7	; 0x07
    1510:	78 85       	ldd	r23, Y+8	; 0x08
    1512:	89 85       	ldd	r24, Y+9	; 0x09
    1514:	9a 85       	ldd	r25, Y+10	; 0x0a
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	3f ef       	ldi	r19, 0xFF	; 255
    151a:	4f e7       	ldi	r20, 0x7F	; 127
    151c:	57 e4       	ldi	r21, 0x47	; 71
    151e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1522:	18 16       	cp	r1, r24
    1524:	4c f5       	brge	.+82     	; 0x1578 <main+0xa32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1526:	6b 85       	ldd	r22, Y+11	; 0x0b
    1528:	7c 85       	ldd	r23, Y+12	; 0x0c
    152a:	8d 85       	ldd	r24, Y+13	; 0x0d
    152c:	9e 85       	ldd	r25, Y+14	; 0x0e
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e2       	ldi	r20, 0x20	; 32
    1534:	51 e4       	ldi	r21, 0x41	; 65
    1536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	bc 01       	movw	r22, r24
    1540:	cd 01       	movw	r24, r26
    1542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
    154e:	0f c0       	rjmp	.+30     	; 0x156e <main+0xa28>
    1550:	88 ec       	ldi	r24, 0xC8	; 200
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9c 83       	std	Y+4, r25	; 0x04
    1556:	8b 83       	std	Y+3, r24	; 0x03
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <main+0xa16>
    1560:	9c 83       	std	Y+4, r25	; 0x04
    1562:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	9e 83       	std	Y+6, r25	; 0x06
    156c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	69 f7       	brne	.-38     	; 0x1550 <main+0xa0a>
    1576:	14 c0       	rjmp	.+40     	; 0x15a0 <main+0xa5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1578:	6f 81       	ldd	r22, Y+7	; 0x07
    157a:	78 85       	ldd	r23, Y+8	; 0x08
    157c:	89 85       	ldd	r24, Y+9	; 0x09
    157e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	9e 83       	std	Y+6, r25	; 0x06
    158a:	8d 83       	std	Y+5, r24	; 0x05
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	9e 81       	ldd	r25, Y+6	; 0x06
    1590:	9a 83       	std	Y+2, r25	; 0x02
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	9a 81       	ldd	r25, Y+2	; 0x02
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <main+0xa52>
    159c:	9a 83       	std	Y+2, r25	; 0x02
    159e:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(200);
					state = Main_menu;
    15a0:	85 e0       	ldi	r24, 0x05	; 5
    15a2:	80 93 3d 01 	sts	0x013D, r24
					count_error = 0;
    15a6:	10 92 38 01 	sts	0x0138, r1
    15aa:	de ca       	rjmp	.-2628   	; 0xb68 <main+0x22>
					break;
				}
				if (received_byte == UNMATCHED ){
    15ac:	80 91 39 01 	lds	r24, 0x0139
    15b0:	83 30       	cpi	r24, 0x03	; 3
    15b2:	29 f4       	brne	.+10     	; 0x15be <main+0xa78>
					count_error++;
    15b4:	80 91 38 01 	lds	r24, 0x0138
    15b8:	8f 5f       	subi	r24, 0xFF	; 255
    15ba:	80 93 38 01 	sts	0x0138, r24
				/*if passwords unmatched one more time increment counter*/
			}
			break;

		case change_error:
			while(count_error<=3){ /* while error counter is less than or equals 3*/
    15be:	80 91 38 01 	lds	r24, 0x0138
    15c2:	84 30       	cpi	r24, 0x04	; 4
    15c4:	08 f4       	brcc	.+2      	; 0x15c8 <main+0xa82>
    15c6:	d4 ce       	rjmp	.-600    	; 0x1370 <main+0x82a>
    15c8:	cf ca       	rjmp	.-2658   	; 0xb68 <main+0x22>
				}
				/*if passwords unmatched one more time increment counter*/
			}
			break;
		case open_door:
			UART_sendByte(OPEN); /*send control unit OPEN Byte to open door*/
    15ca:	84 e0       	ldi	r24, 0x04	; 4
    15cc:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <UART_sendByte>
			open(); /*open function controls messages displaying on LCD during door opening*/
    15d0:	0e 94 b6 0c 	call	0x196c	; 0x196c <open>
			state = Main_menu; /*go to main menu state after opening door function returns/executes */
    15d4:	85 e0       	ldi	r24, 0x05	; 5
    15d6:	80 93 3d 01 	sts	0x013D, r24
    15da:	c6 ca       	rjmp	.-2676   	; 0xb68 <main+0x22>
			break;
		case Alert:
			UART_sendByte(ALERT); /*send Alert Byte to control unit to turn on buzzer*/
    15dc:	82 e0       	ldi	r24, 0x02	; 2
    15de:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <UART_sendByte>
			alert(); /* function Display alert message on LCD during alert state*/
    15e2:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <alert>
			state = Main_menu; /*return to main menu after function executes*/
    15e6:	85 e0       	ldi	r24, 0x05	; 5
    15e8:	80 93 3d 01 	sts	0x013D, r24
    15ec:	bd ca       	rjmp	.-2694   	; 0xb68 <main+0x22>

000015ee <HMI_init>:
 * [Args]:         void
 *
 * [Returns]:      void
 *
 ----------------------------------------------------------------------------------*/
void HMI_init(void){
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	2c 97       	sbiw	r28, 0x0c	; 12
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
	/*turn on interrupts*/
	SREG|=(1<<7);
    1602:	af e5       	ldi	r26, 0x5F	; 95
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	ef e5       	ldi	r30, 0x5F	; 95
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	80 68       	ori	r24, 0x80	; 128
    160e:	8c 93       	st	X, r24
	/* Uart Configuration & Initialization*/
	UART_ConfigType Config_type = {EIGHT_bIT, DISABLED, BIT_1,RATE_9600};
    1610:	ce 01       	movw	r24, r28
    1612:	01 96       	adiw	r24, 0x01	; 1
    1614:	99 87       	std	Y+9, r25	; 0x09
    1616:	88 87       	std	Y+8, r24	; 0x08
    1618:	e4 e2       	ldi	r30, 0x24	; 36
    161a:	f1 e0       	ldi	r31, 0x01	; 1
    161c:	fb 87       	std	Y+11, r31	; 0x0b
    161e:	ea 87       	std	Y+10, r30	; 0x0a
    1620:	f7 e0       	ldi	r31, 0x07	; 7
    1622:	fc 87       	std	Y+12, r31	; 0x0c
    1624:	ea 85       	ldd	r30, Y+10	; 0x0a
    1626:	fb 85       	ldd	r31, Y+11	; 0x0b
    1628:	00 80       	ld	r0, Z
    162a:	8a 85       	ldd	r24, Y+10	; 0x0a
    162c:	9b 85       	ldd	r25, Y+11	; 0x0b
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	9b 87       	std	Y+11, r25	; 0x0b
    1632:	8a 87       	std	Y+10, r24	; 0x0a
    1634:	e8 85       	ldd	r30, Y+8	; 0x08
    1636:	f9 85       	ldd	r31, Y+9	; 0x09
    1638:	00 82       	st	Z, r0
    163a:	88 85       	ldd	r24, Y+8	; 0x08
    163c:	99 85       	ldd	r25, Y+9	; 0x09
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	99 87       	std	Y+9, r25	; 0x09
    1642:	88 87       	std	Y+8, r24	; 0x08
    1644:	9c 85       	ldd	r25, Y+12	; 0x0c
    1646:	91 50       	subi	r25, 0x01	; 1
    1648:	9c 87       	std	Y+12, r25	; 0x0c
    164a:	ec 85       	ldd	r30, Y+12	; 0x0c
    164c:	ee 23       	and	r30, r30
    164e:	51 f7       	brne	.-44     	; 0x1624 <HMI_init+0x36>
	UART_init(&Config_type);
    1650:	ce 01       	movw	r24, r28
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <UART_init>
	/* LCD Initialization*/
	LCD_init();
    1658:	0e 94 38 12 	call	0x2470	; 0x2470 <LCD_init>
}
    165c:	2c 96       	adiw	r28, 0x0c	; 12
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <take_pass>:
 * [Args]:         pass: array of uint8
 *
 * [Returns]:      void
 *
 ----------------------------------------------------------------------------------*/
void take_pass(uint8 pass[]){
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	62 97       	sbiw	r28, 0x12	; 18
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	9a 8b       	std	Y+18, r25	; 0x12
    1684:	89 8b       	std	Y+17, r24	; 0x11
	uint8 i=0;
    1686:	18 8a       	std	Y+16, r1	; 0x10
	uint8 key = KEYPAD_getPressedKey(); /*store value of pressed character in key varible*/
    1688:	0e 94 a4 10 	call	0x2148	; 0x2148 <KEYPAD_getPressedKey>
    168c:	8f 87       	std	Y+15, r24	; 0x0f
    168e:	8b c0       	rjmp	.+278    	; 0x17a6 <take_pass+0x138>
	while(key != '='){ /* while enter '=' is not pressed */
		if(key>=0 && key <= 9){ /*password has to be a number from 0 to 9*/
    1690:	8f 85       	ldd	r24, Y+15	; 0x0f
    1692:	8a 30       	cpi	r24, 0x0A	; 10
    1694:	98 f4       	brcc	.+38     	; 0x16bc <take_pass+0x4e>
			if(i<5){ /*length of password = 5 digits*/
    1696:	88 89       	ldd	r24, Y+16	; 0x10
    1698:	85 30       	cpi	r24, 0x05	; 5
    169a:	80 f4       	brcc	.+32     	; 0x16bc <take_pass+0x4e>
				pass[i] = key ;
    169c:	88 89       	ldd	r24, Y+16	; 0x10
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	89 89       	ldd	r24, Y+17	; 0x11
    16a4:	9a 89       	ldd	r25, Y+18	; 0x12
    16a6:	fc 01       	movw	r30, r24
    16a8:	e2 0f       	add	r30, r18
    16aa:	f3 1f       	adc	r31, r19
    16ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ae:	80 83       	st	Z, r24
				LCD_displayCharacter('*'); /*password appears on screen as '*' */
    16b0:	8a e2       	ldi	r24, 0x2A	; 42
    16b2:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_displayCharacter>
				i++;
    16b6:	88 89       	ldd	r24, Y+16	; 0x10
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	88 8b       	std	Y+16, r24	; 0x10
			}
		}
		key = KEYPAD_getPressedKey(); /*take value of next digit*/
    16bc:	0e 94 a4 10 	call	0x2148	; 0x2148 <KEYPAD_getPressedKey>
    16c0:	8f 87       	std	Y+15, r24	; 0x0f
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	aa ef       	ldi	r26, 0xFA	; 250
    16c8:	b3 e4       	ldi	r27, 0x43	; 67
    16ca:	8b 87       	std	Y+11, r24	; 0x0b
    16cc:	9c 87       	std	Y+12, r25	; 0x0c
    16ce:	ad 87       	std	Y+13, r26	; 0x0d
    16d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	4a ef       	ldi	r20, 0xFA	; 250
    16e0:	54 e4       	ldi	r21, 0x44	; 68
    16e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	8f 83       	std	Y+7, r24	; 0x07
    16ec:	98 87       	std	Y+8, r25	; 0x08
    16ee:	a9 87       	std	Y+9, r26	; 0x09
    16f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16f2:	6f 81       	ldd	r22, Y+7	; 0x07
    16f4:	78 85       	ldd	r23, Y+8	; 0x08
    16f6:	89 85       	ldd	r24, Y+9	; 0x09
    16f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e8       	ldi	r20, 0x80	; 128
    1700:	5f e3       	ldi	r21, 0x3F	; 63
    1702:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1706:	88 23       	and	r24, r24
    1708:	2c f4       	brge	.+10     	; 0x1714 <take_pass+0xa6>
		__ticks = 1;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	9e 83       	std	Y+6, r25	; 0x06
    1710:	8d 83       	std	Y+5, r24	; 0x05
    1712:	3f c0       	rjmp	.+126    	; 0x1792 <take_pass+0x124>
	else if (__tmp > 65535)
    1714:	6f 81       	ldd	r22, Y+7	; 0x07
    1716:	78 85       	ldd	r23, Y+8	; 0x08
    1718:	89 85       	ldd	r24, Y+9	; 0x09
    171a:	9a 85       	ldd	r25, Y+10	; 0x0a
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	3f ef       	ldi	r19, 0xFF	; 255
    1720:	4f e7       	ldi	r20, 0x7F	; 127
    1722:	57 e4       	ldi	r21, 0x47	; 71
    1724:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1728:	18 16       	cp	r1, r24
    172a:	4c f5       	brge	.+82     	; 0x177e <take_pass+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172c:	6b 85       	ldd	r22, Y+11	; 0x0b
    172e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1730:	8d 85       	ldd	r24, Y+13	; 0x0d
    1732:	9e 85       	ldd	r25, Y+14	; 0x0e
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e2       	ldi	r20, 0x20	; 32
    173a:	51 e4       	ldi	r21, 0x41	; 65
    173c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	bc 01       	movw	r22, r24
    1746:	cd 01       	movw	r24, r26
    1748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	9e 83       	std	Y+6, r25	; 0x06
    1752:	8d 83       	std	Y+5, r24	; 0x05
    1754:	0f c0       	rjmp	.+30     	; 0x1774 <take_pass+0x106>
    1756:	88 ec       	ldi	r24, 0xC8	; 200
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	9c 83       	std	Y+4, r25	; 0x04
    175c:	8b 83       	std	Y+3, r24	; 0x03
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	9c 81       	ldd	r25, Y+4	; 0x04
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	f1 f7       	brne	.-4      	; 0x1762 <take_pass+0xf4>
    1766:	9c 83       	std	Y+4, r25	; 0x04
    1768:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    176a:	8d 81       	ldd	r24, Y+5	; 0x05
    176c:	9e 81       	ldd	r25, Y+6	; 0x06
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1774:	8d 81       	ldd	r24, Y+5	; 0x05
    1776:	9e 81       	ldd	r25, Y+6	; 0x06
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	69 f7       	brne	.-38     	; 0x1756 <take_pass+0xe8>
    177c:	14 c0       	rjmp	.+40     	; 0x17a6 <take_pass+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177e:	6f 81       	ldd	r22, Y+7	; 0x07
    1780:	78 85       	ldd	r23, Y+8	; 0x08
    1782:	89 85       	ldd	r24, Y+9	; 0x09
    1784:	9a 85       	ldd	r25, Y+10	; 0x0a
    1786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	9e 83       	std	Y+6, r25	; 0x06
    1790:	8d 83       	std	Y+5, r24	; 0x05
    1792:	8d 81       	ldd	r24, Y+5	; 0x05
    1794:	9e 81       	ldd	r25, Y+6	; 0x06
    1796:	9a 83       	std	Y+2, r25	; 0x02
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	9a 81       	ldd	r25, Y+2	; 0x02
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	f1 f7       	brne	.-4      	; 0x179e <take_pass+0x130>
    17a2:	9a 83       	std	Y+2, r25	; 0x02
    17a4:	89 83       	std	Y+1, r24	; 0x01
 *
 ----------------------------------------------------------------------------------*/
void take_pass(uint8 pass[]){
	uint8 i=0;
	uint8 key = KEYPAD_getPressedKey(); /*store value of pressed character in key varible*/
	while(key != '='){ /* while enter '=' is not pressed */
    17a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a8:	8d 33       	cpi	r24, 0x3D	; 61
    17aa:	09 f0       	breq	.+2      	; 0x17ae <take_pass+0x140>
    17ac:	71 cf       	rjmp	.-286    	; 0x1690 <take_pass+0x22>
			}
		}
		key = KEYPAD_getPressedKey(); /*take value of next digit*/
		_delay_ms(500);
	}
}
    17ae:	62 96       	adiw	r28, 0x12	; 18
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <userPASSWORD>:
 * [Args]:         void
 *
 * [Returns]:      void
 *
 ----------------------------------------------------------------------------------*/
void userPASSWORD(void){
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen(); /*first clear Screen*/
    17c8:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
	LCD_displayString("plz enter pass:"); /*take first password message on LCD*/
    17cc:	8f eb       	ldi	r24, 0xBF	; 191
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
	LCD_moveCursor(1,0); /*user writes password in second row*/
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	0e 94 09 1c 	call	0x3812	; 0x3812 <LCD_moveCursor>

	take_pass(password); /*take password from user*/
    17dc:	83 e4       	ldi	r24, 0x43	; 67
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	0e 94 37 0b 	call	0x166e	; 0x166e <take_pass>
	LCD_clearScreen();
    17e4:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
	UART_sendByte(SEND_PASS); /*for MCU1 & MCU2 synchronization to make sure password is sent*/
    17e8:	85 e0       	ldi	r24, 0x05	; 5
    17ea:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <UART_sendByte>
	send_password(password); /*send password to Control MCU*/
    17ee:	83 e4       	ldi	r24, 0x43	; 67
    17f0:	91 e0       	ldi	r25, 0x01	; 1
    17f2:	0e 94 17 0c 	call	0x182e	; 0x182e <send_password>

	LCD_displayString("plz reenter pass:"); /*take confirmation password message on LCD*/
    17f6:	8f ec       	ldi	r24, 0xCF	; 207
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
	LCD_moveCursor(1,0);
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	0e 94 09 1c 	call	0x3812	; 0x3812 <LCD_moveCursor>

	take_pass(confirmed_password); /*take confirmation password from user*/
    1806:	88 e4       	ldi	r24, 0x48	; 72
    1808:	91 e0       	ldi	r25, 0x01	; 1
    180a:	0e 94 37 0b 	call	0x166e	; 0x166e <take_pass>
	LCD_clearScreen();
    180e:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>

	LCD_displayString("comparing pass..."); /*comparing both passwords message*/
    1812:	81 ee       	ldi	r24, 0xE1	; 225
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
	UART_sendByte(AGAIN);
    181a:	80 e1       	ldi	r24, 0x10	; 16
    181c:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <UART_sendByte>
	send_password(confirmed_password);/*send confirmation password to Control MCU*/
    1820:	88 e4       	ldi	r24, 0x48	; 72
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	0e 94 17 0c 	call	0x182e	; 0x182e <send_password>
}
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <send_password>:
 * [Args]:         pass: array of uint8
 *
 * [Returns]:      void
 *
 ----------------------------------------------------------------------------------*/
void send_password(uint8 pass[]){
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	62 97       	sbiw	r28, 0x12	; 18
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	9a 8b       	std	Y+18, r25	; 0x12
    1844:	89 8b       	std	Y+17, r24	; 0x11
	/*loop to send each byte of password to Control unit*/
	for(int i = 0; i < 5; i++){
    1846:	18 8a       	std	Y+16, r1	; 0x10
    1848:	1f 86       	std	Y+15, r1	; 0x0f
    184a:	81 c0       	rjmp	.+258    	; 0x194e <send_password+0x120>
		UART_sendByte(pass[i]);
    184c:	2f 85       	ldd	r18, Y+15	; 0x0f
    184e:	38 89       	ldd	r19, Y+16	; 0x10
    1850:	89 89       	ldd	r24, Y+17	; 0x11
    1852:	9a 89       	ldd	r25, Y+18	; 0x12
    1854:	fc 01       	movw	r30, r24
    1856:	e2 0f       	add	r30, r18
    1858:	f3 1f       	adc	r31, r19
    185a:	80 81       	ld	r24, Z
    185c:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <UART_sendByte>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a8 e4       	ldi	r26, 0x48	; 72
    1866:	b2 e4       	ldi	r27, 0x42	; 66
    1868:	8b 87       	std	Y+11, r24	; 0x0b
    186a:	9c 87       	std	Y+12, r25	; 0x0c
    186c:	ad 87       	std	Y+13, r26	; 0x0d
    186e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1870:	6b 85       	ldd	r22, Y+11	; 0x0b
    1872:	7c 85       	ldd	r23, Y+12	; 0x0c
    1874:	8d 85       	ldd	r24, Y+13	; 0x0d
    1876:	9e 85       	ldd	r25, Y+14	; 0x0e
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	4a ef       	ldi	r20, 0xFA	; 250
    187e:	54 e4       	ldi	r21, 0x44	; 68
    1880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	8f 83       	std	Y+7, r24	; 0x07
    188a:	98 87       	std	Y+8, r25	; 0x08
    188c:	a9 87       	std	Y+9, r26	; 0x09
    188e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1890:	6f 81       	ldd	r22, Y+7	; 0x07
    1892:	78 85       	ldd	r23, Y+8	; 0x08
    1894:	89 85       	ldd	r24, Y+9	; 0x09
    1896:	9a 85       	ldd	r25, Y+10	; 0x0a
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e8       	ldi	r20, 0x80	; 128
    189e:	5f e3       	ldi	r21, 0x3F	; 63
    18a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a4:	88 23       	and	r24, r24
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <send_password+0x84>
		__ticks = 1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
    18b0:	3f c0       	rjmp	.+126    	; 0x1930 <send_password+0x102>
	else if (__tmp > 65535)
    18b2:	6f 81       	ldd	r22, Y+7	; 0x07
    18b4:	78 85       	ldd	r23, Y+8	; 0x08
    18b6:	89 85       	ldd	r24, Y+9	; 0x09
    18b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	3f ef       	ldi	r19, 0xFF	; 255
    18be:	4f e7       	ldi	r20, 0x7F	; 127
    18c0:	57 e4       	ldi	r21, 0x47	; 71
    18c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c6:	18 16       	cp	r1, r24
    18c8:	4c f5       	brge	.+82     	; 0x191c <send_password+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    18cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e2       	ldi	r20, 0x20	; 32
    18d8:	51 e4       	ldi	r21, 0x41	; 65
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	8d 83       	std	Y+5, r24	; 0x05
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <send_password+0xe4>
    18f4:	88 ec       	ldi	r24, 0xC8	; 200
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9c 83       	std	Y+4, r25	; 0x04
    18fa:	8b 83       	std	Y+3, r24	; 0x03
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <send_password+0xd2>
    1904:	9c 83       	std	Y+4, r25	; 0x04
    1906:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	9e 83       	std	Y+6, r25	; 0x06
    1910:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1912:	8d 81       	ldd	r24, Y+5	; 0x05
    1914:	9e 81       	ldd	r25, Y+6	; 0x06
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	69 f7       	brne	.-38     	; 0x18f4 <send_password+0xc6>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <send_password+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191c:	6f 81       	ldd	r22, Y+7	; 0x07
    191e:	78 85       	ldd	r23, Y+8	; 0x08
    1920:	89 85       	ldd	r24, Y+9	; 0x09
    1922:	9a 85       	ldd	r25, Y+10	; 0x0a
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9e 83       	std	Y+6, r25	; 0x06
    192e:	8d 83       	std	Y+5, r24	; 0x05
    1930:	8d 81       	ldd	r24, Y+5	; 0x05
    1932:	9e 81       	ldd	r25, Y+6	; 0x06
    1934:	9a 83       	std	Y+2, r25	; 0x02
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	9a 81       	ldd	r25, Y+2	; 0x02
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <send_password+0x10e>
    1940:	9a 83       	std	Y+2, r25	; 0x02
    1942:	89 83       	std	Y+1, r24	; 0x01
 * [Returns]:      void
 *
 ----------------------------------------------------------------------------------*/
void send_password(uint8 pass[]){
	/*loop to send each byte of password to Control unit*/
	for(int i = 0; i < 5; i++){
    1944:	8f 85       	ldd	r24, Y+15	; 0x0f
    1946:	98 89       	ldd	r25, Y+16	; 0x10
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	98 8b       	std	Y+16, r25	; 0x10
    194c:	8f 87       	std	Y+15, r24	; 0x0f
    194e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1950:	98 89       	ldd	r25, Y+16	; 0x10
    1952:	85 30       	cpi	r24, 0x05	; 5
    1954:	91 05       	cpc	r25, r1
    1956:	0c f4       	brge	.+2      	; 0x195a <send_password+0x12c>
    1958:	79 cf       	rjmp	.-270    	; 0x184c <send_password+0x1e>
		UART_sendByte(pass[i]);
		_delay_ms(50);
	}
}
    195a:	62 96       	adiw	r28, 0x12	; 18
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <open>:
 * [Args]:         void
 *
 * [Returns]:      void
 *
 ----------------------------------------------------------------------------------*/
void open(void){
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	2b 97       	sbiw	r28, 0x0b	; 11
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1980:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
	/* Timer1 Configuration & Initialization*/
	Timer1_ConfigType Config_timer ={0, 8000, F_CPU_1024,CTC_MODE};
    1984:	ce 01       	movw	r24, r28
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	98 87       	std	Y+8, r25	; 0x08
    198a:	8f 83       	std	Y+7, r24	; 0x07
    198c:	eb e2       	ldi	r30, 0x2B	; 43
    198e:	f1 e0       	ldi	r31, 0x01	; 1
    1990:	fa 87       	std	Y+10, r31	; 0x0a
    1992:	e9 87       	std	Y+9, r30	; 0x09
    1994:	f6 e0       	ldi	r31, 0x06	; 6
    1996:	fb 87       	std	Y+11, r31	; 0x0b
    1998:	e9 85       	ldd	r30, Y+9	; 0x09
    199a:	fa 85       	ldd	r31, Y+10	; 0x0a
    199c:	00 80       	ld	r0, Z
    199e:	89 85       	ldd	r24, Y+9	; 0x09
    19a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	9a 87       	std	Y+10, r25	; 0x0a
    19a6:	89 87       	std	Y+9, r24	; 0x09
    19a8:	ef 81       	ldd	r30, Y+7	; 0x07
    19aa:	f8 85       	ldd	r31, Y+8	; 0x08
    19ac:	00 82       	st	Z, r0
    19ae:	8f 81       	ldd	r24, Y+7	; 0x07
    19b0:	98 85       	ldd	r25, Y+8	; 0x08
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	98 87       	std	Y+8, r25	; 0x08
    19b6:	8f 83       	std	Y+7, r24	; 0x07
    19b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    19ba:	91 50       	subi	r25, 0x01	; 1
    19bc:	9b 87       	std	Y+11, r25	; 0x0b
    19be:	eb 85       	ldd	r30, Y+11	; 0x0b
    19c0:	ee 23       	and	r30, r30
    19c2:	51 f7       	brne	.-44     	; 0x1998 <open+0x2c>
	Timer1_init(&Config_timer);
    19c4:	ce 01       	movw	r24, r28
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	0e 94 91 1c 	call	0x3922	; 0x3922 <Timer1_init>
	Timer1_setCallBack(timer_setCallBack);
    19cc:	8a e5       	ldi	r24, 0x5A	; 90
    19ce:	9d e0       	ldi	r25, 0x0D	; 13
    19d0:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <Timer1_setCallBack>
	/*
	 * make g_ticks zero to start calculation and comparison of time
	 */
	g_ticks = 0;
    19d4:	10 92 3a 01 	sts	0x013A, r1
	LCD_displayString("Door is Unlocking"); /*Door unlocking message on LCD*/
    19d8:	83 ef       	ldi	r24, 0xF3	; 243
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
	while(g_ticks < 15); /*Door unlocking for 15 seconds*/
    19e0:	80 91 3a 01 	lds	r24, 0x013A
    19e4:	8f 30       	cpi	r24, 0x0F	; 15
    19e6:	e0 f3       	brcs	.-8      	; 0x19e0 <open+0x74>
	g_ticks = 0;
    19e8:	10 92 3a 01 	sts	0x013A, r1
	LCD_clearScreen();
    19ec:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
	while(g_ticks < 3);/*stop for 3 seconds*/
    19f0:	80 91 3a 01 	lds	r24, 0x013A
    19f4:	83 30       	cpi	r24, 0x03	; 3
    19f6:	e0 f3       	brcs	.-8      	; 0x19f0 <open+0x84>
	g_ticks = 0;
    19f8:	10 92 3a 01 	sts	0x013A, r1
	LCD_displayString("Door is locking"); /*Door Locking message on LCD*/
    19fc:	85 e0       	ldi	r24, 0x05	; 5
    19fe:	91 e0       	ldi	r25, 0x01	; 1
    1a00:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
	while(g_ticks < 15);
    1a04:	80 91 3a 01 	lds	r24, 0x013A
    1a08:	8f 30       	cpi	r24, 0x0F	; 15
    1a0a:	e0 f3       	brcs	.-8      	; 0x1a04 <open+0x98>
	Timer1_deInit();
    1a0c:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <Timer1_deInit>
}
    1a10:	2b 96       	adiw	r28, 0x0b	; 11
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <alert>:
 * [Args]:         void
 *
 * [Returns]:      void
 *
 ----------------------------------------------------------------------------------*/
void alert(void){
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	2b 97       	sbiw	r28, 0x0b	; 11
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1a36:	0e 94 87 1c 	call	0x390e	; 0x390e <LCD_clearScreen>
	/* Timer1 Configuration & Initialization*/
	Timer1_ConfigType Config_timer ={0, 8000, F_CPU_1024,CTC_MODE};
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	98 87       	std	Y+8, r25	; 0x08
    1a40:	8f 83       	std	Y+7, r24	; 0x07
    1a42:	e1 e3       	ldi	r30, 0x31	; 49
    1a44:	f1 e0       	ldi	r31, 0x01	; 1
    1a46:	fa 87       	std	Y+10, r31	; 0x0a
    1a48:	e9 87       	std	Y+9, r30	; 0x09
    1a4a:	f6 e0       	ldi	r31, 0x06	; 6
    1a4c:	fb 87       	std	Y+11, r31	; 0x0b
    1a4e:	e9 85       	ldd	r30, Y+9	; 0x09
    1a50:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a52:	00 80       	ld	r0, Z
    1a54:	89 85       	ldd	r24, Y+9	; 0x09
    1a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	9a 87       	std	Y+10, r25	; 0x0a
    1a5c:	89 87       	std	Y+9, r24	; 0x09
    1a5e:	ef 81       	ldd	r30, Y+7	; 0x07
    1a60:	f8 85       	ldd	r31, Y+8	; 0x08
    1a62:	00 82       	st	Z, r0
    1a64:	8f 81       	ldd	r24, Y+7	; 0x07
    1a66:	98 85       	ldd	r25, Y+8	; 0x08
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	98 87       	std	Y+8, r25	; 0x08
    1a6c:	8f 83       	std	Y+7, r24	; 0x07
    1a6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a70:	91 50       	subi	r25, 0x01	; 1
    1a72:	9b 87       	std	Y+11, r25	; 0x0b
    1a74:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a76:	ee 23       	and	r30, r30
    1a78:	51 f7       	brne	.-44     	; 0x1a4e <alert+0x2c>
	Timer1_init(&Config_timer);
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	0e 94 91 1c 	call	0x3922	; 0x3922 <Timer1_init>
	Timer1_setCallBack(timer_setCallBack);
    1a82:	8a e5       	ldi	r24, 0x5A	; 90
    1a84:	9d e0       	ldi	r25, 0x0D	; 13
    1a86:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <Timer1_setCallBack>
	/*
	 * make g_ticks zero to start calculation and comparison of time
	 */
	g_ticks = 0;
    1a8a:	10 92 3a 01 	sts	0x013A, r1
	LCD_displayString("ALERT!"); /*ALERT message on LCD*/
    1a8e:	85 e1       	ldi	r24, 0x15	; 21
    1a90:	91 e0       	ldi	r25, 0x01	; 1
    1a92:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
	while(g_ticks < 60); /* Alert for 1 minute*/
    1a96:	80 91 3a 01 	lds	r24, 0x013A
    1a9a:	8c 33       	cpi	r24, 0x3C	; 60
    1a9c:	e0 f3       	brcs	.-8      	; 0x1a96 <alert+0x74>
	Timer1_deInit();
    1a9e:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <Timer1_deInit>
}
    1aa2:	2b 96       	adiw	r28, 0x0b	; 11
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret

00001ab4 <timer_setCallBack>:
 * [Args]:         void
 *
 * [Returns]:      void
 *
 ----------------------------------------------------------------------------------*/
void timer_setCallBack(void){
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    1abc:	80 91 3a 01 	lds	r24, 0x013A
    1ac0:	8f 5f       	subi	r24, 0xFF	; 255
    1ac2:	80 93 3a 01 	sts	0x013A, r24
}
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <GPIO_setupPinDirection+0x6>
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <GPIO_setupPinDirection+0x8>
    1ad4:	0f 92       	push	r0
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	6a 83       	std	Y+2, r22	; 0x02
    1ade:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	88 30       	cpi	r24, 0x08	; 8
    1ae4:	08 f0       	brcs	.+2      	; 0x1ae8 <GPIO_setupPinDirection+0x1c>
    1ae6:	d5 c0       	rjmp	.+426    	; 0x1c92 <GPIO_setupPinDirection+0x1c6>
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	84 30       	cpi	r24, 0x04	; 4
    1aec:	08 f0       	brcs	.+2      	; 0x1af0 <GPIO_setupPinDirection+0x24>
    1aee:	d1 c0       	rjmp	.+418    	; 0x1c92 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	28 2f       	mov	r18, r24
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	3d 83       	std	Y+5, r19	; 0x05
    1af8:	2c 83       	std	Y+4, r18	; 0x04
    1afa:	8c 81       	ldd	r24, Y+4	; 0x04
    1afc:	9d 81       	ldd	r25, Y+5	; 0x05
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	91 05       	cpc	r25, r1
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <GPIO_setupPinDirection+0x3a>
    1b04:	43 c0       	rjmp	.+134    	; 0x1b8c <GPIO_setupPinDirection+0xc0>
    1b06:	2c 81       	ldd	r18, Y+4	; 0x04
    1b08:	3d 81       	ldd	r19, Y+5	; 0x05
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	2c f4       	brge	.+10     	; 0x1b1a <GPIO_setupPinDirection+0x4e>
    1b10:	8c 81       	ldd	r24, Y+4	; 0x04
    1b12:	9d 81       	ldd	r25, Y+5	; 0x05
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	71 f0       	breq	.+28     	; 0x1b34 <GPIO_setupPinDirection+0x68>
    1b18:	bc c0       	rjmp	.+376    	; 0x1c92 <GPIO_setupPinDirection+0x1c6>
    1b1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1e:	22 30       	cpi	r18, 0x02	; 2
    1b20:	31 05       	cpc	r19, r1
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <GPIO_setupPinDirection+0x5a>
    1b24:	5f c0       	rjmp	.+190    	; 0x1be4 <GPIO_setupPinDirection+0x118>
    1b26:	8c 81       	ldd	r24, Y+4	; 0x04
    1b28:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2a:	83 30       	cpi	r24, 0x03	; 3
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <GPIO_setupPinDirection+0x66>
    1b30:	85 c0       	rjmp	.+266    	; 0x1c3c <GPIO_setupPinDirection+0x170>
    1b32:	af c0       	rjmp	.+350    	; 0x1c92 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	a1 f4       	brne	.+40     	; 0x1b62 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1b3a:	aa e3       	ldi	r26, 0x3A	; 58
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	ea e3       	ldi	r30, 0x3A	; 58
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <GPIO_setupPinDirection+0x8c>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <GPIO_setupPinDirection+0x88>
    1b5c:	84 2b       	or	r24, r20
    1b5e:	8c 93       	st	X, r24
    1b60:	98 c0       	rjmp	.+304    	; 0x1c92 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1b62:	aa e3       	ldi	r26, 0x3A	; 58
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	ea e3       	ldi	r30, 0x3A	; 58
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	48 2f       	mov	r20, r24
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	02 2e       	mov	r0, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <GPIO_setupPinDirection+0xb4>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	0a 94       	dec	r0
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <GPIO_setupPinDirection+0xb0>
    1b84:	80 95       	com	r24
    1b86:	84 23       	and	r24, r20
    1b88:	8c 93       	st	X, r24
    1b8a:	83 c0       	rjmp	.+262    	; 0x1c92 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	a1 f4       	brne	.+40     	; 0x1bba <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1b92:	a7 e3       	ldi	r26, 0x37	; 55
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e7 e3       	ldi	r30, 0x37	; 55
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	48 2f       	mov	r20, r24
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	02 2e       	mov	r0, r18
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <GPIO_setupPinDirection+0xe4>
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	0a 94       	dec	r0
    1bb2:	e2 f7       	brpl	.-8      	; 0x1bac <GPIO_setupPinDirection+0xe0>
    1bb4:	84 2b       	or	r24, r20
    1bb6:	8c 93       	st	X, r24
    1bb8:	6c c0       	rjmp	.+216    	; 0x1c92 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1bba:	a7 e3       	ldi	r26, 0x37	; 55
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e7 e3       	ldi	r30, 0x37	; 55
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	48 2f       	mov	r20, r24
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	02 2e       	mov	r0, r18
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <GPIO_setupPinDirection+0x10c>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	0a 94       	dec	r0
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <GPIO_setupPinDirection+0x108>
    1bdc:	80 95       	com	r24
    1bde:	84 23       	and	r24, r20
    1be0:	8c 93       	st	X, r24
    1be2:	57 c0       	rjmp	.+174    	; 0x1c92 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	a1 f4       	brne	.+40     	; 0x1c12 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1bea:	a4 e3       	ldi	r26, 0x34	; 52
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e4 e3       	ldi	r30, 0x34	; 52
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	48 2f       	mov	r20, r24
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 2e       	mov	r0, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <GPIO_setupPinDirection+0x13c>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <GPIO_setupPinDirection+0x138>
    1c0c:	84 2b       	or	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	40 c0       	rjmp	.+128    	; 0x1c92 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1c12:	a4 e3       	ldi	r26, 0x34	; 52
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e4 e3       	ldi	r30, 0x34	; 52
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <GPIO_setupPinDirection+0x164>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <GPIO_setupPinDirection+0x160>
    1c34:	80 95       	com	r24
    1c36:	84 23       	and	r24, r20
    1c38:	8c 93       	st	X, r24
    1c3a:	2b c0       	rjmp	.+86     	; 0x1c92 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	a1 f4       	brne	.+40     	; 0x1c6a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1c42:	a1 e3       	ldi	r26, 0x31	; 49
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e1 e3       	ldi	r30, 0x31	; 49
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	02 2e       	mov	r0, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <GPIO_setupPinDirection+0x194>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	0a 94       	dec	r0
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <GPIO_setupPinDirection+0x190>
    1c64:	84 2b       	or	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	14 c0       	rjmp	.+40     	; 0x1c92 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1c6a:	a1 e3       	ldi	r26, 0x31	; 49
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e1 e3       	ldi	r30, 0x31	; 49
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	48 2f       	mov	r20, r24
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	02 2e       	mov	r0, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <GPIO_setupPinDirection+0x1bc>
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	0a 94       	dec	r0
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <GPIO_setupPinDirection+0x1b8>
    1c8c:	80 95       	com	r24
    1c8e:	84 23       	and	r24, r20
    1c90:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <GPIO_writePin+0x6>
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <GPIO_writePin+0x8>
    1caa:	0f 92       	push	r0
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	6a 83       	std	Y+2, r22	; 0x02
    1cb4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	88 30       	cpi	r24, 0x08	; 8
    1cba:	08 f0       	brcs	.+2      	; 0x1cbe <GPIO_writePin+0x1c>
    1cbc:	d5 c0       	rjmp	.+426    	; 0x1e68 <GPIO_writePin+0x1c6>
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	84 30       	cpi	r24, 0x04	; 4
    1cc2:	08 f0       	brcs	.+2      	; 0x1cc6 <GPIO_writePin+0x24>
    1cc4:	d1 c0       	rjmp	.+418    	; 0x1e68 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	3d 83       	std	Y+5, r19	; 0x05
    1cce:	2c 83       	std	Y+4, r18	; 0x04
    1cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <GPIO_writePin+0x3a>
    1cda:	43 c0       	rjmp	.+134    	; 0x1d62 <GPIO_writePin+0xc0>
    1cdc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cde:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce0:	22 30       	cpi	r18, 0x02	; 2
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	2c f4       	brge	.+10     	; 0x1cf0 <GPIO_writePin+0x4e>
    1ce6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	71 f0       	breq	.+28     	; 0x1d0a <GPIO_writePin+0x68>
    1cee:	bc c0       	rjmp	.+376    	; 0x1e68 <GPIO_writePin+0x1c6>
    1cf0:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf2:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf4:	22 30       	cpi	r18, 0x02	; 2
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <GPIO_writePin+0x5a>
    1cfa:	5f c0       	rjmp	.+190    	; 0x1dba <GPIO_writePin+0x118>
    1cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1d00:	83 30       	cpi	r24, 0x03	; 3
    1d02:	91 05       	cpc	r25, r1
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <GPIO_writePin+0x66>
    1d06:	85 c0       	rjmp	.+266    	; 0x1e12 <GPIO_writePin+0x170>
    1d08:	af c0       	rjmp	.+350    	; 0x1e68 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	a1 f4       	brne	.+40     	; 0x1d38 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1d10:	ab e3       	ldi	r26, 0x3B	; 59
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	eb e3       	ldi	r30, 0x3B	; 59
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	48 2f       	mov	r20, r24
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	02 2e       	mov	r0, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <GPIO_writePin+0x8c>
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	0a 94       	dec	r0
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <GPIO_writePin+0x88>
    1d32:	84 2b       	or	r24, r20
    1d34:	8c 93       	st	X, r24
    1d36:	98 c0       	rjmp	.+304    	; 0x1e68 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1d38:	ab e3       	ldi	r26, 0x3B	; 59
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	eb e3       	ldi	r30, 0x3B	; 59
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	48 2f       	mov	r20, r24
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	02 2e       	mov	r0, r18
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <GPIO_writePin+0xb4>
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	0a 94       	dec	r0
    1d58:	e2 f7       	brpl	.-8      	; 0x1d52 <GPIO_writePin+0xb0>
    1d5a:	80 95       	com	r24
    1d5c:	84 23       	and	r24, r20
    1d5e:	8c 93       	st	X, r24
    1d60:	83 c0       	rjmp	.+262    	; 0x1e68 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	a1 f4       	brne	.+40     	; 0x1d90 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1d68:	a8 e3       	ldi	r26, 0x38	; 56
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e8 e3       	ldi	r30, 0x38	; 56
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	48 2f       	mov	r20, r24
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	02 2e       	mov	r0, r18
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <GPIO_writePin+0xe4>
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	0a 94       	dec	r0
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <GPIO_writePin+0xe0>
    1d8a:	84 2b       	or	r24, r20
    1d8c:	8c 93       	st	X, r24
    1d8e:	6c c0       	rjmp	.+216    	; 0x1e68 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1d90:	a8 e3       	ldi	r26, 0x38	; 56
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e8 e3       	ldi	r30, 0x38	; 56
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 2e       	mov	r0, r18
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <GPIO_writePin+0x10c>
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	0a 94       	dec	r0
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <GPIO_writePin+0x108>
    1db2:	80 95       	com	r24
    1db4:	84 23       	and	r24, r20
    1db6:	8c 93       	st	X, r24
    1db8:	57 c0       	rjmp	.+174    	; 0x1e68 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	81 30       	cpi	r24, 0x01	; 1
    1dbe:	a1 f4       	brne	.+40     	; 0x1de8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1dc0:	a5 e3       	ldi	r26, 0x35	; 53
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e5 e3       	ldi	r30, 0x35	; 53
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	48 2f       	mov	r20, r24
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	02 2e       	mov	r0, r18
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <GPIO_writePin+0x13c>
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	0a 94       	dec	r0
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <GPIO_writePin+0x138>
    1de2:	84 2b       	or	r24, r20
    1de4:	8c 93       	st	X, r24
    1de6:	40 c0       	rjmp	.+128    	; 0x1e68 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1de8:	a5 e3       	ldi	r26, 0x35	; 53
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e5 e3       	ldi	r30, 0x35	; 53
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	48 2f       	mov	r20, r24
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	02 2e       	mov	r0, r18
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <GPIO_writePin+0x164>
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	0a 94       	dec	r0
    1e08:	e2 f7       	brpl	.-8      	; 0x1e02 <GPIO_writePin+0x160>
    1e0a:	80 95       	com	r24
    1e0c:	84 23       	and	r24, r20
    1e0e:	8c 93       	st	X, r24
    1e10:	2b c0       	rjmp	.+86     	; 0x1e68 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	81 30       	cpi	r24, 0x01	; 1
    1e16:	a1 f4       	brne	.+40     	; 0x1e40 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1e18:	a2 e3       	ldi	r26, 0x32	; 50
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e2 e3       	ldi	r30, 0x32	; 50
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	48 2f       	mov	r20, r24
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	02 2e       	mov	r0, r18
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <GPIO_writePin+0x194>
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	0a 94       	dec	r0
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <GPIO_writePin+0x190>
    1e3a:	84 2b       	or	r24, r20
    1e3c:	8c 93       	st	X, r24
    1e3e:	14 c0       	rjmp	.+40     	; 0x1e68 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1e40:	a2 e3       	ldi	r26, 0x32	; 50
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e2 e3       	ldi	r30, 0x32	; 50
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	48 2f       	mov	r20, r24
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	02 2e       	mov	r0, r18
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <GPIO_writePin+0x1bc>
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	0a 94       	dec	r0
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <GPIO_writePin+0x1b8>
    1e62:	80 95       	com	r24
    1e64:	84 23       	and	r24, r20
    1e66:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <GPIO_readPin+0x6>
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <GPIO_readPin+0x8>
    1e80:	0f 92       	push	r0
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	8a 83       	std	Y+2, r24	; 0x02
    1e88:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1e8a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	88 30       	cpi	r24, 0x08	; 8
    1e90:	08 f0       	brcs	.+2      	; 0x1e94 <GPIO_readPin+0x1c>
    1e92:	84 c0       	rjmp	.+264    	; 0x1f9c <GPIO_readPin+0x124>
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	84 30       	cpi	r24, 0x04	; 4
    1e98:	08 f0       	brcs	.+2      	; 0x1e9c <GPIO_readPin+0x24>
    1e9a:	80 c0       	rjmp	.+256    	; 0x1f9c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	3d 83       	std	Y+5, r19	; 0x05
    1ea4:	2c 83       	std	Y+4, r18	; 0x04
    1ea6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ea8:	5d 81       	ldd	r21, Y+5	; 0x05
    1eaa:	41 30       	cpi	r20, 0x01	; 1
    1eac:	51 05       	cpc	r21, r1
    1eae:	79 f1       	breq	.+94     	; 0x1f0e <GPIO_readPin+0x96>
    1eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb4:	82 30       	cpi	r24, 0x02	; 2
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	34 f4       	brge	.+12     	; 0x1ec6 <GPIO_readPin+0x4e>
    1eba:	2c 81       	ldd	r18, Y+4	; 0x04
    1ebc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ebe:	21 15       	cp	r18, r1
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	69 f0       	breq	.+26     	; 0x1ede <GPIO_readPin+0x66>
    1ec4:	6b c0       	rjmp	.+214    	; 0x1f9c <GPIO_readPin+0x124>
    1ec6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ec8:	5d 81       	ldd	r21, Y+5	; 0x05
    1eca:	42 30       	cpi	r20, 0x02	; 2
    1ecc:	51 05       	cpc	r21, r1
    1ece:	b9 f1       	breq	.+110    	; 0x1f3e <GPIO_readPin+0xc6>
    1ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed4:	83 30       	cpi	r24, 0x03	; 3
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <GPIO_readPin+0x64>
    1eda:	49 c0       	rjmp	.+146    	; 0x1f6e <GPIO_readPin+0xf6>
    1edc:	5f c0       	rjmp	.+190    	; 0x1f9c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1ede:	e9 e3       	ldi	r30, 0x39	; 57
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	88 2f       	mov	r24, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a9 01       	movw	r20, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <GPIO_readPin+0x7e>
    1ef2:	55 95       	asr	r21
    1ef4:	47 95       	ror	r20
    1ef6:	8a 95       	dec	r24
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <GPIO_readPin+0x7a>
    1efa:	ca 01       	movw	r24, r20
    1efc:	81 70       	andi	r24, 0x01	; 1
    1efe:	90 70       	andi	r25, 0x00	; 0
    1f00:	88 23       	and	r24, r24
    1f02:	19 f0       	breq	.+6      	; 0x1f0a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	49 c0       	rjmp	.+146    	; 0x1f9c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f0a:	19 82       	std	Y+1, r1	; 0x01
    1f0c:	47 c0       	rjmp	.+142    	; 0x1f9c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1f0e:	e6 e3       	ldi	r30, 0x36	; 54
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	a9 01       	movw	r20, r18
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <GPIO_readPin+0xae>
    1f22:	55 95       	asr	r21
    1f24:	47 95       	ror	r20
    1f26:	8a 95       	dec	r24
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <GPIO_readPin+0xaa>
    1f2a:	ca 01       	movw	r24, r20
    1f2c:	81 70       	andi	r24, 0x01	; 1
    1f2e:	90 70       	andi	r25, 0x00	; 0
    1f30:	88 23       	and	r24, r24
    1f32:	19 f0       	breq	.+6      	; 0x1f3a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	89 83       	std	Y+1, r24	; 0x01
    1f38:	31 c0       	rjmp	.+98     	; 0x1f9c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f3a:	19 82       	std	Y+1, r1	; 0x01
    1f3c:	2f c0       	rjmp	.+94     	; 0x1f9c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1f3e:	e3 e3       	ldi	r30, 0x33	; 51
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	88 2f       	mov	r24, r24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a9 01       	movw	r20, r18
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <GPIO_readPin+0xde>
    1f52:	55 95       	asr	r21
    1f54:	47 95       	ror	r20
    1f56:	8a 95       	dec	r24
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <GPIO_readPin+0xda>
    1f5a:	ca 01       	movw	r24, r20
    1f5c:	81 70       	andi	r24, 0x01	; 1
    1f5e:	90 70       	andi	r25, 0x00	; 0
    1f60:	88 23       	and	r24, r24
    1f62:	19 f0       	breq	.+6      	; 0x1f6a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	19 c0       	rjmp	.+50     	; 0x1f9c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f6a:	19 82       	std	Y+1, r1	; 0x01
    1f6c:	17 c0       	rjmp	.+46     	; 0x1f9c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1f6e:	e0 e3       	ldi	r30, 0x30	; 48
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	88 2f       	mov	r24, r24
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	a9 01       	movw	r20, r18
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <GPIO_readPin+0x10e>
    1f82:	55 95       	asr	r21
    1f84:	47 95       	ror	r20
    1f86:	8a 95       	dec	r24
    1f88:	e2 f7       	brpl	.-8      	; 0x1f82 <GPIO_readPin+0x10a>
    1f8a:	ca 01       	movw	r24, r20
    1f8c:	81 70       	andi	r24, 0x01	; 1
    1f8e:	90 70       	andi	r25, 0x00	; 0
    1f90:	88 23       	and	r24, r24
    1f92:	19 f0       	breq	.+6      	; 0x1f9a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	01 c0       	rjmp	.+2      	; 0x1f9c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f9a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <GPIO_setupPortDirection+0x6>
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <GPIO_setupPortDirection+0x8>
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	84 30       	cpi	r24, 0x04	; 4
    1fc2:	90 f5       	brcc	.+100    	; 0x2028 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	3c 83       	std	Y+4, r19	; 0x04
    1fcc:	2b 83       	std	Y+3, r18	; 0x03
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	81 30       	cpi	r24, 0x01	; 1
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	d1 f0       	breq	.+52     	; 0x200c <GPIO_setupPortDirection+0x5e>
    1fd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fda:	3c 81       	ldd	r19, Y+4	; 0x04
    1fdc:	22 30       	cpi	r18, 0x02	; 2
    1fde:	31 05       	cpc	r19, r1
    1fe0:	2c f4       	brge	.+10     	; 0x1fec <GPIO_setupPortDirection+0x3e>
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	61 f0       	breq	.+24     	; 0x2002 <GPIO_setupPortDirection+0x54>
    1fea:	1e c0       	rjmp	.+60     	; 0x2028 <GPIO_setupPortDirection+0x7a>
    1fec:	2b 81       	ldd	r18, Y+3	; 0x03
    1fee:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff0:	22 30       	cpi	r18, 0x02	; 2
    1ff2:	31 05       	cpc	r19, r1
    1ff4:	81 f0       	breq	.+32     	; 0x2016 <GPIO_setupPortDirection+0x68>
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	83 30       	cpi	r24, 0x03	; 3
    1ffc:	91 05       	cpc	r25, r1
    1ffe:	81 f0       	breq	.+32     	; 0x2020 <GPIO_setupPortDirection+0x72>
    2000:	13 c0       	rjmp	.+38     	; 0x2028 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2002:	ea e3       	ldi	r30, 0x3A	; 58
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	80 83       	st	Z, r24
    200a:	0e c0       	rjmp	.+28     	; 0x2028 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    200c:	e7 e3       	ldi	r30, 0x37	; 55
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	80 83       	st	Z, r24
    2014:	09 c0       	rjmp	.+18     	; 0x2028 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2016:	e4 e3       	ldi	r30, 0x34	; 52
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	80 83       	st	Z, r24
    201e:	04 c0       	rjmp	.+8      	; 0x2028 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2020:	e1 e3       	ldi	r30, 0x31	; 49
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	80 83       	st	Z, r24
			break;
		}
	}
}
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	00 d0       	rcall	.+0      	; 0x203c <GPIO_writePort+0x6>
    203c:	00 d0       	rcall	.+0      	; 0x203e <GPIO_writePort+0x8>
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	84 30       	cpi	r24, 0x04	; 4
    204a:	90 f5       	brcc	.+100    	; 0x20b0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	3c 83       	std	Y+4, r19	; 0x04
    2054:	2b 83       	std	Y+3, r18	; 0x03
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	9c 81       	ldd	r25, Y+4	; 0x04
    205a:	81 30       	cpi	r24, 0x01	; 1
    205c:	91 05       	cpc	r25, r1
    205e:	d1 f0       	breq	.+52     	; 0x2094 <GPIO_writePort+0x5e>
    2060:	2b 81       	ldd	r18, Y+3	; 0x03
    2062:	3c 81       	ldd	r19, Y+4	; 0x04
    2064:	22 30       	cpi	r18, 0x02	; 2
    2066:	31 05       	cpc	r19, r1
    2068:	2c f4       	brge	.+10     	; 0x2074 <GPIO_writePort+0x3e>
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	61 f0       	breq	.+24     	; 0x208a <GPIO_writePort+0x54>
    2072:	1e c0       	rjmp	.+60     	; 0x20b0 <GPIO_writePort+0x7a>
    2074:	2b 81       	ldd	r18, Y+3	; 0x03
    2076:	3c 81       	ldd	r19, Y+4	; 0x04
    2078:	22 30       	cpi	r18, 0x02	; 2
    207a:	31 05       	cpc	r19, r1
    207c:	81 f0       	breq	.+32     	; 0x209e <GPIO_writePort+0x68>
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	9c 81       	ldd	r25, Y+4	; 0x04
    2082:	83 30       	cpi	r24, 0x03	; 3
    2084:	91 05       	cpc	r25, r1
    2086:	81 f0       	breq	.+32     	; 0x20a8 <GPIO_writePort+0x72>
    2088:	13 c0       	rjmp	.+38     	; 0x20b0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    208a:	eb e3       	ldi	r30, 0x3B	; 59
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	80 83       	st	Z, r24
    2092:	0e c0       	rjmp	.+28     	; 0x20b0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2094:	e8 e3       	ldi	r30, 0x38	; 56
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	80 83       	st	Z, r24
    209c:	09 c0       	rjmp	.+18     	; 0x20b0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    209e:	e5 e3       	ldi	r30, 0x35	; 53
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	80 83       	st	Z, r24
    20a6:	04 c0       	rjmp	.+8      	; 0x20b0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    20a8:	e2 e3       	ldi	r30, 0x32	; 50
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	80 83       	st	Z, r24
			break;
		}
	}
}
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <GPIO_readPort+0x6>
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <GPIO_readPort+0x8>
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    20cc:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	84 30       	cpi	r24, 0x04	; 4
    20d2:	90 f5       	brcc	.+100    	; 0x2138 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	28 2f       	mov	r18, r24
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	3c 83       	std	Y+4, r19	; 0x04
    20dc:	2b 83       	std	Y+3, r18	; 0x03
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	81 30       	cpi	r24, 0x01	; 1
    20e4:	91 05       	cpc	r25, r1
    20e6:	d1 f0       	breq	.+52     	; 0x211c <GPIO_readPort+0x5e>
    20e8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ea:	3c 81       	ldd	r19, Y+4	; 0x04
    20ec:	22 30       	cpi	r18, 0x02	; 2
    20ee:	31 05       	cpc	r19, r1
    20f0:	2c f4       	brge	.+10     	; 0x20fc <GPIO_readPort+0x3e>
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	61 f0       	breq	.+24     	; 0x2112 <GPIO_readPort+0x54>
    20fa:	1e c0       	rjmp	.+60     	; 0x2138 <GPIO_readPort+0x7a>
    20fc:	2b 81       	ldd	r18, Y+3	; 0x03
    20fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2100:	22 30       	cpi	r18, 0x02	; 2
    2102:	31 05       	cpc	r19, r1
    2104:	81 f0       	breq	.+32     	; 0x2126 <GPIO_readPort+0x68>
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	9c 81       	ldd	r25, Y+4	; 0x04
    210a:	83 30       	cpi	r24, 0x03	; 3
    210c:	91 05       	cpc	r25, r1
    210e:	81 f0       	breq	.+32     	; 0x2130 <GPIO_readPort+0x72>
    2110:	13 c0       	rjmp	.+38     	; 0x2138 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2112:	e9 e3       	ldi	r30, 0x39	; 57
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	0e c0       	rjmp	.+28     	; 0x2138 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    211c:	e6 e3       	ldi	r30, 0x36	; 54
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	09 c0       	rjmp	.+18     	; 0x2138 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2126:	e3 e3       	ldi	r30, 0x33	; 51
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	04 c0       	rjmp	.+8      	; 0x2138 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2130:	e0 e3       	ldi	r30, 0x30	; 48
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2138:	89 81       	ldd	r24, Y+1	; 0x01
}
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	60 97       	sbiw	r28, 0x10	; 16
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	64 e0       	ldi	r22, 0x04	; 4
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	65 e0       	ldi	r22, 0x05	; 5
    216a:	40 e0       	ldi	r20, 0x00	; 0
    216c:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	66 e0       	ldi	r22, 0x06	; 6
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	67 e0       	ldi	r22, 0x07	; 7
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2184:	83 e0       	ldi	r24, 0x03	; 3
    2186:	62 e0       	ldi	r22, 0x02	; 2
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    218e:	83 e0       	ldi	r24, 0x03	; 3
    2190:	63 e0       	ldi	r22, 0x03	; 3
    2192:	40 e0       	ldi	r20, 0x00	; 0
    2194:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2198:	83 e0       	ldi	r24, 0x03	; 3
    219a:	64 e0       	ldi	r22, 0x04	; 4
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    21a2:	83 e0       	ldi	r24, 0x03	; 3
    21a4:	65 e0       	ldi	r22, 0x05	; 5
    21a6:	40 e0       	ldi	r20, 0x00	; 0
    21a8:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    21ac:	1f 86       	std	Y+15, r1	; 0x0f
    21ae:	b4 c0       	rjmp	.+360    	; 0x2318 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    21b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b2:	98 2f       	mov	r25, r24
    21b4:	9c 5f       	subi	r25, 0xFC	; 252
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	69 2f       	mov	r22, r25
    21ba:	41 e0       	ldi	r20, 0x01	; 1
    21bc:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	a0 ea       	ldi	r26, 0xA0	; 160
    21c6:	b0 e4       	ldi	r27, 0x40	; 64
    21c8:	8b 87       	std	Y+11, r24	; 0x0b
    21ca:	9c 87       	std	Y+12, r25	; 0x0c
    21cc:	ad 87       	std	Y+13, r26	; 0x0d
    21ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	4a ef       	ldi	r20, 0xFA	; 250
    21de:	54 e4       	ldi	r21, 0x44	; 68
    21e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	8f 83       	std	Y+7, r24	; 0x07
    21ea:	98 87       	std	Y+8, r25	; 0x08
    21ec:	a9 87       	std	Y+9, r26	; 0x09
    21ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21f0:	6f 81       	ldd	r22, Y+7	; 0x07
    21f2:	78 85       	ldd	r23, Y+8	; 0x08
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e8       	ldi	r20, 0x80	; 128
    21fe:	5f e3       	ldi	r21, 0x3F	; 63
    2200:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2204:	88 23       	and	r24, r24
    2206:	2c f4       	brge	.+10     	; 0x2212 <KEYPAD_getPressedKey+0xca>
		__ticks = 1;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9e 83       	std	Y+6, r25	; 0x06
    220e:	8d 83       	std	Y+5, r24	; 0x05
    2210:	3f c0       	rjmp	.+126    	; 0x2290 <KEYPAD_getPressedKey+0x148>
	else if (__tmp > 65535)
    2212:	6f 81       	ldd	r22, Y+7	; 0x07
    2214:	78 85       	ldd	r23, Y+8	; 0x08
    2216:	89 85       	ldd	r24, Y+9	; 0x09
    2218:	9a 85       	ldd	r25, Y+10	; 0x0a
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	3f ef       	ldi	r19, 0xFF	; 255
    221e:	4f e7       	ldi	r20, 0x7F	; 127
    2220:	57 e4       	ldi	r21, 0x47	; 71
    2222:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2226:	18 16       	cp	r1, r24
    2228:	4c f5       	brge	.+82     	; 0x227c <KEYPAD_getPressedKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222a:	6b 85       	ldd	r22, Y+11	; 0x0b
    222c:	7c 85       	ldd	r23, Y+12	; 0x0c
    222e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2230:	9e 85       	ldd	r25, Y+14	; 0x0e
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e2       	ldi	r20, 0x20	; 32
    2238:	51 e4       	ldi	r21, 0x41	; 65
    223a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9e 83       	std	Y+6, r25	; 0x06
    2250:	8d 83       	std	Y+5, r24	; 0x05
    2252:	0f c0       	rjmp	.+30     	; 0x2272 <KEYPAD_getPressedKey+0x12a>
    2254:	88 ec       	ldi	r24, 0xC8	; 200
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	9c 83       	std	Y+4, r25	; 0x04
    225a:	8b 83       	std	Y+3, r24	; 0x03
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <KEYPAD_getPressedKey+0x118>
    2264:	9c 83       	std	Y+4, r25	; 0x04
    2266:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	9e 81       	ldd	r25, Y+6	; 0x06
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	9e 83       	std	Y+6, r25	; 0x06
    2270:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2272:	8d 81       	ldd	r24, Y+5	; 0x05
    2274:	9e 81       	ldd	r25, Y+6	; 0x06
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	69 f7       	brne	.-38     	; 0x2254 <KEYPAD_getPressedKey+0x10c>
    227a:	14 c0       	rjmp	.+40     	; 0x22a4 <KEYPAD_getPressedKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227c:	6f 81       	ldd	r22, Y+7	; 0x07
    227e:	78 85       	ldd	r23, Y+8	; 0x08
    2280:	89 85       	ldd	r24, Y+9	; 0x09
    2282:	9a 85       	ldd	r25, Y+10	; 0x0a
    2284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9e 83       	std	Y+6, r25	; 0x06
    228e:	8d 83       	std	Y+5, r24	; 0x05
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	9e 81       	ldd	r25, Y+6	; 0x06
    2294:	9a 83       	std	Y+2, r25	; 0x02
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	9a 81       	ldd	r25, Y+2	; 0x02
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <KEYPAD_getPressedKey+0x154>
    22a0:	9a 83       	std	Y+2, r25	; 0x02
    22a2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(5);
			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    22a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a6:	98 2f       	mov	r25, r24
    22a8:	9c 5f       	subi	r25, 0xFC	; 252
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	69 2f       	mov	r22, r25
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    22b4:	18 8a       	std	Y+16, r1	; 0x10
    22b6:	22 c0       	rjmp	.+68     	; 0x22fc <KEYPAD_getPressedKey+0x1b4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    22b8:	88 89       	ldd	r24, Y+16	; 0x10
    22ba:	98 2f       	mov	r25, r24
    22bc:	9e 5f       	subi	r25, 0xFE	; 254
    22be:	83 e0       	ldi	r24, 0x03	; 3
    22c0:	69 2f       	mov	r22, r25
    22c2:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <GPIO_readPin>
    22c6:	88 23       	and	r24, r24
    22c8:	b1 f4       	brne	.+44     	; 0x22f6 <KEYPAD_getPressedKey+0x1ae>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    22ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    22cc:	88 2f       	mov	r24, r24
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	88 0f       	add	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	88 0f       	add	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	98 2f       	mov	r25, r24
    22da:	88 89       	ldd	r24, Y+16	; 0x10
    22dc:	89 0f       	add	r24, r25
    22de:	8f 5f       	subi	r24, 0xFF	; 255
    22e0:	0e 94 91 11 	call	0x2322	; 0x2322 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    22e4:	60 96       	adiw	r28, 0x10	; 16
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
			_delay_ms(5);
			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    22f6:	88 89       	ldd	r24, Y+16	; 0x10
    22f8:	8f 5f       	subi	r24, 0xFF	; 255
    22fa:	88 8b       	std	Y+16, r24	; 0x10
    22fc:	88 89       	ldd	r24, Y+16	; 0x10
    22fe:	84 30       	cpi	r24, 0x04	; 4
    2300:	d8 f2       	brcs	.-74     	; 0x22b8 <KEYPAD_getPressedKey+0x170>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2302:	8f 85       	ldd	r24, Y+15	; 0x0f
    2304:	98 2f       	mov	r25, r24
    2306:	9c 5f       	subi	r25, 0xFC	; 252
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	69 2f       	mov	r22, r25
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2312:	8f 85       	ldd	r24, Y+15	; 0x0f
    2314:	8f 5f       	subi	r24, 0xFF	; 255
    2316:	8f 87       	std	Y+15, r24	; 0x0f
    2318:	8f 85       	ldd	r24, Y+15	; 0x0f
    231a:	84 30       	cpi	r24, 0x04	; 4
    231c:	08 f4       	brcc	.+2      	; 0x2320 <KEYPAD_getPressedKey+0x1d8>
    231e:	48 cf       	rjmp	.-368    	; 0x21b0 <KEYPAD_getPressedKey+0x68>
    2320:	45 cf       	rjmp	.-374    	; 0x21ac <KEYPAD_getPressedKey+0x64>

00002322 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	00 d0       	rcall	.+0      	; 0x2328 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2328:	00 d0       	rcall	.+0      	; 0x232a <KEYPAD_4x4_adjustKeyNumber+0x8>
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2330:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	3c 83       	std	Y+4, r19	; 0x04
    233a:	2b 83       	std	Y+3, r18	; 0x03
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	9c 81       	ldd	r25, Y+4	; 0x04
    2340:	88 30       	cpi	r24, 0x08	; 8
    2342:	91 05       	cpc	r25, r1
    2344:	09 f4       	brne	.+2      	; 0x2348 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2346:	70 c0       	rjmp	.+224    	; 0x2428 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2348:	2b 81       	ldd	r18, Y+3	; 0x03
    234a:	3c 81       	ldd	r19, Y+4	; 0x04
    234c:	29 30       	cpi	r18, 0x09	; 9
    234e:	31 05       	cpc	r19, r1
    2350:	5c f5       	brge	.+86     	; 0x23a8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	9c 81       	ldd	r25, Y+4	; 0x04
    2356:	84 30       	cpi	r24, 0x04	; 4
    2358:	91 05       	cpc	r25, r1
    235a:	09 f4       	brne	.+2      	; 0x235e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    235c:	59 c0       	rjmp	.+178    	; 0x2410 <KEYPAD_4x4_adjustKeyNumber+0xee>
    235e:	2b 81       	ldd	r18, Y+3	; 0x03
    2360:	3c 81       	ldd	r19, Y+4	; 0x04
    2362:	25 30       	cpi	r18, 0x05	; 5
    2364:	31 05       	cpc	r19, r1
    2366:	9c f4       	brge	.+38     	; 0x238e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	82 30       	cpi	r24, 0x02	; 2
    236e:	91 05       	cpc	r25, r1
    2370:	09 f4       	brne	.+2      	; 0x2374 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2372:	48 c0       	rjmp	.+144    	; 0x2404 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2374:	2b 81       	ldd	r18, Y+3	; 0x03
    2376:	3c 81       	ldd	r19, Y+4	; 0x04
    2378:	23 30       	cpi	r18, 0x03	; 3
    237a:	31 05       	cpc	r19, r1
    237c:	0c f0       	brlt	.+2      	; 0x2380 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    237e:	45 c0       	rjmp	.+138    	; 0x240a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	91 05       	cpc	r25, r1
    2388:	09 f4       	brne	.+2      	; 0x238c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    238a:	39 c0       	rjmp	.+114    	; 0x23fe <KEYPAD_4x4_adjustKeyNumber+0xdc>
    238c:	67 c0       	rjmp	.+206    	; 0x245c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    238e:	2b 81       	ldd	r18, Y+3	; 0x03
    2390:	3c 81       	ldd	r19, Y+4	; 0x04
    2392:	26 30       	cpi	r18, 0x06	; 6
    2394:	31 05       	cpc	r19, r1
    2396:	09 f4       	brne	.+2      	; 0x239a <KEYPAD_4x4_adjustKeyNumber+0x78>
    2398:	41 c0       	rjmp	.+130    	; 0x241c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	9c 81       	ldd	r25, Y+4	; 0x04
    239e:	87 30       	cpi	r24, 0x07	; 7
    23a0:	91 05       	cpc	r25, r1
    23a2:	0c f0       	brlt	.+2      	; 0x23a6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    23a4:	3e c0       	rjmp	.+124    	; 0x2422 <KEYPAD_4x4_adjustKeyNumber+0x100>
    23a6:	37 c0       	rjmp	.+110    	; 0x2416 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    23a8:	2b 81       	ldd	r18, Y+3	; 0x03
    23aa:	3c 81       	ldd	r19, Y+4	; 0x04
    23ac:	2c 30       	cpi	r18, 0x0C	; 12
    23ae:	31 05       	cpc	r19, r1
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <KEYPAD_4x4_adjustKeyNumber+0x92>
    23b2:	46 c0       	rjmp	.+140    	; 0x2440 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	9c 81       	ldd	r25, Y+4	; 0x04
    23b8:	8d 30       	cpi	r24, 0x0D	; 13
    23ba:	91 05       	cpc	r25, r1
    23bc:	5c f4       	brge	.+22     	; 0x23d4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    23be:	2b 81       	ldd	r18, Y+3	; 0x03
    23c0:	3c 81       	ldd	r19, Y+4	; 0x04
    23c2:	2a 30       	cpi	r18, 0x0A	; 10
    23c4:	31 05       	cpc	r19, r1
    23c6:	b1 f1       	breq	.+108    	; 0x2434 <KEYPAD_4x4_adjustKeyNumber+0x112>
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	8b 30       	cpi	r24, 0x0B	; 11
    23ce:	91 05       	cpc	r25, r1
    23d0:	a4 f5       	brge	.+104    	; 0x243a <KEYPAD_4x4_adjustKeyNumber+0x118>
    23d2:	2d c0       	rjmp	.+90     	; 0x242e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    23d4:	2b 81       	ldd	r18, Y+3	; 0x03
    23d6:	3c 81       	ldd	r19, Y+4	; 0x04
    23d8:	2e 30       	cpi	r18, 0x0E	; 14
    23da:	31 05       	cpc	r19, r1
    23dc:	b9 f1       	breq	.+110    	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	9c 81       	ldd	r25, Y+4	; 0x04
    23e2:	8e 30       	cpi	r24, 0x0E	; 14
    23e4:	91 05       	cpc	r25, r1
    23e6:	7c f1       	brlt	.+94     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x124>
    23e8:	2b 81       	ldd	r18, Y+3	; 0x03
    23ea:	3c 81       	ldd	r19, Y+4	; 0x04
    23ec:	2f 30       	cpi	r18, 0x0F	; 15
    23ee:	31 05       	cpc	r19, r1
    23f0:	79 f1       	breq	.+94     	; 0x2450 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	9c 81       	ldd	r25, Y+4	; 0x04
    23f6:	80 31       	cpi	r24, 0x10	; 16
    23f8:	91 05       	cpc	r25, r1
    23fa:	69 f1       	breq	.+90     	; 0x2456 <KEYPAD_4x4_adjustKeyNumber+0x134>
    23fc:	2f c0       	rjmp	.+94     	; 0x245c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    23fe:	87 e0       	ldi	r24, 0x07	; 7
    2400:	89 83       	std	Y+1, r24	; 0x01
    2402:	2e c0       	rjmp	.+92     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2404:	88 e0       	ldi	r24, 0x08	; 8
    2406:	89 83       	std	Y+1, r24	; 0x01
    2408:	2b c0       	rjmp	.+86     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    240a:	89 e0       	ldi	r24, 0x09	; 9
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	28 c0       	rjmp	.+80     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2410:	85 e2       	ldi	r24, 0x25	; 37
    2412:	89 83       	std	Y+1, r24	; 0x01
    2414:	25 c0       	rjmp	.+74     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2416:	84 e0       	ldi	r24, 0x04	; 4
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	22 c0       	rjmp	.+68     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    241c:	85 e0       	ldi	r24, 0x05	; 5
    241e:	89 83       	std	Y+1, r24	; 0x01
    2420:	1f c0       	rjmp	.+62     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2422:	86 e0       	ldi	r24, 0x06	; 6
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	1c c0       	rjmp	.+56     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2428:	8a e2       	ldi	r24, 0x2A	; 42
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	19 c0       	rjmp	.+50     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	16 c0       	rjmp	.+44     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2434:	82 e0       	ldi	r24, 0x02	; 2
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	13 c0       	rjmp	.+38     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    243a:	83 e0       	ldi	r24, 0x03	; 3
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	10 c0       	rjmp	.+32     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2440:	8d e2       	ldi	r24, 0x2D	; 45
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	0d c0       	rjmp	.+26     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2446:	8d e0       	ldi	r24, 0x0D	; 13
    2448:	89 83       	std	Y+1, r24	; 0x01
    244a:	0a c0       	rjmp	.+20     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    244c:	19 82       	std	Y+1, r1	; 0x01
    244e:	08 c0       	rjmp	.+16     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2450:	8d e3       	ldi	r24, 0x3D	; 61
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	05 c0       	rjmp	.+10     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2456:	8b e2       	ldi	r24, 0x2B	; 43
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2460:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	2e 97       	sbiw	r28, 0x0e	; 14
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	de bf       	out	0x3e, r29	; 62
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	61 e0       	ldi	r22, 0x01	; 1
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	62 e0       	ldi	r22, 0x02	; 2
    2492:	41 e0       	ldi	r20, 0x01	; 1
    2494:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	a0 ea       	ldi	r26, 0xA0	; 160
    249e:	b1 e4       	ldi	r27, 0x41	; 65
    24a0:	8b 87       	std	Y+11, r24	; 0x0b
    24a2:	9c 87       	std	Y+12, r25	; 0x0c
    24a4:	ad 87       	std	Y+13, r26	; 0x0d
    24a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	4a ef       	ldi	r20, 0xFA	; 250
    24b6:	54 e4       	ldi	r21, 0x44	; 68
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	8f 83       	std	Y+7, r24	; 0x07
    24c2:	98 87       	std	Y+8, r25	; 0x08
    24c4:	a9 87       	std	Y+9, r26	; 0x09
    24c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24c8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ca:	78 85       	ldd	r23, Y+8	; 0x08
    24cc:	89 85       	ldd	r24, Y+9	; 0x09
    24ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e8       	ldi	r20, 0x80	; 128
    24d6:	5f e3       	ldi	r21, 0x3F	; 63
    24d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24dc:	88 23       	and	r24, r24
    24de:	2c f4       	brge	.+10     	; 0x24ea <LCD_init+0x7a>
		__ticks = 1;
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9e 83       	std	Y+6, r25	; 0x06
    24e6:	8d 83       	std	Y+5, r24	; 0x05
    24e8:	3f c0       	rjmp	.+126    	; 0x2568 <LCD_init+0xf8>
	else if (__tmp > 65535)
    24ea:	6f 81       	ldd	r22, Y+7	; 0x07
    24ec:	78 85       	ldd	r23, Y+8	; 0x08
    24ee:	89 85       	ldd	r24, Y+9	; 0x09
    24f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	3f ef       	ldi	r19, 0xFF	; 255
    24f6:	4f e7       	ldi	r20, 0x7F	; 127
    24f8:	57 e4       	ldi	r21, 0x47	; 71
    24fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fe:	18 16       	cp	r1, r24
    2500:	4c f5       	brge	.+82     	; 0x2554 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2502:	6b 85       	ldd	r22, Y+11	; 0x0b
    2504:	7c 85       	ldd	r23, Y+12	; 0x0c
    2506:	8d 85       	ldd	r24, Y+13	; 0x0d
    2508:	9e 85       	ldd	r25, Y+14	; 0x0e
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e2       	ldi	r20, 0x20	; 32
    2510:	51 e4       	ldi	r21, 0x41	; 65
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	bc 01       	movw	r22, r24
    251c:	cd 01       	movw	r24, r26
    251e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	0f c0       	rjmp	.+30     	; 0x254a <LCD_init+0xda>
    252c:	88 ec       	ldi	r24, 0xC8	; 200
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9c 83       	std	Y+4, r25	; 0x04
    2532:	8b 83       	std	Y+3, r24	; 0x03
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	9c 81       	ldd	r25, Y+4	; 0x04
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <LCD_init+0xc8>
    253c:	9c 83       	std	Y+4, r25	; 0x04
    253e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2540:	8d 81       	ldd	r24, Y+5	; 0x05
    2542:	9e 81       	ldd	r25, Y+6	; 0x06
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	9e 83       	std	Y+6, r25	; 0x06
    2548:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254a:	8d 81       	ldd	r24, Y+5	; 0x05
    254c:	9e 81       	ldd	r25, Y+6	; 0x06
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	69 f7       	brne	.-38     	; 0x252c <LCD_init+0xbc>
    2552:	14 c0       	rjmp	.+40     	; 0x257c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2554:	6f 81       	ldd	r22, Y+7	; 0x07
    2556:	78 85       	ldd	r23, Y+8	; 0x08
    2558:	89 85       	ldd	r24, Y+9	; 0x09
    255a:	9a 85       	ldd	r25, Y+10	; 0x0a
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	9e 83       	std	Y+6, r25	; 0x06
    2566:	8d 83       	std	Y+5, r24	; 0x05
    2568:	8d 81       	ldd	r24, Y+5	; 0x05
    256a:	9e 81       	ldd	r25, Y+6	; 0x06
    256c:	9a 83       	std	Y+2, r25	; 0x02
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	9a 81       	ldd	r25, Y+2	; 0x02
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <LCD_init+0x104>
    2578:	9a 83       	std	Y+2, r25	; 0x02
    257a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	63 e0       	ldi	r22, 0x03	; 3
    2580:	41 e0       	ldi	r20, 0x01	; 1
    2582:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	64 e0       	ldi	r22, 0x04	; 4
    258a:	41 e0       	ldi	r20, 0x01	; 1
    258c:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	65 e0       	ldi	r22, 0x05	; 5
    2594:	41 e0       	ldi	r20, 0x01	; 1
    2596:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	66 e0       	ldi	r22, 0x06	; 6
    259e:	41 e0       	ldi	r20, 0x01	; 1
    25a0:	0e 94 66 0d 	call	0x1acc	; 0x1acc <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    25a4:	83 e3       	ldi	r24, 0x33	; 51
    25a6:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    25aa:	82 e3       	ldi	r24, 0x32	; 50
    25ac:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    25b0:	88 e2       	ldi	r24, 0x28	; 40
    25b2:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    25b6:	8c e0       	ldi	r24, 0x0C	; 12
    25b8:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <LCD_sendCommand>
}
    25c2:	2e 96       	adiw	r28, 0x0e	; 14
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    25d4:	0f 93       	push	r16
    25d6:	1f 93       	push	r17
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
    25e0:	c3 56       	subi	r28, 0x63	; 99
    25e2:	d0 40       	sbci	r29, 0x00	; 0
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	fe 01       	movw	r30, r28
    25f0:	ed 59       	subi	r30, 0x9D	; 157
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	61 e0       	ldi	r22, 0x01	; 1
    25fa:	40 e0       	ldi	r20, 0x00	; 0
    25fc:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
    2600:	fe 01       	movw	r30, r28
    2602:	e1 5a       	subi	r30, 0xA1	; 161
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	a0 e8       	ldi	r26, 0x80	; 128
    260c:	bf e3       	ldi	r27, 0x3F	; 63
    260e:	80 83       	st	Z, r24
    2610:	91 83       	std	Z+1, r25	; 0x01
    2612:	a2 83       	std	Z+2, r26	; 0x02
    2614:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2616:	8e 01       	movw	r16, r28
    2618:	05 5a       	subi	r16, 0xA5	; 165
    261a:	1f 4f       	sbci	r17, 0xFF	; 255
    261c:	fe 01       	movw	r30, r28
    261e:	e1 5a       	subi	r30, 0xA1	; 161
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	4a ef       	ldi	r20, 0xFA	; 250
    2630:	54 e4       	ldi	r21, 0x44	; 68
    2632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	f8 01       	movw	r30, r16
    263c:	80 83       	st	Z, r24
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	a2 83       	std	Z+2, r26	; 0x02
    2642:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2644:	fe 01       	movw	r30, r28
    2646:	e5 5a       	subi	r30, 0xA5	; 165
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	60 81       	ld	r22, Z
    264c:	71 81       	ldd	r23, Z+1	; 0x01
    264e:	82 81       	ldd	r24, Z+2	; 0x02
    2650:	93 81       	ldd	r25, Z+3	; 0x03
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e8       	ldi	r20, 0x80	; 128
    2658:	5f e3       	ldi	r21, 0x3F	; 63
    265a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    265e:	88 23       	and	r24, r24
    2660:	44 f4       	brge	.+16     	; 0x2672 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2662:	fe 01       	movw	r30, r28
    2664:	e7 5a       	subi	r30, 0xA7	; 167
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	80 83       	st	Z, r24
    2670:	64 c0       	rjmp	.+200    	; 0x273a <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2672:	fe 01       	movw	r30, r28
    2674:	e5 5a       	subi	r30, 0xA5	; 165
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	93 81       	ldd	r25, Z+3	; 0x03
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	3f ef       	ldi	r19, 0xFF	; 255
    2684:	4f e7       	ldi	r20, 0x7F	; 127
    2686:	57 e4       	ldi	r21, 0x47	; 71
    2688:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    268c:	18 16       	cp	r1, r24
    268e:	0c f0       	brlt	.+2      	; 0x2692 <LCD_sendCommand+0xbe>
    2690:	43 c0       	rjmp	.+134    	; 0x2718 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2692:	fe 01       	movw	r30, r28
    2694:	e1 5a       	subi	r30, 0xA1	; 161
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	60 81       	ld	r22, Z
    269a:	71 81       	ldd	r23, Z+1	; 0x01
    269c:	82 81       	ldd	r24, Z+2	; 0x02
    269e:	93 81       	ldd	r25, Z+3	; 0x03
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e2       	ldi	r20, 0x20	; 32
    26a6:	51 e4       	ldi	r21, 0x41	; 65
    26a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	8e 01       	movw	r16, r28
    26b2:	07 5a       	subi	r16, 0xA7	; 167
    26b4:	1f 4f       	sbci	r17, 0xFF	; 255
    26b6:	bc 01       	movw	r22, r24
    26b8:	cd 01       	movw	r24, r26
    26ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	f8 01       	movw	r30, r16
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	80 83       	st	Z, r24
    26c8:	1f c0       	rjmp	.+62     	; 0x2708 <LCD_sendCommand+0x134>
    26ca:	fe 01       	movw	r30, r28
    26cc:	e9 5a       	subi	r30, 0xA9	; 169
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	88 ec       	ldi	r24, 0xC8	; 200
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	91 83       	std	Z+1, r25	; 0x01
    26d6:	80 83       	st	Z, r24
    26d8:	fe 01       	movw	r30, r28
    26da:	e9 5a       	subi	r30, 0xA9	; 169
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	80 81       	ld	r24, Z
    26e0:	91 81       	ldd	r25, Z+1	; 0x01
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <LCD_sendCommand+0x10e>
    26e6:	fe 01       	movw	r30, r28
    26e8:	e9 5a       	subi	r30, 0xA9	; 169
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f0:	de 01       	movw	r26, r28
    26f2:	a7 5a       	subi	r26, 0xA7	; 167
    26f4:	bf 4f       	sbci	r27, 0xFF	; 255
    26f6:	fe 01       	movw	r30, r28
    26f8:	e7 5a       	subi	r30, 0xA7	; 167
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	91 81       	ldd	r25, Z+1	; 0x01
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	11 96       	adiw	r26, 0x01	; 1
    2704:	9c 93       	st	X, r25
    2706:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2708:	fe 01       	movw	r30, r28
    270a:	e7 5a       	subi	r30, 0xA7	; 167
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	80 81       	ld	r24, Z
    2710:	91 81       	ldd	r25, Z+1	; 0x01
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	d1 f6       	brne	.-76     	; 0x26ca <LCD_sendCommand+0xf6>
    2716:	27 c0       	rjmp	.+78     	; 0x2766 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2718:	8e 01       	movw	r16, r28
    271a:	07 5a       	subi	r16, 0xA7	; 167
    271c:	1f 4f       	sbci	r17, 0xFF	; 255
    271e:	fe 01       	movw	r30, r28
    2720:	e5 5a       	subi	r30, 0xA5	; 165
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	60 81       	ld	r22, Z
    2726:	71 81       	ldd	r23, Z+1	; 0x01
    2728:	82 81       	ldd	r24, Z+2	; 0x02
    272a:	93 81       	ldd	r25, Z+3	; 0x03
    272c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	f8 01       	movw	r30, r16
    2736:	91 83       	std	Z+1, r25	; 0x01
    2738:	80 83       	st	Z, r24
    273a:	de 01       	movw	r26, r28
    273c:	ab 5a       	subi	r26, 0xAB	; 171
    273e:	bf 4f       	sbci	r27, 0xFF	; 255
    2740:	fe 01       	movw	r30, r28
    2742:	e7 5a       	subi	r30, 0xA7	; 167
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	80 81       	ld	r24, Z
    2748:	91 81       	ldd	r25, Z+1	; 0x01
    274a:	8d 93       	st	X+, r24
    274c:	9c 93       	st	X, r25
    274e:	fe 01       	movw	r30, r28
    2750:	eb 5a       	subi	r30, 0xAB	; 171
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	80 81       	ld	r24, Z
    2756:	91 81       	ldd	r25, Z+1	; 0x01
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	f1 f7       	brne	.-4      	; 0x2758 <LCD_sendCommand+0x184>
    275c:	fe 01       	movw	r30, r28
    275e:	eb 5a       	subi	r30, 0xAB	; 171
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	91 83       	std	Z+1, r25	; 0x01
    2764:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	62 e0       	ldi	r22, 0x02	; 2
    276a:	41 e0       	ldi	r20, 0x01	; 1
    276c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
    2770:	fe 01       	movw	r30, r28
    2772:	ef 5a       	subi	r30, 0xAF	; 175
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	a0 e8       	ldi	r26, 0x80	; 128
    277c:	bf e3       	ldi	r27, 0x3F	; 63
    277e:	80 83       	st	Z, r24
    2780:	91 83       	std	Z+1, r25	; 0x01
    2782:	a2 83       	std	Z+2, r26	; 0x02
    2784:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2786:	8e 01       	movw	r16, r28
    2788:	03 5b       	subi	r16, 0xB3	; 179
    278a:	1f 4f       	sbci	r17, 0xFF	; 255
    278c:	fe 01       	movw	r30, r28
    278e:	ef 5a       	subi	r30, 0xAF	; 175
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	4a ef       	ldi	r20, 0xFA	; 250
    27a0:	54 e4       	ldi	r21, 0x44	; 68
    27a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	f8 01       	movw	r30, r16
    27ac:	80 83       	st	Z, r24
    27ae:	91 83       	std	Z+1, r25	; 0x01
    27b0:	a2 83       	std	Z+2, r26	; 0x02
    27b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27b4:	fe 01       	movw	r30, r28
    27b6:	e3 5b       	subi	r30, 0xB3	; 179
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	60 81       	ld	r22, Z
    27bc:	71 81       	ldd	r23, Z+1	; 0x01
    27be:	82 81       	ldd	r24, Z+2	; 0x02
    27c0:	93 81       	ldd	r25, Z+3	; 0x03
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e8       	ldi	r20, 0x80	; 128
    27c8:	5f e3       	ldi	r21, 0x3F	; 63
    27ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ce:	88 23       	and	r24, r24
    27d0:	44 f4       	brge	.+16     	; 0x27e2 <LCD_sendCommand+0x20e>
		__ticks = 1;
    27d2:	fe 01       	movw	r30, r28
    27d4:	e5 5b       	subi	r30, 0xB5	; 181
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	91 83       	std	Z+1, r25	; 0x01
    27de:	80 83       	st	Z, r24
    27e0:	64 c0       	rjmp	.+200    	; 0x28aa <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    27e2:	fe 01       	movw	r30, r28
    27e4:	e3 5b       	subi	r30, 0xB3	; 179
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	60 81       	ld	r22, Z
    27ea:	71 81       	ldd	r23, Z+1	; 0x01
    27ec:	82 81       	ldd	r24, Z+2	; 0x02
    27ee:	93 81       	ldd	r25, Z+3	; 0x03
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	3f ef       	ldi	r19, 0xFF	; 255
    27f4:	4f e7       	ldi	r20, 0x7F	; 127
    27f6:	57 e4       	ldi	r21, 0x47	; 71
    27f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27fc:	18 16       	cp	r1, r24
    27fe:	0c f0       	brlt	.+2      	; 0x2802 <LCD_sendCommand+0x22e>
    2800:	43 c0       	rjmp	.+134    	; 0x2888 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2802:	fe 01       	movw	r30, r28
    2804:	ef 5a       	subi	r30, 0xAF	; 175
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	60 81       	ld	r22, Z
    280a:	71 81       	ldd	r23, Z+1	; 0x01
    280c:	82 81       	ldd	r24, Z+2	; 0x02
    280e:	93 81       	ldd	r25, Z+3	; 0x03
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e2       	ldi	r20, 0x20	; 32
    2816:	51 e4       	ldi	r21, 0x41	; 65
    2818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	8e 01       	movw	r16, r28
    2822:	05 5b       	subi	r16, 0xB5	; 181
    2824:	1f 4f       	sbci	r17, 0xFF	; 255
    2826:	bc 01       	movw	r22, r24
    2828:	cd 01       	movw	r24, r26
    282a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	f8 01       	movw	r30, r16
    2834:	91 83       	std	Z+1, r25	; 0x01
    2836:	80 83       	st	Z, r24
    2838:	1f c0       	rjmp	.+62     	; 0x2878 <LCD_sendCommand+0x2a4>
    283a:	fe 01       	movw	r30, r28
    283c:	e7 5b       	subi	r30, 0xB7	; 183
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	88 ec       	ldi	r24, 0xC8	; 200
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	80 83       	st	Z, r24
    2848:	fe 01       	movw	r30, r28
    284a:	e7 5b       	subi	r30, 0xB7	; 183
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 81       	ld	r24, Z
    2850:	91 81       	ldd	r25, Z+1	; 0x01
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	f1 f7       	brne	.-4      	; 0x2852 <LCD_sendCommand+0x27e>
    2856:	fe 01       	movw	r30, r28
    2858:	e7 5b       	subi	r30, 0xB7	; 183
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	91 83       	std	Z+1, r25	; 0x01
    285e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2860:	de 01       	movw	r26, r28
    2862:	a5 5b       	subi	r26, 0xB5	; 181
    2864:	bf 4f       	sbci	r27, 0xFF	; 255
    2866:	fe 01       	movw	r30, r28
    2868:	e5 5b       	subi	r30, 0xB5	; 181
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	80 81       	ld	r24, Z
    286e:	91 81       	ldd	r25, Z+1	; 0x01
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	11 96       	adiw	r26, 0x01	; 1
    2874:	9c 93       	st	X, r25
    2876:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2878:	fe 01       	movw	r30, r28
    287a:	e5 5b       	subi	r30, 0xB5	; 181
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	80 81       	ld	r24, Z
    2880:	91 81       	ldd	r25, Z+1	; 0x01
    2882:	00 97       	sbiw	r24, 0x00	; 0
    2884:	d1 f6       	brne	.-76     	; 0x283a <LCD_sendCommand+0x266>
    2886:	27 c0       	rjmp	.+78     	; 0x28d6 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2888:	8e 01       	movw	r16, r28
    288a:	05 5b       	subi	r16, 0xB5	; 181
    288c:	1f 4f       	sbci	r17, 0xFF	; 255
    288e:	fe 01       	movw	r30, r28
    2890:	e3 5b       	subi	r30, 0xB3	; 179
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	60 81       	ld	r22, Z
    2896:	71 81       	ldd	r23, Z+1	; 0x01
    2898:	82 81       	ldd	r24, Z+2	; 0x02
    289a:	93 81       	ldd	r25, Z+3	; 0x03
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	f8 01       	movw	r30, r16
    28a6:	91 83       	std	Z+1, r25	; 0x01
    28a8:	80 83       	st	Z, r24
    28aa:	de 01       	movw	r26, r28
    28ac:	a9 5b       	subi	r26, 0xB9	; 185
    28ae:	bf 4f       	sbci	r27, 0xFF	; 255
    28b0:	fe 01       	movw	r30, r28
    28b2:	e5 5b       	subi	r30, 0xB5	; 181
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	8d 93       	st	X+, r24
    28bc:	9c 93       	st	X, r25
    28be:	fe 01       	movw	r30, r28
    28c0:	e9 5b       	subi	r30, 0xB9	; 185
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	80 81       	ld	r24, Z
    28c6:	91 81       	ldd	r25, Z+1	; 0x01
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <LCD_sendCommand+0x2f4>
    28cc:	fe 01       	movw	r30, r28
    28ce:	e9 5b       	subi	r30, 0xB9	; 185
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	91 83       	std	Z+1, r25	; 0x01
    28d4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    28d6:	fe 01       	movw	r30, r28
    28d8:	ed 59       	subi	r30, 0x9D	; 157
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	80 81       	ld	r24, Z
    28de:	88 2f       	mov	r24, r24
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	80 71       	andi	r24, 0x10	; 16
    28e4:	90 70       	andi	r25, 0x00	; 0
    28e6:	95 95       	asr	r25
    28e8:	87 95       	ror	r24
    28ea:	95 95       	asr	r25
    28ec:	87 95       	ror	r24
    28ee:	95 95       	asr	r25
    28f0:	87 95       	ror	r24
    28f2:	95 95       	asr	r25
    28f4:	87 95       	ror	r24
    28f6:	98 2f       	mov	r25, r24
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	63 e0       	ldi	r22, 0x03	; 3
    28fc:	49 2f       	mov	r20, r25
    28fe:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2902:	fe 01       	movw	r30, r28
    2904:	ed 59       	subi	r30, 0x9D	; 157
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	80 81       	ld	r24, Z
    290a:	88 2f       	mov	r24, r24
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	80 72       	andi	r24, 0x20	; 32
    2910:	90 70       	andi	r25, 0x00	; 0
    2912:	95 95       	asr	r25
    2914:	87 95       	ror	r24
    2916:	95 95       	asr	r25
    2918:	87 95       	ror	r24
    291a:	95 95       	asr	r25
    291c:	87 95       	ror	r24
    291e:	95 95       	asr	r25
    2920:	87 95       	ror	r24
    2922:	95 95       	asr	r25
    2924:	87 95       	ror	r24
    2926:	98 2f       	mov	r25, r24
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	64 e0       	ldi	r22, 0x04	; 4
    292c:	49 2f       	mov	r20, r25
    292e:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2932:	fe 01       	movw	r30, r28
    2934:	ed 59       	subi	r30, 0x9D	; 157
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	80 81       	ld	r24, Z
    293a:	88 2f       	mov	r24, r24
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	80 74       	andi	r24, 0x40	; 64
    2940:	90 70       	andi	r25, 0x00	; 0
    2942:	08 2e       	mov	r0, r24
    2944:	89 2f       	mov	r24, r25
    2946:	00 0c       	add	r0, r0
    2948:	88 1f       	adc	r24, r24
    294a:	99 0b       	sbc	r25, r25
    294c:	00 0c       	add	r0, r0
    294e:	88 1f       	adc	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	98 2f       	mov	r25, r24
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	65 e0       	ldi	r22, 0x05	; 5
    2958:	49 2f       	mov	r20, r25
    295a:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    295e:	fe 01       	movw	r30, r28
    2960:	ed 59       	subi	r30, 0x9D	; 157
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	80 81       	ld	r24, Z
    2966:	98 2f       	mov	r25, r24
    2968:	99 1f       	adc	r25, r25
    296a:	99 27       	eor	r25, r25
    296c:	99 1f       	adc	r25, r25
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	66 e0       	ldi	r22, 0x06	; 6
    2972:	49 2f       	mov	r20, r25
    2974:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
    2978:	fe 01       	movw	r30, r28
    297a:	ed 5b       	subi	r30, 0xBD	; 189
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	a0 e8       	ldi	r26, 0x80	; 128
    2984:	bf e3       	ldi	r27, 0x3F	; 63
    2986:	80 83       	st	Z, r24
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	a2 83       	std	Z+2, r26	; 0x02
    298c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298e:	8e 01       	movw	r16, r28
    2990:	01 5c       	subi	r16, 0xC1	; 193
    2992:	1f 4f       	sbci	r17, 0xFF	; 255
    2994:	fe 01       	movw	r30, r28
    2996:	ed 5b       	subi	r30, 0xBD	; 189
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	60 81       	ld	r22, Z
    299c:	71 81       	ldd	r23, Z+1	; 0x01
    299e:	82 81       	ldd	r24, Z+2	; 0x02
    29a0:	93 81       	ldd	r25, Z+3	; 0x03
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	4a ef       	ldi	r20, 0xFA	; 250
    29a8:	54 e4       	ldi	r21, 0x44	; 68
    29aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	f8 01       	movw	r30, r16
    29b4:	80 83       	st	Z, r24
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	a2 83       	std	Z+2, r26	; 0x02
    29ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29bc:	fe 01       	movw	r30, r28
    29be:	ff 96       	adiw	r30, 0x3f	; 63
    29c0:	60 81       	ld	r22, Z
    29c2:	71 81       	ldd	r23, Z+1	; 0x01
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	93 81       	ldd	r25, Z+3	; 0x03
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e8       	ldi	r20, 0x80	; 128
    29ce:	5f e3       	ldi	r21, 0x3F	; 63
    29d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d4:	88 23       	and	r24, r24
    29d6:	2c f4       	brge	.+10     	; 0x29e2 <LCD_sendCommand+0x40e>
		__ticks = 1;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9e af       	std	Y+62, r25	; 0x3e
    29de:	8d af       	std	Y+61, r24	; 0x3d
    29e0:	46 c0       	rjmp	.+140    	; 0x2a6e <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    29e2:	fe 01       	movw	r30, r28
    29e4:	ff 96       	adiw	r30, 0x3f	; 63
    29e6:	60 81       	ld	r22, Z
    29e8:	71 81       	ldd	r23, Z+1	; 0x01
    29ea:	82 81       	ldd	r24, Z+2	; 0x02
    29ec:	93 81       	ldd	r25, Z+3	; 0x03
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	3f ef       	ldi	r19, 0xFF	; 255
    29f2:	4f e7       	ldi	r20, 0x7F	; 127
    29f4:	57 e4       	ldi	r21, 0x47	; 71
    29f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29fa:	18 16       	cp	r1, r24
    29fc:	64 f5       	brge	.+88     	; 0x2a56 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fe:	fe 01       	movw	r30, r28
    2a00:	ed 5b       	subi	r30, 0xBD	; 189
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	60 81       	ld	r22, Z
    2a06:	71 81       	ldd	r23, Z+1	; 0x01
    2a08:	82 81       	ldd	r24, Z+2	; 0x02
    2a0a:	93 81       	ldd	r25, Z+3	; 0x03
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e2       	ldi	r20, 0x20	; 32
    2a12:	51 e4       	ldi	r21, 0x41	; 65
    2a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9e af       	std	Y+62, r25	; 0x3e
    2a2a:	8d af       	std	Y+61, r24	; 0x3d
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <LCD_sendCommand+0x478>
    2a2e:	88 ec       	ldi	r24, 0xC8	; 200
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9c af       	std	Y+60, r25	; 0x3c
    2a34:	8b af       	std	Y+59, r24	; 0x3b
    2a36:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a38:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <LCD_sendCommand+0x466>
    2a3e:	9c af       	std	Y+60, r25	; 0x3c
    2a40:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a42:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a44:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	9e af       	std	Y+62, r25	; 0x3e
    2a4a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	69 f7       	brne	.-38     	; 0x2a2e <LCD_sendCommand+0x45a>
    2a54:	16 c0       	rjmp	.+44     	; 0x2a82 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a56:	fe 01       	movw	r30, r28
    2a58:	ff 96       	adiw	r30, 0x3f	; 63
    2a5a:	60 81       	ld	r22, Z
    2a5c:	71 81       	ldd	r23, Z+1	; 0x01
    2a5e:	82 81       	ldd	r24, Z+2	; 0x02
    2a60:	93 81       	ldd	r25, Z+3	; 0x03
    2a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	9e af       	std	Y+62, r25	; 0x3e
    2a6c:	8d af       	std	Y+61, r24	; 0x3d
    2a6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a70:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a72:	9a af       	std	Y+58, r25	; 0x3a
    2a74:	89 af       	std	Y+57, r24	; 0x39
    2a76:	89 ad       	ldd	r24, Y+57	; 0x39
    2a78:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <LCD_sendCommand+0x4a6>
    2a7e:	9a af       	std	Y+58, r25	; 0x3a
    2a80:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	62 e0       	ldi	r22, 0x02	; 2
    2a86:	40 e0       	ldi	r20, 0x00	; 0
    2a88:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a0 e8       	ldi	r26, 0x80	; 128
    2a92:	bf e3       	ldi	r27, 0x3F	; 63
    2a94:	8d ab       	std	Y+53, r24	; 0x35
    2a96:	9e ab       	std	Y+54, r25	; 0x36
    2a98:	af ab       	std	Y+55, r26	; 0x37
    2a9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a9e:	7e a9       	ldd	r23, Y+54	; 0x36
    2aa0:	8f a9       	ldd	r24, Y+55	; 0x37
    2aa2:	98 ad       	ldd	r25, Y+56	; 0x38
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a ef       	ldi	r20, 0xFA	; 250
    2aaa:	54 e4       	ldi	r21, 0x44	; 68
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	89 ab       	std	Y+49, r24	; 0x31
    2ab6:	9a ab       	std	Y+50, r25	; 0x32
    2ab8:	ab ab       	std	Y+51, r26	; 0x33
    2aba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2abc:	69 a9       	ldd	r22, Y+49	; 0x31
    2abe:	7a a9       	ldd	r23, Y+50	; 0x32
    2ac0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ac2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <LCD_sendCommand+0x50a>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	98 ab       	std	Y+48, r25	; 0x30
    2ada:	8f a7       	std	Y+47, r24	; 0x2f
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2ade:	69 a9       	ldd	r22, Y+49	; 0x31
    2ae0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ae2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ae4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	6d a9       	ldd	r22, Y+53	; 0x35
    2af8:	7e a9       	ldd	r23, Y+54	; 0x36
    2afa:	8f a9       	ldd	r24, Y+55	; 0x37
    2afc:	98 ad       	ldd	r25, Y+56	; 0x38
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	98 ab       	std	Y+48, r25	; 0x30
    2b1c:	8f a7       	std	Y+47, r24	; 0x2f
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <LCD_sendCommand+0x56a>
    2b20:	88 ec       	ldi	r24, 0xC8	; 200
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	9e a7       	std	Y+46, r25	; 0x2e
    2b26:	8d a7       	std	Y+45, r24	; 0x2d
    2b28:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b2a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <LCD_sendCommand+0x558>
    2b30:	9e a7       	std	Y+46, r25	; 0x2e
    2b32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b36:	98 a9       	ldd	r25, Y+48	; 0x30
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	98 ab       	std	Y+48, r25	; 0x30
    2b3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b40:	98 a9       	ldd	r25, Y+48	; 0x30
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <LCD_sendCommand+0x54c>
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	69 a9       	ldd	r22, Y+49	; 0x31
    2b4a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b4c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b4e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	98 ab       	std	Y+48, r25	; 0x30
    2b5a:	8f a7       	std	Y+47, r24	; 0x2f
    2b5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b5e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b60:	9c a7       	std	Y+44, r25	; 0x2c
    2b62:	8b a7       	std	Y+43, r24	; 0x2b
    2b64:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b66:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <LCD_sendCommand+0x594>
    2b6c:	9c a7       	std	Y+44, r25	; 0x2c
    2b6e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	62 e0       	ldi	r22, 0x02	; 2
    2b74:	41 e0       	ldi	r20, 0x01	; 1
    2b76:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a0 e8       	ldi	r26, 0x80	; 128
    2b80:	bf e3       	ldi	r27, 0x3F	; 63
    2b82:	8f a3       	std	Y+39, r24	; 0x27
    2b84:	98 a7       	std	Y+40, r25	; 0x28
    2b86:	a9 a7       	std	Y+41, r26	; 0x29
    2b88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b8c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b8e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b90:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	4a ef       	ldi	r20, 0xFA	; 250
    2b98:	54 e4       	ldi	r21, 0x44	; 68
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8b a3       	std	Y+35, r24	; 0x23
    2ba4:	9c a3       	std	Y+36, r25	; 0x24
    2ba6:	ad a3       	std	Y+37, r26	; 0x25
    2ba8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2baa:	6b a1       	ldd	r22, Y+35	; 0x23
    2bac:	7c a1       	ldd	r23, Y+36	; 0x24
    2bae:	8d a1       	ldd	r24, Y+37	; 0x25
    2bb0:	9e a1       	ldd	r25, Y+38	; 0x26
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e8       	ldi	r20, 0x80	; 128
    2bb8:	5f e3       	ldi	r21, 0x3F	; 63
    2bba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bbe:	88 23       	and	r24, r24
    2bc0:	2c f4       	brge	.+10     	; 0x2bcc <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	9a a3       	std	Y+34, r25	; 0x22
    2bc8:	89 a3       	std	Y+33, r24	; 0x21
    2bca:	3f c0       	rjmp	.+126    	; 0x2c4a <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2bcc:	6b a1       	ldd	r22, Y+35	; 0x23
    2bce:	7c a1       	ldd	r23, Y+36	; 0x24
    2bd0:	8d a1       	ldd	r24, Y+37	; 0x25
    2bd2:	9e a1       	ldd	r25, Y+38	; 0x26
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	3f ef       	ldi	r19, 0xFF	; 255
    2bd8:	4f e7       	ldi	r20, 0x7F	; 127
    2bda:	57 e4       	ldi	r21, 0x47	; 71
    2bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be0:	18 16       	cp	r1, r24
    2be2:	4c f5       	brge	.+82     	; 0x2c36 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be4:	6f a1       	ldd	r22, Y+39	; 0x27
    2be6:	78 a5       	ldd	r23, Y+40	; 0x28
    2be8:	89 a5       	ldd	r24, Y+41	; 0x29
    2bea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e2       	ldi	r20, 0x20	; 32
    2bf2:	51 e4       	ldi	r21, 0x41	; 65
    2bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	9a a3       	std	Y+34, r25	; 0x22
    2c0a:	89 a3       	std	Y+33, r24	; 0x21
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <LCD_sendCommand+0x658>
    2c0e:	88 ec       	ldi	r24, 0xC8	; 200
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	98 a3       	std	Y+32, r25	; 0x20
    2c14:	8f 8f       	std	Y+31, r24	; 0x1f
    2c16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c18:	98 a1       	ldd	r25, Y+32	; 0x20
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <LCD_sendCommand+0x646>
    2c1e:	98 a3       	std	Y+32, r25	; 0x20
    2c20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c22:	89 a1       	ldd	r24, Y+33	; 0x21
    2c24:	9a a1       	ldd	r25, Y+34	; 0x22
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	9a a3       	std	Y+34, r25	; 0x22
    2c2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	69 f7       	brne	.-38     	; 0x2c0e <LCD_sendCommand+0x63a>
    2c34:	14 c0       	rjmp	.+40     	; 0x2c5e <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c36:	6b a1       	ldd	r22, Y+35	; 0x23
    2c38:	7c a1       	ldd	r23, Y+36	; 0x24
    2c3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9a a3       	std	Y+34, r25	; 0x22
    2c48:	89 a3       	std	Y+33, r24	; 0x21
    2c4a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c4c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c4e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c50:	8d 8f       	std	Y+29, r24	; 0x1d
    2c52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <LCD_sendCommand+0x682>
    2c5a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c5c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2c5e:	fe 01       	movw	r30, r28
    2c60:	ed 59       	subi	r30, 0x9D	; 157
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	80 81       	ld	r24, Z
    2c66:	98 2f       	mov	r25, r24
    2c68:	91 70       	andi	r25, 0x01	; 1
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	63 e0       	ldi	r22, 0x03	; 3
    2c6e:	49 2f       	mov	r20, r25
    2c70:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2c74:	fe 01       	movw	r30, r28
    2c76:	ed 59       	subi	r30, 0x9D	; 157
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	80 81       	ld	r24, Z
    2c7c:	88 2f       	mov	r24, r24
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	82 70       	andi	r24, 0x02	; 2
    2c82:	90 70       	andi	r25, 0x00	; 0
    2c84:	95 95       	asr	r25
    2c86:	87 95       	ror	r24
    2c88:	98 2f       	mov	r25, r24
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	64 e0       	ldi	r22, 0x04	; 4
    2c8e:	49 2f       	mov	r20, r25
    2c90:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2c94:	fe 01       	movw	r30, r28
    2c96:	ed 59       	subi	r30, 0x9D	; 157
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 81       	ld	r24, Z
    2c9c:	88 2f       	mov	r24, r24
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	84 70       	andi	r24, 0x04	; 4
    2ca2:	90 70       	andi	r25, 0x00	; 0
    2ca4:	95 95       	asr	r25
    2ca6:	87 95       	ror	r24
    2ca8:	95 95       	asr	r25
    2caa:	87 95       	ror	r24
    2cac:	98 2f       	mov	r25, r24
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	65 e0       	ldi	r22, 0x05	; 5
    2cb2:	49 2f       	mov	r20, r25
    2cb4:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2cb8:	fe 01       	movw	r30, r28
    2cba:	ed 59       	subi	r30, 0x9D	; 157
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	80 81       	ld	r24, Z
    2cc0:	88 2f       	mov	r24, r24
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	88 70       	andi	r24, 0x08	; 8
    2cc6:	90 70       	andi	r25, 0x00	; 0
    2cc8:	95 95       	asr	r25
    2cca:	87 95       	ror	r24
    2ccc:	95 95       	asr	r25
    2cce:	87 95       	ror	r24
    2cd0:	95 95       	asr	r25
    2cd2:	87 95       	ror	r24
    2cd4:	98 2f       	mov	r25, r24
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	66 e0       	ldi	r22, 0x06	; 6
    2cda:	49 2f       	mov	r20, r25
    2cdc:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	a0 e8       	ldi	r26, 0x80	; 128
    2ce6:	bf e3       	ldi	r27, 0x3F	; 63
    2ce8:	89 8f       	std	Y+25, r24	; 0x19
    2cea:	9a 8f       	std	Y+26, r25	; 0x1a
    2cec:	ab 8f       	std	Y+27, r26	; 0x1b
    2cee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf0:	69 8d       	ldd	r22, Y+25	; 0x19
    2cf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	4a ef       	ldi	r20, 0xFA	; 250
    2cfe:	54 e4       	ldi	r21, 0x44	; 68
    2d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	8d 8b       	std	Y+21, r24	; 0x15
    2d0a:	9e 8b       	std	Y+22, r25	; 0x16
    2d0c:	af 8b       	std	Y+23, r26	; 0x17
    2d0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d10:	6d 89       	ldd	r22, Y+21	; 0x15
    2d12:	7e 89       	ldd	r23, Y+22	; 0x16
    2d14:	8f 89       	ldd	r24, Y+23	; 0x17
    2d16:	98 8d       	ldd	r25, Y+24	; 0x18
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	40 e8       	ldi	r20, 0x80	; 128
    2d1e:	5f e3       	ldi	r21, 0x3F	; 63
    2d20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d24:	88 23       	and	r24, r24
    2d26:	2c f4       	brge	.+10     	; 0x2d32 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	9c 8b       	std	Y+20, r25	; 0x14
    2d2e:	8b 8b       	std	Y+19, r24	; 0x13
    2d30:	3f c0       	rjmp	.+126    	; 0x2db0 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2d32:	6d 89       	ldd	r22, Y+21	; 0x15
    2d34:	7e 89       	ldd	r23, Y+22	; 0x16
    2d36:	8f 89       	ldd	r24, Y+23	; 0x17
    2d38:	98 8d       	ldd	r25, Y+24	; 0x18
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	3f ef       	ldi	r19, 0xFF	; 255
    2d3e:	4f e7       	ldi	r20, 0x7F	; 127
    2d40:	57 e4       	ldi	r21, 0x47	; 71
    2d42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d46:	18 16       	cp	r1, r24
    2d48:	4c f5       	brge	.+82     	; 0x2d9c <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e2       	ldi	r20, 0x20	; 32
    2d58:	51 e4       	ldi	r21, 0x41	; 65
    2d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	bc 01       	movw	r22, r24
    2d64:	cd 01       	movw	r24, r26
    2d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	9c 8b       	std	Y+20, r25	; 0x14
    2d70:	8b 8b       	std	Y+19, r24	; 0x13
    2d72:	0f c0       	rjmp	.+30     	; 0x2d92 <LCD_sendCommand+0x7be>
    2d74:	88 ec       	ldi	r24, 0xC8	; 200
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	9a 8b       	std	Y+18, r25	; 0x12
    2d7a:	89 8b       	std	Y+17, r24	; 0x11
    2d7c:	89 89       	ldd	r24, Y+17	; 0x11
    2d7e:	9a 89       	ldd	r25, Y+18	; 0x12
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	f1 f7       	brne	.-4      	; 0x2d80 <LCD_sendCommand+0x7ac>
    2d84:	9a 8b       	std	Y+18, r25	; 0x12
    2d86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d88:	8b 89       	ldd	r24, Y+19	; 0x13
    2d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	9c 8b       	std	Y+20, r25	; 0x14
    2d90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d92:	8b 89       	ldd	r24, Y+19	; 0x13
    2d94:	9c 89       	ldd	r25, Y+20	; 0x14
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	69 f7       	brne	.-38     	; 0x2d74 <LCD_sendCommand+0x7a0>
    2d9a:	14 c0       	rjmp	.+40     	; 0x2dc4 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2da0:	8f 89       	ldd	r24, Y+23	; 0x17
    2da2:	98 8d       	ldd	r25, Y+24	; 0x18
    2da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	9c 8b       	std	Y+20, r25	; 0x14
    2dae:	8b 8b       	std	Y+19, r24	; 0x13
    2db0:	8b 89       	ldd	r24, Y+19	; 0x13
    2db2:	9c 89       	ldd	r25, Y+20	; 0x14
    2db4:	98 8b       	std	Y+16, r25	; 0x10
    2db6:	8f 87       	std	Y+15, r24	; 0x0f
    2db8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dba:	98 89       	ldd	r25, Y+16	; 0x10
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <LCD_sendCommand+0x7e8>
    2dc0:	98 8b       	std	Y+16, r25	; 0x10
    2dc2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	62 e0       	ldi	r22, 0x02	; 2
    2dc8:	40 e0       	ldi	r20, 0x00	; 0
    2dca:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	a0 e8       	ldi	r26, 0x80	; 128
    2dd4:	bf e3       	ldi	r27, 0x3F	; 63
    2dd6:	8b 87       	std	Y+11, r24	; 0x0b
    2dd8:	9c 87       	std	Y+12, r25	; 0x0c
    2dda:	ad 87       	std	Y+13, r26	; 0x0d
    2ddc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2de2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2de4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	4a ef       	ldi	r20, 0xFA	; 250
    2dec:	54 e4       	ldi	r21, 0x44	; 68
    2dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	8f 83       	std	Y+7, r24	; 0x07
    2df8:	98 87       	std	Y+8, r25	; 0x08
    2dfa:	a9 87       	std	Y+9, r26	; 0x09
    2dfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2e00:	78 85       	ldd	r23, Y+8	; 0x08
    2e02:	89 85       	ldd	r24, Y+9	; 0x09
    2e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e8       	ldi	r20, 0x80	; 128
    2e0c:	5f e3       	ldi	r21, 0x3F	; 63
    2e0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e12:	88 23       	and	r24, r24
    2e14:	2c f4       	brge	.+10     	; 0x2e20 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	9e 83       	std	Y+6, r25	; 0x06
    2e1c:	8d 83       	std	Y+5, r24	; 0x05
    2e1e:	3f c0       	rjmp	.+126    	; 0x2e9e <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2e20:	6f 81       	ldd	r22, Y+7	; 0x07
    2e22:	78 85       	ldd	r23, Y+8	; 0x08
    2e24:	89 85       	ldd	r24, Y+9	; 0x09
    2e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	3f ef       	ldi	r19, 0xFF	; 255
    2e2c:	4f e7       	ldi	r20, 0x7F	; 127
    2e2e:	57 e4       	ldi	r21, 0x47	; 71
    2e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e34:	18 16       	cp	r1, r24
    2e36:	4c f5       	brge	.+82     	; 0x2e8a <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e2       	ldi	r20, 0x20	; 32
    2e46:	51 e4       	ldi	r21, 0x41	; 65
    2e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	bc 01       	movw	r22, r24
    2e52:	cd 01       	movw	r24, r26
    2e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	9e 83       	std	Y+6, r25	; 0x06
    2e5e:	8d 83       	std	Y+5, r24	; 0x05
    2e60:	0f c0       	rjmp	.+30     	; 0x2e80 <LCD_sendCommand+0x8ac>
    2e62:	88 ec       	ldi	r24, 0xC8	; 200
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	9c 83       	std	Y+4, r25	; 0x04
    2e68:	8b 83       	std	Y+3, r24	; 0x03
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <LCD_sendCommand+0x89a>
    2e72:	9c 83       	std	Y+4, r25	; 0x04
    2e74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e76:	8d 81       	ldd	r24, Y+5	; 0x05
    2e78:	9e 81       	ldd	r25, Y+6	; 0x06
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	9e 83       	std	Y+6, r25	; 0x06
    2e7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e80:	8d 81       	ldd	r24, Y+5	; 0x05
    2e82:	9e 81       	ldd	r25, Y+6	; 0x06
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	69 f7       	brne	.-38     	; 0x2e62 <LCD_sendCommand+0x88e>
    2e88:	14 c0       	rjmp	.+40     	; 0x2eb2 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8c:	78 85       	ldd	r23, Y+8	; 0x08
    2e8e:	89 85       	ldd	r24, Y+9	; 0x09
    2e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	9e 83       	std	Y+6, r25	; 0x06
    2e9c:	8d 83       	std	Y+5, r24	; 0x05
    2e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea2:	9a 83       	std	Y+2, r25	; 0x02
    2ea4:	89 83       	std	Y+1, r24	; 0x01
    2ea6:	89 81       	ldd	r24, Y+1	; 0x01
    2ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	f1 f7       	brne	.-4      	; 0x2eaa <LCD_sendCommand+0x8d6>
    2eae:	9a 83       	std	Y+2, r25	; 0x02
    2eb0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2eb2:	cd 59       	subi	r28, 0x9D	; 157
    2eb4:	df 4f       	sbci	r29, 0xFF	; 255
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	1f 91       	pop	r17
    2ec6:	0f 91       	pop	r16
    2ec8:	08 95       	ret

00002eca <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2eca:	0f 93       	push	r16
    2ecc:	1f 93       	push	r17
    2ece:	df 93       	push	r29
    2ed0:	cf 93       	push	r28
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
    2ed6:	c3 56       	subi	r28, 0x63	; 99
    2ed8:	d0 40       	sbci	r29, 0x00	; 0
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	cd bf       	out	0x3d, r28	; 61
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	ed 59       	subi	r30, 0x9D	; 157
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	61 e0       	ldi	r22, 0x01	; 1
    2ef0:	41 e0       	ldi	r20, 0x01	; 1
    2ef2:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	e1 5a       	subi	r30, 0xA1	; 161
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	a0 e8       	ldi	r26, 0x80	; 128
    2f02:	bf e3       	ldi	r27, 0x3F	; 63
    2f04:	80 83       	st	Z, r24
    2f06:	91 83       	std	Z+1, r25	; 0x01
    2f08:	a2 83       	std	Z+2, r26	; 0x02
    2f0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0c:	8e 01       	movw	r16, r28
    2f0e:	05 5a       	subi	r16, 0xA5	; 165
    2f10:	1f 4f       	sbci	r17, 0xFF	; 255
    2f12:	fe 01       	movw	r30, r28
    2f14:	e1 5a       	subi	r30, 0xA1	; 161
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	60 81       	ld	r22, Z
    2f1a:	71 81       	ldd	r23, Z+1	; 0x01
    2f1c:	82 81       	ldd	r24, Z+2	; 0x02
    2f1e:	93 81       	ldd	r25, Z+3	; 0x03
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	4a ef       	ldi	r20, 0xFA	; 250
    2f26:	54 e4       	ldi	r21, 0x44	; 68
    2f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	f8 01       	movw	r30, r16
    2f32:	80 83       	st	Z, r24
    2f34:	91 83       	std	Z+1, r25	; 0x01
    2f36:	a2 83       	std	Z+2, r26	; 0x02
    2f38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	e5 5a       	subi	r30, 0xA5	; 165
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	60 81       	ld	r22, Z
    2f42:	71 81       	ldd	r23, Z+1	; 0x01
    2f44:	82 81       	ldd	r24, Z+2	; 0x02
    2f46:	93 81       	ldd	r25, Z+3	; 0x03
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e8       	ldi	r20, 0x80	; 128
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f54:	88 23       	and	r24, r24
    2f56:	44 f4       	brge	.+16     	; 0x2f68 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e7 5a       	subi	r30, 0xA7	; 167
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	91 83       	std	Z+1, r25	; 0x01
    2f64:	80 83       	st	Z, r24
    2f66:	64 c0       	rjmp	.+200    	; 0x3030 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2f68:	fe 01       	movw	r30, r28
    2f6a:	e5 5a       	subi	r30, 0xA5	; 165
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	60 81       	ld	r22, Z
    2f70:	71 81       	ldd	r23, Z+1	; 0x01
    2f72:	82 81       	ldd	r24, Z+2	; 0x02
    2f74:	93 81       	ldd	r25, Z+3	; 0x03
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	3f ef       	ldi	r19, 0xFF	; 255
    2f7a:	4f e7       	ldi	r20, 0x7F	; 127
    2f7c:	57 e4       	ldi	r21, 0x47	; 71
    2f7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f82:	18 16       	cp	r1, r24
    2f84:	0c f0       	brlt	.+2      	; 0x2f88 <LCD_displayCharacter+0xbe>
    2f86:	43 c0       	rjmp	.+134    	; 0x300e <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f88:	fe 01       	movw	r30, r28
    2f8a:	e1 5a       	subi	r30, 0xA1	; 161
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	60 81       	ld	r22, Z
    2f90:	71 81       	ldd	r23, Z+1	; 0x01
    2f92:	82 81       	ldd	r24, Z+2	; 0x02
    2f94:	93 81       	ldd	r25, Z+3	; 0x03
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e2       	ldi	r20, 0x20	; 32
    2f9c:	51 e4       	ldi	r21, 0x41	; 65
    2f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	8e 01       	movw	r16, r28
    2fa8:	07 5a       	subi	r16, 0xA7	; 167
    2faa:	1f 4f       	sbci	r17, 0xFF	; 255
    2fac:	bc 01       	movw	r22, r24
    2fae:	cd 01       	movw	r24, r26
    2fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	f8 01       	movw	r30, r16
    2fba:	91 83       	std	Z+1, r25	; 0x01
    2fbc:	80 83       	st	Z, r24
    2fbe:	1f c0       	rjmp	.+62     	; 0x2ffe <LCD_displayCharacter+0x134>
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	e9 5a       	subi	r30, 0xA9	; 169
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	88 ec       	ldi	r24, 0xC8	; 200
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	91 83       	std	Z+1, r25	; 0x01
    2fcc:	80 83       	st	Z, r24
    2fce:	fe 01       	movw	r30, r28
    2fd0:	e9 5a       	subi	r30, 0xA9	; 169
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	80 81       	ld	r24, Z
    2fd6:	91 81       	ldd	r25, Z+1	; 0x01
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <LCD_displayCharacter+0x10e>
    2fdc:	fe 01       	movw	r30, r28
    2fde:	e9 5a       	subi	r30, 0xA9	; 169
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	91 83       	std	Z+1, r25	; 0x01
    2fe4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe6:	de 01       	movw	r26, r28
    2fe8:	a7 5a       	subi	r26, 0xA7	; 167
    2fea:	bf 4f       	sbci	r27, 0xFF	; 255
    2fec:	fe 01       	movw	r30, r28
    2fee:	e7 5a       	subi	r30, 0xA7	; 167
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	80 81       	ld	r24, Z
    2ff4:	91 81       	ldd	r25, Z+1	; 0x01
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	11 96       	adiw	r26, 0x01	; 1
    2ffa:	9c 93       	st	X, r25
    2ffc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffe:	fe 01       	movw	r30, r28
    3000:	e7 5a       	subi	r30, 0xA7	; 167
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	80 81       	ld	r24, Z
    3006:	91 81       	ldd	r25, Z+1	; 0x01
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	d1 f6       	brne	.-76     	; 0x2fc0 <LCD_displayCharacter+0xf6>
    300c:	27 c0       	rjmp	.+78     	; 0x305c <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300e:	8e 01       	movw	r16, r28
    3010:	07 5a       	subi	r16, 0xA7	; 167
    3012:	1f 4f       	sbci	r17, 0xFF	; 255
    3014:	fe 01       	movw	r30, r28
    3016:	e5 5a       	subi	r30, 0xA5	; 165
    3018:	ff 4f       	sbci	r31, 0xFF	; 255
    301a:	60 81       	ld	r22, Z
    301c:	71 81       	ldd	r23, Z+1	; 0x01
    301e:	82 81       	ldd	r24, Z+2	; 0x02
    3020:	93 81       	ldd	r25, Z+3	; 0x03
    3022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	f8 01       	movw	r30, r16
    302c:	91 83       	std	Z+1, r25	; 0x01
    302e:	80 83       	st	Z, r24
    3030:	de 01       	movw	r26, r28
    3032:	ab 5a       	subi	r26, 0xAB	; 171
    3034:	bf 4f       	sbci	r27, 0xFF	; 255
    3036:	fe 01       	movw	r30, r28
    3038:	e7 5a       	subi	r30, 0xA7	; 167
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	80 81       	ld	r24, Z
    303e:	91 81       	ldd	r25, Z+1	; 0x01
    3040:	8d 93       	st	X+, r24
    3042:	9c 93       	st	X, r25
    3044:	fe 01       	movw	r30, r28
    3046:	eb 5a       	subi	r30, 0xAB	; 171
    3048:	ff 4f       	sbci	r31, 0xFF	; 255
    304a:	80 81       	ld	r24, Z
    304c:	91 81       	ldd	r25, Z+1	; 0x01
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	f1 f7       	brne	.-4      	; 0x304e <LCD_displayCharacter+0x184>
    3052:	fe 01       	movw	r30, r28
    3054:	eb 5a       	subi	r30, 0xAB	; 171
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	91 83       	std	Z+1, r25	; 0x01
    305a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	62 e0       	ldi	r22, 0x02	; 2
    3060:	41 e0       	ldi	r20, 0x01	; 1
    3062:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
    3066:	fe 01       	movw	r30, r28
    3068:	ef 5a       	subi	r30, 0xAF	; 175
    306a:	ff 4f       	sbci	r31, 0xFF	; 255
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	a0 e8       	ldi	r26, 0x80	; 128
    3072:	bf e3       	ldi	r27, 0x3F	; 63
    3074:	80 83       	st	Z, r24
    3076:	91 83       	std	Z+1, r25	; 0x01
    3078:	a2 83       	std	Z+2, r26	; 0x02
    307a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    307c:	8e 01       	movw	r16, r28
    307e:	03 5b       	subi	r16, 0xB3	; 179
    3080:	1f 4f       	sbci	r17, 0xFF	; 255
    3082:	fe 01       	movw	r30, r28
    3084:	ef 5a       	subi	r30, 0xAF	; 175
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	60 81       	ld	r22, Z
    308a:	71 81       	ldd	r23, Z+1	; 0x01
    308c:	82 81       	ldd	r24, Z+2	; 0x02
    308e:	93 81       	ldd	r25, Z+3	; 0x03
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	4a ef       	ldi	r20, 0xFA	; 250
    3096:	54 e4       	ldi	r21, 0x44	; 68
    3098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	f8 01       	movw	r30, r16
    30a2:	80 83       	st	Z, r24
    30a4:	91 83       	std	Z+1, r25	; 0x01
    30a6:	a2 83       	std	Z+2, r26	; 0x02
    30a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30aa:	fe 01       	movw	r30, r28
    30ac:	e3 5b       	subi	r30, 0xB3	; 179
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	60 81       	ld	r22, Z
    30b2:	71 81       	ldd	r23, Z+1	; 0x01
    30b4:	82 81       	ldd	r24, Z+2	; 0x02
    30b6:	93 81       	ldd	r25, Z+3	; 0x03
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e8       	ldi	r20, 0x80	; 128
    30be:	5f e3       	ldi	r21, 0x3F	; 63
    30c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30c4:	88 23       	and	r24, r24
    30c6:	44 f4       	brge	.+16     	; 0x30d8 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    30c8:	fe 01       	movw	r30, r28
    30ca:	e5 5b       	subi	r30, 0xB5	; 181
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	91 83       	std	Z+1, r25	; 0x01
    30d4:	80 83       	st	Z, r24
    30d6:	64 c0       	rjmp	.+200    	; 0x31a0 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    30d8:	fe 01       	movw	r30, r28
    30da:	e3 5b       	subi	r30, 0xB3	; 179
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	60 81       	ld	r22, Z
    30e0:	71 81       	ldd	r23, Z+1	; 0x01
    30e2:	82 81       	ldd	r24, Z+2	; 0x02
    30e4:	93 81       	ldd	r25, Z+3	; 0x03
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	3f ef       	ldi	r19, 0xFF	; 255
    30ea:	4f e7       	ldi	r20, 0x7F	; 127
    30ec:	57 e4       	ldi	r21, 0x47	; 71
    30ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30f2:	18 16       	cp	r1, r24
    30f4:	0c f0       	brlt	.+2      	; 0x30f8 <LCD_displayCharacter+0x22e>
    30f6:	43 c0       	rjmp	.+134    	; 0x317e <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f8:	fe 01       	movw	r30, r28
    30fa:	ef 5a       	subi	r30, 0xAF	; 175
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	60 81       	ld	r22, Z
    3100:	71 81       	ldd	r23, Z+1	; 0x01
    3102:	82 81       	ldd	r24, Z+2	; 0x02
    3104:	93 81       	ldd	r25, Z+3	; 0x03
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	40 e2       	ldi	r20, 0x20	; 32
    310c:	51 e4       	ldi	r21, 0x41	; 65
    310e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	8e 01       	movw	r16, r28
    3118:	05 5b       	subi	r16, 0xB5	; 181
    311a:	1f 4f       	sbci	r17, 0xFF	; 255
    311c:	bc 01       	movw	r22, r24
    311e:	cd 01       	movw	r24, r26
    3120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	f8 01       	movw	r30, r16
    312a:	91 83       	std	Z+1, r25	; 0x01
    312c:	80 83       	st	Z, r24
    312e:	1f c0       	rjmp	.+62     	; 0x316e <LCD_displayCharacter+0x2a4>
    3130:	fe 01       	movw	r30, r28
    3132:	e7 5b       	subi	r30, 0xB7	; 183
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	88 ec       	ldi	r24, 0xC8	; 200
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	91 83       	std	Z+1, r25	; 0x01
    313c:	80 83       	st	Z, r24
    313e:	fe 01       	movw	r30, r28
    3140:	e7 5b       	subi	r30, 0xB7	; 183
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	80 81       	ld	r24, Z
    3146:	91 81       	ldd	r25, Z+1	; 0x01
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	f1 f7       	brne	.-4      	; 0x3148 <LCD_displayCharacter+0x27e>
    314c:	fe 01       	movw	r30, r28
    314e:	e7 5b       	subi	r30, 0xB7	; 183
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	91 83       	std	Z+1, r25	; 0x01
    3154:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3156:	de 01       	movw	r26, r28
    3158:	a5 5b       	subi	r26, 0xB5	; 181
    315a:	bf 4f       	sbci	r27, 0xFF	; 255
    315c:	fe 01       	movw	r30, r28
    315e:	e5 5b       	subi	r30, 0xB5	; 181
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	80 81       	ld	r24, Z
    3164:	91 81       	ldd	r25, Z+1	; 0x01
    3166:	01 97       	sbiw	r24, 0x01	; 1
    3168:	11 96       	adiw	r26, 0x01	; 1
    316a:	9c 93       	st	X, r25
    316c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    316e:	fe 01       	movw	r30, r28
    3170:	e5 5b       	subi	r30, 0xB5	; 181
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	80 81       	ld	r24, Z
    3176:	91 81       	ldd	r25, Z+1	; 0x01
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	d1 f6       	brne	.-76     	; 0x3130 <LCD_displayCharacter+0x266>
    317c:	27 c0       	rjmp	.+78     	; 0x31cc <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317e:	8e 01       	movw	r16, r28
    3180:	05 5b       	subi	r16, 0xB5	; 181
    3182:	1f 4f       	sbci	r17, 0xFF	; 255
    3184:	fe 01       	movw	r30, r28
    3186:	e3 5b       	subi	r30, 0xB3	; 179
    3188:	ff 4f       	sbci	r31, 0xFF	; 255
    318a:	60 81       	ld	r22, Z
    318c:	71 81       	ldd	r23, Z+1	; 0x01
    318e:	82 81       	ldd	r24, Z+2	; 0x02
    3190:	93 81       	ldd	r25, Z+3	; 0x03
    3192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	f8 01       	movw	r30, r16
    319c:	91 83       	std	Z+1, r25	; 0x01
    319e:	80 83       	st	Z, r24
    31a0:	de 01       	movw	r26, r28
    31a2:	a9 5b       	subi	r26, 0xB9	; 185
    31a4:	bf 4f       	sbci	r27, 0xFF	; 255
    31a6:	fe 01       	movw	r30, r28
    31a8:	e5 5b       	subi	r30, 0xB5	; 181
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	80 81       	ld	r24, Z
    31ae:	91 81       	ldd	r25, Z+1	; 0x01
    31b0:	8d 93       	st	X+, r24
    31b2:	9c 93       	st	X, r25
    31b4:	fe 01       	movw	r30, r28
    31b6:	e9 5b       	subi	r30, 0xB9	; 185
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	80 81       	ld	r24, Z
    31bc:	91 81       	ldd	r25, Z+1	; 0x01
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	f1 f7       	brne	.-4      	; 0x31be <LCD_displayCharacter+0x2f4>
    31c2:	fe 01       	movw	r30, r28
    31c4:	e9 5b       	subi	r30, 0xB9	; 185
    31c6:	ff 4f       	sbci	r31, 0xFF	; 255
    31c8:	91 83       	std	Z+1, r25	; 0x01
    31ca:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    31cc:	fe 01       	movw	r30, r28
    31ce:	ed 59       	subi	r30, 0x9D	; 157
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	80 81       	ld	r24, Z
    31d4:	88 2f       	mov	r24, r24
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	80 71       	andi	r24, 0x10	; 16
    31da:	90 70       	andi	r25, 0x00	; 0
    31dc:	95 95       	asr	r25
    31de:	87 95       	ror	r24
    31e0:	95 95       	asr	r25
    31e2:	87 95       	ror	r24
    31e4:	95 95       	asr	r25
    31e6:	87 95       	ror	r24
    31e8:	95 95       	asr	r25
    31ea:	87 95       	ror	r24
    31ec:	98 2f       	mov	r25, r24
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	63 e0       	ldi	r22, 0x03	; 3
    31f2:	49 2f       	mov	r20, r25
    31f4:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    31f8:	fe 01       	movw	r30, r28
    31fa:	ed 59       	subi	r30, 0x9D	; 157
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	80 81       	ld	r24, Z
    3200:	88 2f       	mov	r24, r24
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	80 72       	andi	r24, 0x20	; 32
    3206:	90 70       	andi	r25, 0x00	; 0
    3208:	95 95       	asr	r25
    320a:	87 95       	ror	r24
    320c:	95 95       	asr	r25
    320e:	87 95       	ror	r24
    3210:	95 95       	asr	r25
    3212:	87 95       	ror	r24
    3214:	95 95       	asr	r25
    3216:	87 95       	ror	r24
    3218:	95 95       	asr	r25
    321a:	87 95       	ror	r24
    321c:	98 2f       	mov	r25, r24
    321e:	80 e0       	ldi	r24, 0x00	; 0
    3220:	64 e0       	ldi	r22, 0x04	; 4
    3222:	49 2f       	mov	r20, r25
    3224:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    3228:	fe 01       	movw	r30, r28
    322a:	ed 59       	subi	r30, 0x9D	; 157
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	80 81       	ld	r24, Z
    3230:	88 2f       	mov	r24, r24
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	80 74       	andi	r24, 0x40	; 64
    3236:	90 70       	andi	r25, 0x00	; 0
    3238:	08 2e       	mov	r0, r24
    323a:	89 2f       	mov	r24, r25
    323c:	00 0c       	add	r0, r0
    323e:	88 1f       	adc	r24, r24
    3240:	99 0b       	sbc	r25, r25
    3242:	00 0c       	add	r0, r0
    3244:	88 1f       	adc	r24, r24
    3246:	99 1f       	adc	r25, r25
    3248:	98 2f       	mov	r25, r24
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	65 e0       	ldi	r22, 0x05	; 5
    324e:	49 2f       	mov	r20, r25
    3250:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    3254:	fe 01       	movw	r30, r28
    3256:	ed 59       	subi	r30, 0x9D	; 157
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	80 81       	ld	r24, Z
    325c:	98 2f       	mov	r25, r24
    325e:	99 1f       	adc	r25, r25
    3260:	99 27       	eor	r25, r25
    3262:	99 1f       	adc	r25, r25
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	66 e0       	ldi	r22, 0x06	; 6
    3268:	49 2f       	mov	r20, r25
    326a:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
    326e:	fe 01       	movw	r30, r28
    3270:	ed 5b       	subi	r30, 0xBD	; 189
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	a0 e8       	ldi	r26, 0x80	; 128
    327a:	bf e3       	ldi	r27, 0x3F	; 63
    327c:	80 83       	st	Z, r24
    327e:	91 83       	std	Z+1, r25	; 0x01
    3280:	a2 83       	std	Z+2, r26	; 0x02
    3282:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3284:	8e 01       	movw	r16, r28
    3286:	01 5c       	subi	r16, 0xC1	; 193
    3288:	1f 4f       	sbci	r17, 0xFF	; 255
    328a:	fe 01       	movw	r30, r28
    328c:	ed 5b       	subi	r30, 0xBD	; 189
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	60 81       	ld	r22, Z
    3292:	71 81       	ldd	r23, Z+1	; 0x01
    3294:	82 81       	ldd	r24, Z+2	; 0x02
    3296:	93 81       	ldd	r25, Z+3	; 0x03
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	4a ef       	ldi	r20, 0xFA	; 250
    329e:	54 e4       	ldi	r21, 0x44	; 68
    32a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	f8 01       	movw	r30, r16
    32aa:	80 83       	st	Z, r24
    32ac:	91 83       	std	Z+1, r25	; 0x01
    32ae:	a2 83       	std	Z+2, r26	; 0x02
    32b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32b2:	fe 01       	movw	r30, r28
    32b4:	ff 96       	adiw	r30, 0x3f	; 63
    32b6:	60 81       	ld	r22, Z
    32b8:	71 81       	ldd	r23, Z+1	; 0x01
    32ba:	82 81       	ldd	r24, Z+2	; 0x02
    32bc:	93 81       	ldd	r25, Z+3	; 0x03
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	40 e8       	ldi	r20, 0x80	; 128
    32c4:	5f e3       	ldi	r21, 0x3F	; 63
    32c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32ca:	88 23       	and	r24, r24
    32cc:	2c f4       	brge	.+10     	; 0x32d8 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	9e af       	std	Y+62, r25	; 0x3e
    32d4:	8d af       	std	Y+61, r24	; 0x3d
    32d6:	46 c0       	rjmp	.+140    	; 0x3364 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    32d8:	fe 01       	movw	r30, r28
    32da:	ff 96       	adiw	r30, 0x3f	; 63
    32dc:	60 81       	ld	r22, Z
    32de:	71 81       	ldd	r23, Z+1	; 0x01
    32e0:	82 81       	ldd	r24, Z+2	; 0x02
    32e2:	93 81       	ldd	r25, Z+3	; 0x03
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	3f ef       	ldi	r19, 0xFF	; 255
    32e8:	4f e7       	ldi	r20, 0x7F	; 127
    32ea:	57 e4       	ldi	r21, 0x47	; 71
    32ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32f0:	18 16       	cp	r1, r24
    32f2:	64 f5       	brge	.+88     	; 0x334c <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f4:	fe 01       	movw	r30, r28
    32f6:	ed 5b       	subi	r30, 0xBD	; 189
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	60 81       	ld	r22, Z
    32fc:	71 81       	ldd	r23, Z+1	; 0x01
    32fe:	82 81       	ldd	r24, Z+2	; 0x02
    3300:	93 81       	ldd	r25, Z+3	; 0x03
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	40 e2       	ldi	r20, 0x20	; 32
    3308:	51 e4       	ldi	r21, 0x41	; 65
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	bc 01       	movw	r22, r24
    3314:	cd 01       	movw	r24, r26
    3316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	9e af       	std	Y+62, r25	; 0x3e
    3320:	8d af       	std	Y+61, r24	; 0x3d
    3322:	0f c0       	rjmp	.+30     	; 0x3342 <LCD_displayCharacter+0x478>
    3324:	88 ec       	ldi	r24, 0xC8	; 200
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	9c af       	std	Y+60, r25	; 0x3c
    332a:	8b af       	std	Y+59, r24	; 0x3b
    332c:	8b ad       	ldd	r24, Y+59	; 0x3b
    332e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	f1 f7       	brne	.-4      	; 0x3330 <LCD_displayCharacter+0x466>
    3334:	9c af       	std	Y+60, r25	; 0x3c
    3336:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3338:	8d ad       	ldd	r24, Y+61	; 0x3d
    333a:	9e ad       	ldd	r25, Y+62	; 0x3e
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	9e af       	std	Y+62, r25	; 0x3e
    3340:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3342:	8d ad       	ldd	r24, Y+61	; 0x3d
    3344:	9e ad       	ldd	r25, Y+62	; 0x3e
    3346:	00 97       	sbiw	r24, 0x00	; 0
    3348:	69 f7       	brne	.-38     	; 0x3324 <LCD_displayCharacter+0x45a>
    334a:	16 c0       	rjmp	.+44     	; 0x3378 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    334c:	fe 01       	movw	r30, r28
    334e:	ff 96       	adiw	r30, 0x3f	; 63
    3350:	60 81       	ld	r22, Z
    3352:	71 81       	ldd	r23, Z+1	; 0x01
    3354:	82 81       	ldd	r24, Z+2	; 0x02
    3356:	93 81       	ldd	r25, Z+3	; 0x03
    3358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	9e af       	std	Y+62, r25	; 0x3e
    3362:	8d af       	std	Y+61, r24	; 0x3d
    3364:	8d ad       	ldd	r24, Y+61	; 0x3d
    3366:	9e ad       	ldd	r25, Y+62	; 0x3e
    3368:	9a af       	std	Y+58, r25	; 0x3a
    336a:	89 af       	std	Y+57, r24	; 0x39
    336c:	89 ad       	ldd	r24, Y+57	; 0x39
    336e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3370:	01 97       	sbiw	r24, 0x01	; 1
    3372:	f1 f7       	brne	.-4      	; 0x3370 <LCD_displayCharacter+0x4a6>
    3374:	9a af       	std	Y+58, r25	; 0x3a
    3376:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	62 e0       	ldi	r22, 0x02	; 2
    337c:	40 e0       	ldi	r20, 0x00	; 0
    337e:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	a0 e8       	ldi	r26, 0x80	; 128
    3388:	bf e3       	ldi	r27, 0x3F	; 63
    338a:	8d ab       	std	Y+53, r24	; 0x35
    338c:	9e ab       	std	Y+54, r25	; 0x36
    338e:	af ab       	std	Y+55, r26	; 0x37
    3390:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3392:	6d a9       	ldd	r22, Y+53	; 0x35
    3394:	7e a9       	ldd	r23, Y+54	; 0x36
    3396:	8f a9       	ldd	r24, Y+55	; 0x37
    3398:	98 ad       	ldd	r25, Y+56	; 0x38
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	4a ef       	ldi	r20, 0xFA	; 250
    33a0:	54 e4       	ldi	r21, 0x44	; 68
    33a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a6:	dc 01       	movw	r26, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	89 ab       	std	Y+49, r24	; 0x31
    33ac:	9a ab       	std	Y+50, r25	; 0x32
    33ae:	ab ab       	std	Y+51, r26	; 0x33
    33b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33b2:	69 a9       	ldd	r22, Y+49	; 0x31
    33b4:	7a a9       	ldd	r23, Y+50	; 0x32
    33b6:	8b a9       	ldd	r24, Y+51	; 0x33
    33b8:	9c a9       	ldd	r25, Y+52	; 0x34
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	40 e8       	ldi	r20, 0x80	; 128
    33c0:	5f e3       	ldi	r21, 0x3F	; 63
    33c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33c6:	88 23       	and	r24, r24
    33c8:	2c f4       	brge	.+10     	; 0x33d4 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	98 ab       	std	Y+48, r25	; 0x30
    33d0:	8f a7       	std	Y+47, r24	; 0x2f
    33d2:	3f c0       	rjmp	.+126    	; 0x3452 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    33d4:	69 a9       	ldd	r22, Y+49	; 0x31
    33d6:	7a a9       	ldd	r23, Y+50	; 0x32
    33d8:	8b a9       	ldd	r24, Y+51	; 0x33
    33da:	9c a9       	ldd	r25, Y+52	; 0x34
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	3f ef       	ldi	r19, 0xFF	; 255
    33e0:	4f e7       	ldi	r20, 0x7F	; 127
    33e2:	57 e4       	ldi	r21, 0x47	; 71
    33e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33e8:	18 16       	cp	r1, r24
    33ea:	4c f5       	brge	.+82     	; 0x343e <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ec:	6d a9       	ldd	r22, Y+53	; 0x35
    33ee:	7e a9       	ldd	r23, Y+54	; 0x36
    33f0:	8f a9       	ldd	r24, Y+55	; 0x37
    33f2:	98 ad       	ldd	r25, Y+56	; 0x38
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	40 e2       	ldi	r20, 0x20	; 32
    33fa:	51 e4       	ldi	r21, 0x41	; 65
    33fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
    3404:	bc 01       	movw	r22, r24
    3406:	cd 01       	movw	r24, r26
    3408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	98 ab       	std	Y+48, r25	; 0x30
    3412:	8f a7       	std	Y+47, r24	; 0x2f
    3414:	0f c0       	rjmp	.+30     	; 0x3434 <LCD_displayCharacter+0x56a>
    3416:	88 ec       	ldi	r24, 0xC8	; 200
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	9e a7       	std	Y+46, r25	; 0x2e
    341c:	8d a7       	std	Y+45, r24	; 0x2d
    341e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3420:	9e a5       	ldd	r25, Y+46	; 0x2e
    3422:	01 97       	sbiw	r24, 0x01	; 1
    3424:	f1 f7       	brne	.-4      	; 0x3422 <LCD_displayCharacter+0x558>
    3426:	9e a7       	std	Y+46, r25	; 0x2e
    3428:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342a:	8f a5       	ldd	r24, Y+47	; 0x2f
    342c:	98 a9       	ldd	r25, Y+48	; 0x30
    342e:	01 97       	sbiw	r24, 0x01	; 1
    3430:	98 ab       	std	Y+48, r25	; 0x30
    3432:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3434:	8f a5       	ldd	r24, Y+47	; 0x2f
    3436:	98 a9       	ldd	r25, Y+48	; 0x30
    3438:	00 97       	sbiw	r24, 0x00	; 0
    343a:	69 f7       	brne	.-38     	; 0x3416 <LCD_displayCharacter+0x54c>
    343c:	14 c0       	rjmp	.+40     	; 0x3466 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    343e:	69 a9       	ldd	r22, Y+49	; 0x31
    3440:	7a a9       	ldd	r23, Y+50	; 0x32
    3442:	8b a9       	ldd	r24, Y+51	; 0x33
    3444:	9c a9       	ldd	r25, Y+52	; 0x34
    3446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	98 ab       	std	Y+48, r25	; 0x30
    3450:	8f a7       	std	Y+47, r24	; 0x2f
    3452:	8f a5       	ldd	r24, Y+47	; 0x2f
    3454:	98 a9       	ldd	r25, Y+48	; 0x30
    3456:	9c a7       	std	Y+44, r25	; 0x2c
    3458:	8b a7       	std	Y+43, r24	; 0x2b
    345a:	8b a5       	ldd	r24, Y+43	; 0x2b
    345c:	9c a5       	ldd	r25, Y+44	; 0x2c
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	f1 f7       	brne	.-4      	; 0x345e <LCD_displayCharacter+0x594>
    3462:	9c a7       	std	Y+44, r25	; 0x2c
    3464:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	62 e0       	ldi	r22, 0x02	; 2
    346a:	41 e0       	ldi	r20, 0x01	; 1
    346c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	a0 e8       	ldi	r26, 0x80	; 128
    3476:	bf e3       	ldi	r27, 0x3F	; 63
    3478:	8f a3       	std	Y+39, r24	; 0x27
    347a:	98 a7       	std	Y+40, r25	; 0x28
    347c:	a9 a7       	std	Y+41, r26	; 0x29
    347e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3480:	6f a1       	ldd	r22, Y+39	; 0x27
    3482:	78 a5       	ldd	r23, Y+40	; 0x28
    3484:	89 a5       	ldd	r24, Y+41	; 0x29
    3486:	9a a5       	ldd	r25, Y+42	; 0x2a
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	4a ef       	ldi	r20, 0xFA	; 250
    348e:	54 e4       	ldi	r21, 0x44	; 68
    3490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	8b a3       	std	Y+35, r24	; 0x23
    349a:	9c a3       	std	Y+36, r25	; 0x24
    349c:	ad a3       	std	Y+37, r26	; 0x25
    349e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34a0:	6b a1       	ldd	r22, Y+35	; 0x23
    34a2:	7c a1       	ldd	r23, Y+36	; 0x24
    34a4:	8d a1       	ldd	r24, Y+37	; 0x25
    34a6:	9e a1       	ldd	r25, Y+38	; 0x26
    34a8:	20 e0       	ldi	r18, 0x00	; 0
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	40 e8       	ldi	r20, 0x80	; 128
    34ae:	5f e3       	ldi	r21, 0x3F	; 63
    34b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34b4:	88 23       	and	r24, r24
    34b6:	2c f4       	brge	.+10     	; 0x34c2 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	9a a3       	std	Y+34, r25	; 0x22
    34be:	89 a3       	std	Y+33, r24	; 0x21
    34c0:	3f c0       	rjmp	.+126    	; 0x3540 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    34c2:	6b a1       	ldd	r22, Y+35	; 0x23
    34c4:	7c a1       	ldd	r23, Y+36	; 0x24
    34c6:	8d a1       	ldd	r24, Y+37	; 0x25
    34c8:	9e a1       	ldd	r25, Y+38	; 0x26
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	3f ef       	ldi	r19, 0xFF	; 255
    34ce:	4f e7       	ldi	r20, 0x7F	; 127
    34d0:	57 e4       	ldi	r21, 0x47	; 71
    34d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34d6:	18 16       	cp	r1, r24
    34d8:	4c f5       	brge	.+82     	; 0x352c <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34da:	6f a1       	ldd	r22, Y+39	; 0x27
    34dc:	78 a5       	ldd	r23, Y+40	; 0x28
    34de:	89 a5       	ldd	r24, Y+41	; 0x29
    34e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e2       	ldi	r20, 0x20	; 32
    34e8:	51 e4       	ldi	r21, 0x41	; 65
    34ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	bc 01       	movw	r22, r24
    34f4:	cd 01       	movw	r24, r26
    34f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	9a a3       	std	Y+34, r25	; 0x22
    3500:	89 a3       	std	Y+33, r24	; 0x21
    3502:	0f c0       	rjmp	.+30     	; 0x3522 <LCD_displayCharacter+0x658>
    3504:	88 ec       	ldi	r24, 0xC8	; 200
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	98 a3       	std	Y+32, r25	; 0x20
    350a:	8f 8f       	std	Y+31, r24	; 0x1f
    350c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    350e:	98 a1       	ldd	r25, Y+32	; 0x20
    3510:	01 97       	sbiw	r24, 0x01	; 1
    3512:	f1 f7       	brne	.-4      	; 0x3510 <LCD_displayCharacter+0x646>
    3514:	98 a3       	std	Y+32, r25	; 0x20
    3516:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3518:	89 a1       	ldd	r24, Y+33	; 0x21
    351a:	9a a1       	ldd	r25, Y+34	; 0x22
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	9a a3       	std	Y+34, r25	; 0x22
    3520:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3522:	89 a1       	ldd	r24, Y+33	; 0x21
    3524:	9a a1       	ldd	r25, Y+34	; 0x22
    3526:	00 97       	sbiw	r24, 0x00	; 0
    3528:	69 f7       	brne	.-38     	; 0x3504 <LCD_displayCharacter+0x63a>
    352a:	14 c0       	rjmp	.+40     	; 0x3554 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    352c:	6b a1       	ldd	r22, Y+35	; 0x23
    352e:	7c a1       	ldd	r23, Y+36	; 0x24
    3530:	8d a1       	ldd	r24, Y+37	; 0x25
    3532:	9e a1       	ldd	r25, Y+38	; 0x26
    3534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	9a a3       	std	Y+34, r25	; 0x22
    353e:	89 a3       	std	Y+33, r24	; 0x21
    3540:	89 a1       	ldd	r24, Y+33	; 0x21
    3542:	9a a1       	ldd	r25, Y+34	; 0x22
    3544:	9e 8f       	std	Y+30, r25	; 0x1e
    3546:	8d 8f       	std	Y+29, r24	; 0x1d
    3548:	8d 8d       	ldd	r24, Y+29	; 0x1d
    354a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    354c:	01 97       	sbiw	r24, 0x01	; 1
    354e:	f1 f7       	brne	.-4      	; 0x354c <LCD_displayCharacter+0x682>
    3550:	9e 8f       	std	Y+30, r25	; 0x1e
    3552:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3554:	fe 01       	movw	r30, r28
    3556:	ed 59       	subi	r30, 0x9D	; 157
    3558:	ff 4f       	sbci	r31, 0xFF	; 255
    355a:	80 81       	ld	r24, Z
    355c:	98 2f       	mov	r25, r24
    355e:	91 70       	andi	r25, 0x01	; 1
    3560:	80 e0       	ldi	r24, 0x00	; 0
    3562:	63 e0       	ldi	r22, 0x03	; 3
    3564:	49 2f       	mov	r20, r25
    3566:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    356a:	fe 01       	movw	r30, r28
    356c:	ed 59       	subi	r30, 0x9D	; 157
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	80 81       	ld	r24, Z
    3572:	88 2f       	mov	r24, r24
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	82 70       	andi	r24, 0x02	; 2
    3578:	90 70       	andi	r25, 0x00	; 0
    357a:	95 95       	asr	r25
    357c:	87 95       	ror	r24
    357e:	98 2f       	mov	r25, r24
    3580:	80 e0       	ldi	r24, 0x00	; 0
    3582:	64 e0       	ldi	r22, 0x04	; 4
    3584:	49 2f       	mov	r20, r25
    3586:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    358a:	fe 01       	movw	r30, r28
    358c:	ed 59       	subi	r30, 0x9D	; 157
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	80 81       	ld	r24, Z
    3592:	88 2f       	mov	r24, r24
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	84 70       	andi	r24, 0x04	; 4
    3598:	90 70       	andi	r25, 0x00	; 0
    359a:	95 95       	asr	r25
    359c:	87 95       	ror	r24
    359e:	95 95       	asr	r25
    35a0:	87 95       	ror	r24
    35a2:	98 2f       	mov	r25, r24
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	65 e0       	ldi	r22, 0x05	; 5
    35a8:	49 2f       	mov	r20, r25
    35aa:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    35ae:	fe 01       	movw	r30, r28
    35b0:	ed 59       	subi	r30, 0x9D	; 157
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	80 81       	ld	r24, Z
    35b6:	88 2f       	mov	r24, r24
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	88 70       	andi	r24, 0x08	; 8
    35bc:	90 70       	andi	r25, 0x00	; 0
    35be:	95 95       	asr	r25
    35c0:	87 95       	ror	r24
    35c2:	95 95       	asr	r25
    35c4:	87 95       	ror	r24
    35c6:	95 95       	asr	r25
    35c8:	87 95       	ror	r24
    35ca:	98 2f       	mov	r25, r24
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	66 e0       	ldi	r22, 0x06	; 6
    35d0:	49 2f       	mov	r20, r25
    35d2:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
    35d6:	80 e0       	ldi	r24, 0x00	; 0
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	a0 e8       	ldi	r26, 0x80	; 128
    35dc:	bf e3       	ldi	r27, 0x3F	; 63
    35de:	89 8f       	std	Y+25, r24	; 0x19
    35e0:	9a 8f       	std	Y+26, r25	; 0x1a
    35e2:	ab 8f       	std	Y+27, r26	; 0x1b
    35e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e6:	69 8d       	ldd	r22, Y+25	; 0x19
    35e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	4a ef       	ldi	r20, 0xFA	; 250
    35f4:	54 e4       	ldi	r21, 0x44	; 68
    35f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fa:	dc 01       	movw	r26, r24
    35fc:	cb 01       	movw	r24, r22
    35fe:	8d 8b       	std	Y+21, r24	; 0x15
    3600:	9e 8b       	std	Y+22, r25	; 0x16
    3602:	af 8b       	std	Y+23, r26	; 0x17
    3604:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3606:	6d 89       	ldd	r22, Y+21	; 0x15
    3608:	7e 89       	ldd	r23, Y+22	; 0x16
    360a:	8f 89       	ldd	r24, Y+23	; 0x17
    360c:	98 8d       	ldd	r25, Y+24	; 0x18
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	40 e8       	ldi	r20, 0x80	; 128
    3614:	5f e3       	ldi	r21, 0x3F	; 63
    3616:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    361a:	88 23       	and	r24, r24
    361c:	2c f4       	brge	.+10     	; 0x3628 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	9c 8b       	std	Y+20, r25	; 0x14
    3624:	8b 8b       	std	Y+19, r24	; 0x13
    3626:	3f c0       	rjmp	.+126    	; 0x36a6 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3628:	6d 89       	ldd	r22, Y+21	; 0x15
    362a:	7e 89       	ldd	r23, Y+22	; 0x16
    362c:	8f 89       	ldd	r24, Y+23	; 0x17
    362e:	98 8d       	ldd	r25, Y+24	; 0x18
    3630:	20 e0       	ldi	r18, 0x00	; 0
    3632:	3f ef       	ldi	r19, 0xFF	; 255
    3634:	4f e7       	ldi	r20, 0x7F	; 127
    3636:	57 e4       	ldi	r21, 0x47	; 71
    3638:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    363c:	18 16       	cp	r1, r24
    363e:	4c f5       	brge	.+82     	; 0x3692 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3640:	69 8d       	ldd	r22, Y+25	; 0x19
    3642:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3644:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3646:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	40 e2       	ldi	r20, 0x20	; 32
    364e:	51 e4       	ldi	r21, 0x41	; 65
    3650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	bc 01       	movw	r22, r24
    365a:	cd 01       	movw	r24, r26
    365c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3660:	dc 01       	movw	r26, r24
    3662:	cb 01       	movw	r24, r22
    3664:	9c 8b       	std	Y+20, r25	; 0x14
    3666:	8b 8b       	std	Y+19, r24	; 0x13
    3668:	0f c0       	rjmp	.+30     	; 0x3688 <LCD_displayCharacter+0x7be>
    366a:	88 ec       	ldi	r24, 0xC8	; 200
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	9a 8b       	std	Y+18, r25	; 0x12
    3670:	89 8b       	std	Y+17, r24	; 0x11
    3672:	89 89       	ldd	r24, Y+17	; 0x11
    3674:	9a 89       	ldd	r25, Y+18	; 0x12
    3676:	01 97       	sbiw	r24, 0x01	; 1
    3678:	f1 f7       	brne	.-4      	; 0x3676 <LCD_displayCharacter+0x7ac>
    367a:	9a 8b       	std	Y+18, r25	; 0x12
    367c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    367e:	8b 89       	ldd	r24, Y+19	; 0x13
    3680:	9c 89       	ldd	r25, Y+20	; 0x14
    3682:	01 97       	sbiw	r24, 0x01	; 1
    3684:	9c 8b       	std	Y+20, r25	; 0x14
    3686:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3688:	8b 89       	ldd	r24, Y+19	; 0x13
    368a:	9c 89       	ldd	r25, Y+20	; 0x14
    368c:	00 97       	sbiw	r24, 0x00	; 0
    368e:	69 f7       	brne	.-38     	; 0x366a <LCD_displayCharacter+0x7a0>
    3690:	14 c0       	rjmp	.+40     	; 0x36ba <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3692:	6d 89       	ldd	r22, Y+21	; 0x15
    3694:	7e 89       	ldd	r23, Y+22	; 0x16
    3696:	8f 89       	ldd	r24, Y+23	; 0x17
    3698:	98 8d       	ldd	r25, Y+24	; 0x18
    369a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369e:	dc 01       	movw	r26, r24
    36a0:	cb 01       	movw	r24, r22
    36a2:	9c 8b       	std	Y+20, r25	; 0x14
    36a4:	8b 8b       	std	Y+19, r24	; 0x13
    36a6:	8b 89       	ldd	r24, Y+19	; 0x13
    36a8:	9c 89       	ldd	r25, Y+20	; 0x14
    36aa:	98 8b       	std	Y+16, r25	; 0x10
    36ac:	8f 87       	std	Y+15, r24	; 0x0f
    36ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    36b0:	98 89       	ldd	r25, Y+16	; 0x10
    36b2:	01 97       	sbiw	r24, 0x01	; 1
    36b4:	f1 f7       	brne	.-4      	; 0x36b2 <LCD_displayCharacter+0x7e8>
    36b6:	98 8b       	std	Y+16, r25	; 0x10
    36b8:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	62 e0       	ldi	r22, 0x02	; 2
    36be:	40 e0       	ldi	r20, 0x00	; 0
    36c0:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePin>
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	a0 e8       	ldi	r26, 0x80	; 128
    36ca:	bf e3       	ldi	r27, 0x3F	; 63
    36cc:	8b 87       	std	Y+11, r24	; 0x0b
    36ce:	9c 87       	std	Y+12, r25	; 0x0c
    36d0:	ad 87       	std	Y+13, r26	; 0x0d
    36d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36da:	9e 85       	ldd	r25, Y+14	; 0x0e
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	4a ef       	ldi	r20, 0xFA	; 250
    36e2:	54 e4       	ldi	r21, 0x44	; 68
    36e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	8f 83       	std	Y+7, r24	; 0x07
    36ee:	98 87       	std	Y+8, r25	; 0x08
    36f0:	a9 87       	std	Y+9, r26	; 0x09
    36f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36f4:	6f 81       	ldd	r22, Y+7	; 0x07
    36f6:	78 85       	ldd	r23, Y+8	; 0x08
    36f8:	89 85       	ldd	r24, Y+9	; 0x09
    36fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	40 e8       	ldi	r20, 0x80	; 128
    3702:	5f e3       	ldi	r21, 0x3F	; 63
    3704:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3708:	88 23       	and	r24, r24
    370a:	2c f4       	brge	.+10     	; 0x3716 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	9e 83       	std	Y+6, r25	; 0x06
    3712:	8d 83       	std	Y+5, r24	; 0x05
    3714:	3f c0       	rjmp	.+126    	; 0x3794 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3716:	6f 81       	ldd	r22, Y+7	; 0x07
    3718:	78 85       	ldd	r23, Y+8	; 0x08
    371a:	89 85       	ldd	r24, Y+9	; 0x09
    371c:	9a 85       	ldd	r25, Y+10	; 0x0a
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	3f ef       	ldi	r19, 0xFF	; 255
    3722:	4f e7       	ldi	r20, 0x7F	; 127
    3724:	57 e4       	ldi	r21, 0x47	; 71
    3726:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    372a:	18 16       	cp	r1, r24
    372c:	4c f5       	brge	.+82     	; 0x3780 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    372e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3730:	7c 85       	ldd	r23, Y+12	; 0x0c
    3732:	8d 85       	ldd	r24, Y+13	; 0x0d
    3734:	9e 85       	ldd	r25, Y+14	; 0x0e
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	40 e2       	ldi	r20, 0x20	; 32
    373c:	51 e4       	ldi	r21, 0x41	; 65
    373e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	bc 01       	movw	r22, r24
    3748:	cd 01       	movw	r24, r26
    374a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	9e 83       	std	Y+6, r25	; 0x06
    3754:	8d 83       	std	Y+5, r24	; 0x05
    3756:	0f c0       	rjmp	.+30     	; 0x3776 <LCD_displayCharacter+0x8ac>
    3758:	88 ec       	ldi	r24, 0xC8	; 200
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	9c 83       	std	Y+4, r25	; 0x04
    375e:	8b 83       	std	Y+3, r24	; 0x03
    3760:	8b 81       	ldd	r24, Y+3	; 0x03
    3762:	9c 81       	ldd	r25, Y+4	; 0x04
    3764:	01 97       	sbiw	r24, 0x01	; 1
    3766:	f1 f7       	brne	.-4      	; 0x3764 <LCD_displayCharacter+0x89a>
    3768:	9c 83       	std	Y+4, r25	; 0x04
    376a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    376c:	8d 81       	ldd	r24, Y+5	; 0x05
    376e:	9e 81       	ldd	r25, Y+6	; 0x06
    3770:	01 97       	sbiw	r24, 0x01	; 1
    3772:	9e 83       	std	Y+6, r25	; 0x06
    3774:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3776:	8d 81       	ldd	r24, Y+5	; 0x05
    3778:	9e 81       	ldd	r25, Y+6	; 0x06
    377a:	00 97       	sbiw	r24, 0x00	; 0
    377c:	69 f7       	brne	.-38     	; 0x3758 <LCD_displayCharacter+0x88e>
    377e:	14 c0       	rjmp	.+40     	; 0x37a8 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3780:	6f 81       	ldd	r22, Y+7	; 0x07
    3782:	78 85       	ldd	r23, Y+8	; 0x08
    3784:	89 85       	ldd	r24, Y+9	; 0x09
    3786:	9a 85       	ldd	r25, Y+10	; 0x0a
    3788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	9e 83       	std	Y+6, r25	; 0x06
    3792:	8d 83       	std	Y+5, r24	; 0x05
    3794:	8d 81       	ldd	r24, Y+5	; 0x05
    3796:	9e 81       	ldd	r25, Y+6	; 0x06
    3798:	9a 83       	std	Y+2, r25	; 0x02
    379a:	89 83       	std	Y+1, r24	; 0x01
    379c:	89 81       	ldd	r24, Y+1	; 0x01
    379e:	9a 81       	ldd	r25, Y+2	; 0x02
    37a0:	01 97       	sbiw	r24, 0x01	; 1
    37a2:	f1 f7       	brne	.-4      	; 0x37a0 <LCD_displayCharacter+0x8d6>
    37a4:	9a 83       	std	Y+2, r25	; 0x02
    37a6:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    37a8:	cd 59       	subi	r28, 0x9D	; 157
    37aa:	df 4f       	sbci	r29, 0xFF	; 255
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	de bf       	out	0x3e, r29	; 62
    37b2:	0f be       	out	0x3f, r0	; 63
    37b4:	cd bf       	out	0x3d, r28	; 61
    37b6:	cf 91       	pop	r28
    37b8:	df 91       	pop	r29
    37ba:	1f 91       	pop	r17
    37bc:	0f 91       	pop	r16
    37be:	08 95       	ret

000037c0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    37c0:	df 93       	push	r29
    37c2:	cf 93       	push	r28
    37c4:	00 d0       	rcall	.+0      	; 0x37c6 <LCD_displayString+0x6>
    37c6:	0f 92       	push	r0
    37c8:	cd b7       	in	r28, 0x3d	; 61
    37ca:	de b7       	in	r29, 0x3e	; 62
    37cc:	9b 83       	std	Y+3, r25	; 0x03
    37ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    37d0:	19 82       	std	Y+1, r1	; 0x01
    37d2:	0e c0       	rjmp	.+28     	; 0x37f0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    37d4:	89 81       	ldd	r24, Y+1	; 0x01
    37d6:	28 2f       	mov	r18, r24
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	8a 81       	ldd	r24, Y+2	; 0x02
    37dc:	9b 81       	ldd	r25, Y+3	; 0x03
    37de:	fc 01       	movw	r30, r24
    37e0:	e2 0f       	add	r30, r18
    37e2:	f3 1f       	adc	r31, r19
    37e4:	80 81       	ld	r24, Z
    37e6:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_displayCharacter>
		i++;
    37ea:	89 81       	ldd	r24, Y+1	; 0x01
    37ec:	8f 5f       	subi	r24, 0xFF	; 255
    37ee:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    37f0:	89 81       	ldd	r24, Y+1	; 0x01
    37f2:	28 2f       	mov	r18, r24
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	8a 81       	ldd	r24, Y+2	; 0x02
    37f8:	9b 81       	ldd	r25, Y+3	; 0x03
    37fa:	fc 01       	movw	r30, r24
    37fc:	e2 0f       	add	r30, r18
    37fe:	f3 1f       	adc	r31, r19
    3800:	80 81       	ld	r24, Z
    3802:	88 23       	and	r24, r24
    3804:	39 f7       	brne	.-50     	; 0x37d4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	cf 91       	pop	r28
    380e:	df 91       	pop	r29
    3810:	08 95       	ret

00003812 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3812:	df 93       	push	r29
    3814:	cf 93       	push	r28
    3816:	00 d0       	rcall	.+0      	; 0x3818 <LCD_moveCursor+0x6>
    3818:	00 d0       	rcall	.+0      	; 0x381a <LCD_moveCursor+0x8>
    381a:	0f 92       	push	r0
    381c:	cd b7       	in	r28, 0x3d	; 61
    381e:	de b7       	in	r29, 0x3e	; 62
    3820:	8a 83       	std	Y+2, r24	; 0x02
    3822:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3824:	8a 81       	ldd	r24, Y+2	; 0x02
    3826:	28 2f       	mov	r18, r24
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	3d 83       	std	Y+5, r19	; 0x05
    382c:	2c 83       	std	Y+4, r18	; 0x04
    382e:	8c 81       	ldd	r24, Y+4	; 0x04
    3830:	9d 81       	ldd	r25, Y+5	; 0x05
    3832:	81 30       	cpi	r24, 0x01	; 1
    3834:	91 05       	cpc	r25, r1
    3836:	c1 f0       	breq	.+48     	; 0x3868 <LCD_moveCursor+0x56>
    3838:	2c 81       	ldd	r18, Y+4	; 0x04
    383a:	3d 81       	ldd	r19, Y+5	; 0x05
    383c:	22 30       	cpi	r18, 0x02	; 2
    383e:	31 05       	cpc	r19, r1
    3840:	2c f4       	brge	.+10     	; 0x384c <LCD_moveCursor+0x3a>
    3842:	8c 81       	ldd	r24, Y+4	; 0x04
    3844:	9d 81       	ldd	r25, Y+5	; 0x05
    3846:	00 97       	sbiw	r24, 0x00	; 0
    3848:	61 f0       	breq	.+24     	; 0x3862 <LCD_moveCursor+0x50>
    384a:	19 c0       	rjmp	.+50     	; 0x387e <LCD_moveCursor+0x6c>
    384c:	2c 81       	ldd	r18, Y+4	; 0x04
    384e:	3d 81       	ldd	r19, Y+5	; 0x05
    3850:	22 30       	cpi	r18, 0x02	; 2
    3852:	31 05       	cpc	r19, r1
    3854:	69 f0       	breq	.+26     	; 0x3870 <LCD_moveCursor+0x5e>
    3856:	8c 81       	ldd	r24, Y+4	; 0x04
    3858:	9d 81       	ldd	r25, Y+5	; 0x05
    385a:	83 30       	cpi	r24, 0x03	; 3
    385c:	91 05       	cpc	r25, r1
    385e:	61 f0       	breq	.+24     	; 0x3878 <LCD_moveCursor+0x66>
    3860:	0e c0       	rjmp	.+28     	; 0x387e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	89 83       	std	Y+1, r24	; 0x01
    3866:	0b c0       	rjmp	.+22     	; 0x387e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3868:	8b 81       	ldd	r24, Y+3	; 0x03
    386a:	80 5c       	subi	r24, 0xC0	; 192
    386c:	89 83       	std	Y+1, r24	; 0x01
    386e:	07 c0       	rjmp	.+14     	; 0x387e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3870:	8b 81       	ldd	r24, Y+3	; 0x03
    3872:	80 5f       	subi	r24, 0xF0	; 240
    3874:	89 83       	std	Y+1, r24	; 0x01
    3876:	03 c0       	rjmp	.+6      	; 0x387e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3878:	8b 81       	ldd	r24, Y+3	; 0x03
    387a:	80 5b       	subi	r24, 0xB0	; 176
    387c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    387e:	89 81       	ldd	r24, Y+1	; 0x01
    3880:	80 68       	ori	r24, 0x80	; 128
    3882:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <LCD_sendCommand>
}
    3886:	0f 90       	pop	r0
    3888:	0f 90       	pop	r0
    388a:	0f 90       	pop	r0
    388c:	0f 90       	pop	r0
    388e:	0f 90       	pop	r0
    3890:	cf 91       	pop	r28
    3892:	df 91       	pop	r29
    3894:	08 95       	ret

00003896 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3896:	df 93       	push	r29
    3898:	cf 93       	push	r28
    389a:	00 d0       	rcall	.+0      	; 0x389c <LCD_displayStringRowColumn+0x6>
    389c:	00 d0       	rcall	.+0      	; 0x389e <LCD_displayStringRowColumn+0x8>
    389e:	cd b7       	in	r28, 0x3d	; 61
    38a0:	de b7       	in	r29, 0x3e	; 62
    38a2:	89 83       	std	Y+1, r24	; 0x01
    38a4:	6a 83       	std	Y+2, r22	; 0x02
    38a6:	5c 83       	std	Y+4, r21	; 0x04
    38a8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    38aa:	89 81       	ldd	r24, Y+1	; 0x01
    38ac:	6a 81       	ldd	r22, Y+2	; 0x02
    38ae:	0e 94 09 1c 	call	0x3812	; 0x3812 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    38b2:	8b 81       	ldd	r24, Y+3	; 0x03
    38b4:	9c 81       	ldd	r25, Y+4	; 0x04
    38b6:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
}
    38ba:	0f 90       	pop	r0
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	cf 91       	pop	r28
    38c4:	df 91       	pop	r29
    38c6:	08 95       	ret

000038c8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    38c8:	df 93       	push	r29
    38ca:	cf 93       	push	r28
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    38d0:	62 97       	sbiw	r28, 0x12	; 18
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
    38dc:	9a 8b       	std	Y+18, r25	; 0x12
    38de:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    38e0:	89 89       	ldd	r24, Y+17	; 0x11
    38e2:	9a 89       	ldd	r25, Y+18	; 0x12
    38e4:	9e 01       	movw	r18, r28
    38e6:	2f 5f       	subi	r18, 0xFF	; 255
    38e8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ea:	b9 01       	movw	r22, r18
    38ec:	4a e0       	ldi	r20, 0x0A	; 10
    38ee:	50 e0       	ldi	r21, 0x00	; 0
    38f0:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <itoa>
   LCD_displayString(buff); /* Display the string */
    38f4:	ce 01       	movw	r24, r28
    38f6:	01 96       	adiw	r24, 0x01	; 1
    38f8:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_displayString>
}
    38fc:	62 96       	adiw	r28, 0x12	; 18
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	f8 94       	cli
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	0f be       	out	0x3f, r0	; 63
    3906:	cd bf       	out	0x3d, r28	; 61
    3908:	cf 91       	pop	r28
    390a:	df 91       	pop	r29
    390c:	08 95       	ret

0000390e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    390e:	df 93       	push	r29
    3910:	cf 93       	push	r28
    3912:	cd b7       	in	r28, 0x3d	; 61
    3914:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <LCD_sendCommand>
}
    391c:	cf 91       	pop	r28
    391e:	df 91       	pop	r29
    3920:	08 95       	ret

00003922 <Timer1_init>:
 * [Args]:        Config_Ptr: a constant pointer to struct that defines the Timer required configuration
 *
 * [Returns]:      Void
 *
 ----------------------------------------------------------------------------------*/
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    3922:	df 93       	push	r29
    3924:	cf 93       	push	r28
    3926:	00 d0       	rcall	.+0      	; 0x3928 <Timer1_init+0x6>
    3928:	cd b7       	in	r28, 0x3d	; 61
    392a:	de b7       	in	r29, 0x3e	; 62
    392c:	9a 83       	std	Y+2, r25	; 0x02
    392e:	89 83       	std	Y+1, r24	; 0x01
		TCCR1A= (1<<FOC1A);
    3930:	ef e4       	ldi	r30, 0x4F	; 79
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	88 e0       	ldi	r24, 0x08	; 8
    3936:	80 83       	st	Z, r24

		TCCR1B =((Config_Ptr -> mode)<<WGM12)| ((Config_Ptr -> prescaler)<<CS10);
    3938:	ae e4       	ldi	r26, 0x4E	; 78
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	e9 81       	ldd	r30, Y+1	; 0x01
    393e:	fa 81       	ldd	r31, Y+2	; 0x02
    3940:	85 81       	ldd	r24, Z+5	; 0x05
    3942:	88 2f       	mov	r24, r24
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	88 0f       	add	r24, r24
    3948:	99 1f       	adc	r25, r25
    394a:	88 0f       	add	r24, r24
    394c:	99 1f       	adc	r25, r25
    394e:	88 0f       	add	r24, r24
    3950:	99 1f       	adc	r25, r25
    3952:	98 2f       	mov	r25, r24
    3954:	e9 81       	ldd	r30, Y+1	; 0x01
    3956:	fa 81       	ldd	r31, Y+2	; 0x02
    3958:	84 81       	ldd	r24, Z+4	; 0x04
    395a:	89 2b       	or	r24, r25
    395c:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr -> initial_value;
    395e:	ac e4       	ldi	r26, 0x4C	; 76
    3960:	b0 e0       	ldi	r27, 0x00	; 0
    3962:	e9 81       	ldd	r30, Y+1	; 0x01
    3964:	fa 81       	ldd	r31, Y+2	; 0x02
    3966:	80 81       	ld	r24, Z
    3968:	91 81       	ldd	r25, Z+1	; 0x01
    396a:	11 96       	adiw	r26, 0x01	; 1
    396c:	9c 93       	st	X, r25
    396e:	8e 93       	st	-X, r24
		OCR1A = Config_Ptr -> compare_value;
    3970:	aa e4       	ldi	r26, 0x4A	; 74
    3972:	b0 e0       	ldi	r27, 0x00	; 0
    3974:	e9 81       	ldd	r30, Y+1	; 0x01
    3976:	fa 81       	ldd	r31, Y+2	; 0x02
    3978:	82 81       	ldd	r24, Z+2	; 0x02
    397a:	93 81       	ldd	r25, Z+3	; 0x03
    397c:	11 96       	adiw	r26, 0x01	; 1
    397e:	9c 93       	st	X, r25
    3980:	8e 93       	st	-X, r24
		SREG|=(1<<7);
    3982:	af e5       	ldi	r26, 0x5F	; 95
    3984:	b0 e0       	ldi	r27, 0x00	; 0
    3986:	ef e5       	ldi	r30, 0x5F	; 95
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	80 81       	ld	r24, Z
    398c:	80 68       	ori	r24, 0x80	; 128
    398e:	8c 93       	st	X, r24

		TIMSK |= (1<<OCIE1A);
    3990:	a9 e5       	ldi	r26, 0x59	; 89
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	e9 e5       	ldi	r30, 0x59	; 89
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	80 81       	ld	r24, Z
    399a:	80 61       	ori	r24, 0x10	; 16
    399c:	8c 93       	st	X, r24
}
    399e:	0f 90       	pop	r0
    39a0:	0f 90       	pop	r0
    39a2:	cf 91       	pop	r28
    39a4:	df 91       	pop	r29
    39a6:	08 95       	ret

000039a8 <Timer1_deInit>:
 * [Args]:       void
 *
 * [Returns]:      Void
 *
 ----------------------------------------------------------------------------------*/
void Timer1_deInit(void){
    39a8:	df 93       	push	r29
    39aa:	cf 93       	push	r28
    39ac:	cd b7       	in	r28, 0x3d	; 61
    39ae:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    39b0:	ef e4       	ldi	r30, 0x4F	; 79
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	10 82       	st	Z, r1
	TCCR1B = 0;
    39b6:	ee e4       	ldi	r30, 0x4E	; 78
    39b8:	f0 e0       	ldi	r31, 0x00	; 0
    39ba:	10 82       	st	Z, r1
	TCNT1 = 0;
    39bc:	ec e4       	ldi	r30, 0x4C	; 76
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	11 82       	std	Z+1, r1	; 0x01
    39c2:	10 82       	st	Z, r1
	TIMSK = 0;
    39c4:	e9 e5       	ldi	r30, 0x59	; 89
    39c6:	f0 e0       	ldi	r31, 0x00	; 0
    39c8:	10 82       	st	Z, r1
}
    39ca:	cf 91       	pop	r28
    39cc:	df 91       	pop	r29
    39ce:	08 95       	ret

000039d0 <Timer1_setCallBack>:
 * [Args]:        a_ptr: a void pointer to a void function that takes the address of the call back function
 *
 * [Returns]:      Void
 *
 ----------------------------------------------------------------------------------*/
void Timer1_setCallBack(void(*a_ptr)(void)){
    39d0:	df 93       	push	r29
    39d2:	cf 93       	push	r28
    39d4:	00 d0       	rcall	.+0      	; 0x39d6 <Timer1_setCallBack+0x6>
    39d6:	cd b7       	in	r28, 0x3d	; 61
    39d8:	de b7       	in	r29, 0x3e	; 62
    39da:	9a 83       	std	Y+2, r25	; 0x02
    39dc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	9a 81       	ldd	r25, Y+2	; 0x02
    39e2:	90 93 3c 01 	sts	0x013C, r25
    39e6:	80 93 3b 01 	sts	0x013B, r24
}
    39ea:	0f 90       	pop	r0
    39ec:	0f 90       	pop	r0
    39ee:	cf 91       	pop	r28
    39f0:	df 91       	pop	r29
    39f2:	08 95       	ret

000039f4 <__vector_7>:

/*
 * Timer/Counter1 Compare Match A
 *
 */
ISR(TIMER1_COMPA_vect){
    39f4:	1f 92       	push	r1
    39f6:	0f 92       	push	r0
    39f8:	0f b6       	in	r0, 0x3f	; 63
    39fa:	0f 92       	push	r0
    39fc:	11 24       	eor	r1, r1
    39fe:	2f 93       	push	r18
    3a00:	3f 93       	push	r19
    3a02:	4f 93       	push	r20
    3a04:	5f 93       	push	r21
    3a06:	6f 93       	push	r22
    3a08:	7f 93       	push	r23
    3a0a:	8f 93       	push	r24
    3a0c:	9f 93       	push	r25
    3a0e:	af 93       	push	r26
    3a10:	bf 93       	push	r27
    3a12:	ef 93       	push	r30
    3a14:	ff 93       	push	r31
    3a16:	df 93       	push	r29
    3a18:	cf 93       	push	r28
    3a1a:	cd b7       	in	r28, 0x3d	; 61
    3a1c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3a1e:	80 91 3b 01 	lds	r24, 0x013B
    3a22:	90 91 3c 01 	lds	r25, 0x013C
    3a26:	00 97       	sbiw	r24, 0x00	; 0
    3a28:	29 f0       	breq	.+10     	; 0x3a34 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3a2a:	e0 91 3b 01 	lds	r30, 0x013B
    3a2e:	f0 91 3c 01 	lds	r31, 0x013C
    3a32:	09 95       	icall
	}
}
    3a34:	cf 91       	pop	r28
    3a36:	df 91       	pop	r29
    3a38:	ff 91       	pop	r31
    3a3a:	ef 91       	pop	r30
    3a3c:	bf 91       	pop	r27
    3a3e:	af 91       	pop	r26
    3a40:	9f 91       	pop	r25
    3a42:	8f 91       	pop	r24
    3a44:	7f 91       	pop	r23
    3a46:	6f 91       	pop	r22
    3a48:	5f 91       	pop	r21
    3a4a:	4f 91       	pop	r20
    3a4c:	3f 91       	pop	r19
    3a4e:	2f 91       	pop	r18
    3a50:	0f 90       	pop	r0
    3a52:	0f be       	out	0x3f, r0	; 63
    3a54:	0f 90       	pop	r0
    3a56:	1f 90       	pop	r1
    3a58:	18 95       	reti

00003a5a <__vector_9>:
/*
 * Timer/Counter1 Overflow
 *
 */
ISR(TIMER1_OVF_vect)
{
    3a5a:	1f 92       	push	r1
    3a5c:	0f 92       	push	r0
    3a5e:	0f b6       	in	r0, 0x3f	; 63
    3a60:	0f 92       	push	r0
    3a62:	11 24       	eor	r1, r1
    3a64:	2f 93       	push	r18
    3a66:	3f 93       	push	r19
    3a68:	4f 93       	push	r20
    3a6a:	5f 93       	push	r21
    3a6c:	6f 93       	push	r22
    3a6e:	7f 93       	push	r23
    3a70:	8f 93       	push	r24
    3a72:	9f 93       	push	r25
    3a74:	af 93       	push	r26
    3a76:	bf 93       	push	r27
    3a78:	ef 93       	push	r30
    3a7a:	ff 93       	push	r31
    3a7c:	df 93       	push	r29
    3a7e:	cf 93       	push	r28
    3a80:	cd b7       	in	r28, 0x3d	; 61
    3a82:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3a84:	80 91 3b 01 	lds	r24, 0x013B
    3a88:	90 91 3c 01 	lds	r25, 0x013C
    3a8c:	00 97       	sbiw	r24, 0x00	; 0
    3a8e:	29 f0       	breq	.+10     	; 0x3a9a <__vector_9+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3a90:	e0 91 3b 01 	lds	r30, 0x013B
    3a94:	f0 91 3c 01 	lds	r31, 0x013C
    3a98:	09 95       	icall
		}
}
    3a9a:	cf 91       	pop	r28
    3a9c:	df 91       	pop	r29
    3a9e:	ff 91       	pop	r31
    3aa0:	ef 91       	pop	r30
    3aa2:	bf 91       	pop	r27
    3aa4:	af 91       	pop	r26
    3aa6:	9f 91       	pop	r25
    3aa8:	8f 91       	pop	r24
    3aaa:	7f 91       	pop	r23
    3aac:	6f 91       	pop	r22
    3aae:	5f 91       	pop	r21
    3ab0:	4f 91       	pop	r20
    3ab2:	3f 91       	pop	r19
    3ab4:	2f 91       	pop	r18
    3ab6:	0f 90       	pop	r0
    3ab8:	0f be       	out	0x3f, r0	; 63
    3aba:	0f 90       	pop	r0
    3abc:	1f 90       	pop	r1
    3abe:	18 95       	reti

00003ac0 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3ac0:	df 93       	push	r29
    3ac2:	cf 93       	push	r28
    3ac4:	00 d0       	rcall	.+0      	; 0x3ac6 <UART_init+0x6>
    3ac6:	00 d0       	rcall	.+0      	; 0x3ac8 <UART_init+0x8>
    3ac8:	cd b7       	in	r28, 0x3d	; 61
    3aca:	de b7       	in	r29, 0x3e	; 62
    3acc:	9c 83       	std	Y+4, r25	; 0x04
    3ace:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3ad0:	1a 82       	std	Y+2, r1	; 0x02
    3ad2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3ad4:	eb e2       	ldi	r30, 0x2B	; 43
    3ad6:	f0 e0       	ldi	r31, 0x00	; 0
    3ad8:	82 e0       	ldi	r24, 0x02	; 2
    3ada:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3adc:	ea e2       	ldi	r30, 0x2A	; 42
    3ade:	f0 e0       	ldi	r31, 0x00	; 0
    3ae0:	88 e1       	ldi	r24, 0x18	; 24
    3ae2:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr -> bit_data) | (Config_Ptr -> parity)| (Config_Ptr -> stop_bit);
    3ae4:	a0 e4       	ldi	r26, 0x40	; 64
    3ae6:	b0 e0       	ldi	r27, 0x00	; 0
    3ae8:	eb 81       	ldd	r30, Y+3	; 0x03
    3aea:	fc 81       	ldd	r31, Y+4	; 0x04
    3aec:	90 81       	ld	r25, Z
    3aee:	eb 81       	ldd	r30, Y+3	; 0x03
    3af0:	fc 81       	ldd	r31, Y+4	; 0x04
    3af2:	81 81       	ldd	r24, Z+1	; 0x01
    3af4:	98 2b       	or	r25, r24
    3af6:	eb 81       	ldd	r30, Y+3	; 0x03
    3af8:	fc 81       	ldd	r31, Y+4	; 0x04
    3afa:	82 81       	ldd	r24, Z+2	; 0x02
    3afc:	89 2b       	or	r24, r25
    3afe:	80 68       	ori	r24, 0x80	; 128
    3b00:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr -> baud_rate)  * 8UL))) - 1);
    3b02:	eb 81       	ldd	r30, Y+3	; 0x03
    3b04:	fc 81       	ldd	r31, Y+4	; 0x04
    3b06:	83 81       	ldd	r24, Z+3	; 0x03
    3b08:	94 81       	ldd	r25, Z+4	; 0x04
    3b0a:	a5 81       	ldd	r26, Z+5	; 0x05
    3b0c:	b6 81       	ldd	r27, Z+6	; 0x06
    3b0e:	88 0f       	add	r24, r24
    3b10:	99 1f       	adc	r25, r25
    3b12:	aa 1f       	adc	r26, r26
    3b14:	bb 1f       	adc	r27, r27
    3b16:	88 0f       	add	r24, r24
    3b18:	99 1f       	adc	r25, r25
    3b1a:	aa 1f       	adc	r26, r26
    3b1c:	bb 1f       	adc	r27, r27
    3b1e:	88 0f       	add	r24, r24
    3b20:	99 1f       	adc	r25, r25
    3b22:	aa 1f       	adc	r26, r26
    3b24:	bb 1f       	adc	r27, r27
    3b26:	9c 01       	movw	r18, r24
    3b28:	ad 01       	movw	r20, r26
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	92 e1       	ldi	r25, 0x12	; 18
    3b2e:	aa e7       	ldi	r26, 0x7A	; 122
    3b30:	b0 e0       	ldi	r27, 0x00	; 0
    3b32:	bc 01       	movw	r22, r24
    3b34:	cd 01       	movw	r24, r26
    3b36:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__udivmodsi4>
    3b3a:	da 01       	movw	r26, r20
    3b3c:	c9 01       	movw	r24, r18
    3b3e:	01 97       	sbiw	r24, 0x01	; 1
    3b40:	9a 83       	std	Y+2, r25	; 0x02
    3b42:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3b44:	e0 e4       	ldi	r30, 0x40	; 64
    3b46:	f0 e0       	ldi	r31, 0x00	; 0
    3b48:	89 81       	ldd	r24, Y+1	; 0x01
    3b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b4c:	89 2f       	mov	r24, r25
    3b4e:	99 27       	eor	r25, r25
    3b50:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3b52:	e9 e2       	ldi	r30, 0x29	; 41
    3b54:	f0 e0       	ldi	r31, 0x00	; 0
    3b56:	89 81       	ldd	r24, Y+1	; 0x01
    3b58:	80 83       	st	Z, r24
}
    3b5a:	0f 90       	pop	r0
    3b5c:	0f 90       	pop	r0
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	cf 91       	pop	r28
    3b64:	df 91       	pop	r29
    3b66:	08 95       	ret

00003b68 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3b68:	df 93       	push	r29
    3b6a:	cf 93       	push	r28
    3b6c:	0f 92       	push	r0
    3b6e:	cd b7       	in	r28, 0x3d	; 61
    3b70:	de b7       	in	r29, 0x3e	; 62
    3b72:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3b74:	eb e2       	ldi	r30, 0x2B	; 43
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	80 81       	ld	r24, Z
    3b7a:	88 2f       	mov	r24, r24
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	80 72       	andi	r24, 0x20	; 32
    3b80:	90 70       	andi	r25, 0x00	; 0
    3b82:	00 97       	sbiw	r24, 0x00	; 0
    3b84:	b9 f3       	breq	.-18     	; 0x3b74 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3b86:	ec e2       	ldi	r30, 0x2C	; 44
    3b88:	f0 e0       	ldi	r31, 0x00	; 0
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3b8e:	0f 90       	pop	r0
    3b90:	cf 91       	pop	r28
    3b92:	df 91       	pop	r29
    3b94:	08 95       	ret

00003b96 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3b96:	df 93       	push	r29
    3b98:	cf 93       	push	r28
    3b9a:	cd b7       	in	r28, 0x3d	; 61
    3b9c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3b9e:	eb e2       	ldi	r30, 0x2B	; 43
    3ba0:	f0 e0       	ldi	r31, 0x00	; 0
    3ba2:	80 81       	ld	r24, Z
    3ba4:	88 23       	and	r24, r24
    3ba6:	dc f7       	brge	.-10     	; 0x3b9e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3ba8:	ec e2       	ldi	r30, 0x2C	; 44
    3baa:	f0 e0       	ldi	r31, 0x00	; 0
    3bac:	80 81       	ld	r24, Z
}
    3bae:	cf 91       	pop	r28
    3bb0:	df 91       	pop	r29
    3bb2:	08 95       	ret

00003bb4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3bb4:	df 93       	push	r29
    3bb6:	cf 93       	push	r28
    3bb8:	00 d0       	rcall	.+0      	; 0x3bba <UART_sendString+0x6>
    3bba:	0f 92       	push	r0
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
    3bc0:	9b 83       	std	Y+3, r25	; 0x03
    3bc2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3bc4:	19 82       	std	Y+1, r1	; 0x01
    3bc6:	0e c0       	rjmp	.+28     	; 0x3be4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3bc8:	89 81       	ldd	r24, Y+1	; 0x01
    3bca:	28 2f       	mov	r18, r24
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	e2 0f       	add	r30, r18
    3bd6:	f3 1f       	adc	r31, r19
    3bd8:	80 81       	ld	r24, Z
    3bda:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <UART_sendByte>
		i++;
    3bde:	89 81       	ldd	r24, Y+1	; 0x01
    3be0:	8f 5f       	subi	r24, 0xFF	; 255
    3be2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3be4:	89 81       	ldd	r24, Y+1	; 0x01
    3be6:	28 2f       	mov	r18, r24
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	8a 81       	ldd	r24, Y+2	; 0x02
    3bec:	9b 81       	ldd	r25, Y+3	; 0x03
    3bee:	fc 01       	movw	r30, r24
    3bf0:	e2 0f       	add	r30, r18
    3bf2:	f3 1f       	adc	r31, r19
    3bf4:	80 81       	ld	r24, Z
    3bf6:	88 23       	and	r24, r24
    3bf8:	39 f7       	brne	.-50     	; 0x3bc8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	0f 90       	pop	r0
    3c00:	cf 91       	pop	r28
    3c02:	df 91       	pop	r29
    3c04:	08 95       	ret

00003c06 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3c06:	0f 93       	push	r16
    3c08:	1f 93       	push	r17
    3c0a:	df 93       	push	r29
    3c0c:	cf 93       	push	r28
    3c0e:	00 d0       	rcall	.+0      	; 0x3c10 <UART_receiveString+0xa>
    3c10:	0f 92       	push	r0
    3c12:	cd b7       	in	r28, 0x3d	; 61
    3c14:	de b7       	in	r29, 0x3e	; 62
    3c16:	9b 83       	std	Y+3, r25	; 0x03
    3c18:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3c1a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	28 2f       	mov	r18, r24
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	8a 81       	ldd	r24, Y+2	; 0x02
    3c24:	9b 81       	ldd	r25, Y+3	; 0x03
    3c26:	8c 01       	movw	r16, r24
    3c28:	02 0f       	add	r16, r18
    3c2a:	13 1f       	adc	r17, r19
    3c2c:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <UART_recieveByte>
    3c30:	f8 01       	movw	r30, r16
    3c32:	80 83       	st	Z, r24
    3c34:	0f c0       	rjmp	.+30     	; 0x3c54 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	8f 5f       	subi	r24, 0xFF	; 255
    3c3a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3c3c:	89 81       	ldd	r24, Y+1	; 0x01
    3c3e:	28 2f       	mov	r18, r24
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	8a 81       	ldd	r24, Y+2	; 0x02
    3c44:	9b 81       	ldd	r25, Y+3	; 0x03
    3c46:	8c 01       	movw	r16, r24
    3c48:	02 0f       	add	r16, r18
    3c4a:	13 1f       	adc	r17, r19
    3c4c:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <UART_recieveByte>
    3c50:	f8 01       	movw	r30, r16
    3c52:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	28 2f       	mov	r18, r24
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c5e:	fc 01       	movw	r30, r24
    3c60:	e2 0f       	add	r30, r18
    3c62:	f3 1f       	adc	r31, r19
    3c64:	80 81       	ld	r24, Z
    3c66:	83 32       	cpi	r24, 0x23	; 35
    3c68:	31 f7       	brne	.-52     	; 0x3c36 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
    3c6c:	28 2f       	mov	r18, r24
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	8a 81       	ldd	r24, Y+2	; 0x02
    3c72:	9b 81       	ldd	r25, Y+3	; 0x03
    3c74:	fc 01       	movw	r30, r24
    3c76:	e2 0f       	add	r30, r18
    3c78:	f3 1f       	adc	r31, r19
    3c7a:	10 82       	st	Z, r1
}
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
    3c82:	cf 91       	pop	r28
    3c84:	df 91       	pop	r29
    3c86:	1f 91       	pop	r17
    3c88:	0f 91       	pop	r16
    3c8a:	08 95       	ret

00003c8c <__udivmodsi4>:
    3c8c:	a1 e2       	ldi	r26, 0x21	; 33
    3c8e:	1a 2e       	mov	r1, r26
    3c90:	aa 1b       	sub	r26, r26
    3c92:	bb 1b       	sub	r27, r27
    3c94:	fd 01       	movw	r30, r26
    3c96:	0d c0       	rjmp	.+26     	; 0x3cb2 <__udivmodsi4_ep>

00003c98 <__udivmodsi4_loop>:
    3c98:	aa 1f       	adc	r26, r26
    3c9a:	bb 1f       	adc	r27, r27
    3c9c:	ee 1f       	adc	r30, r30
    3c9e:	ff 1f       	adc	r31, r31
    3ca0:	a2 17       	cp	r26, r18
    3ca2:	b3 07       	cpc	r27, r19
    3ca4:	e4 07       	cpc	r30, r20
    3ca6:	f5 07       	cpc	r31, r21
    3ca8:	20 f0       	brcs	.+8      	; 0x3cb2 <__udivmodsi4_ep>
    3caa:	a2 1b       	sub	r26, r18
    3cac:	b3 0b       	sbc	r27, r19
    3cae:	e4 0b       	sbc	r30, r20
    3cb0:	f5 0b       	sbc	r31, r21

00003cb2 <__udivmodsi4_ep>:
    3cb2:	66 1f       	adc	r22, r22
    3cb4:	77 1f       	adc	r23, r23
    3cb6:	88 1f       	adc	r24, r24
    3cb8:	99 1f       	adc	r25, r25
    3cba:	1a 94       	dec	r1
    3cbc:	69 f7       	brne	.-38     	; 0x3c98 <__udivmodsi4_loop>
    3cbe:	60 95       	com	r22
    3cc0:	70 95       	com	r23
    3cc2:	80 95       	com	r24
    3cc4:	90 95       	com	r25
    3cc6:	9b 01       	movw	r18, r22
    3cc8:	ac 01       	movw	r20, r24
    3cca:	bd 01       	movw	r22, r26
    3ccc:	cf 01       	movw	r24, r30
    3cce:	08 95       	ret

00003cd0 <__prologue_saves__>:
    3cd0:	2f 92       	push	r2
    3cd2:	3f 92       	push	r3
    3cd4:	4f 92       	push	r4
    3cd6:	5f 92       	push	r5
    3cd8:	6f 92       	push	r6
    3cda:	7f 92       	push	r7
    3cdc:	8f 92       	push	r8
    3cde:	9f 92       	push	r9
    3ce0:	af 92       	push	r10
    3ce2:	bf 92       	push	r11
    3ce4:	cf 92       	push	r12
    3ce6:	df 92       	push	r13
    3ce8:	ef 92       	push	r14
    3cea:	ff 92       	push	r15
    3cec:	0f 93       	push	r16
    3cee:	1f 93       	push	r17
    3cf0:	cf 93       	push	r28
    3cf2:	df 93       	push	r29
    3cf4:	cd b7       	in	r28, 0x3d	; 61
    3cf6:	de b7       	in	r29, 0x3e	; 62
    3cf8:	ca 1b       	sub	r28, r26
    3cfa:	db 0b       	sbc	r29, r27
    3cfc:	0f b6       	in	r0, 0x3f	; 63
    3cfe:	f8 94       	cli
    3d00:	de bf       	out	0x3e, r29	; 62
    3d02:	0f be       	out	0x3f, r0	; 63
    3d04:	cd bf       	out	0x3d, r28	; 61
    3d06:	09 94       	ijmp

00003d08 <__epilogue_restores__>:
    3d08:	2a 88       	ldd	r2, Y+18	; 0x12
    3d0a:	39 88       	ldd	r3, Y+17	; 0x11
    3d0c:	48 88       	ldd	r4, Y+16	; 0x10
    3d0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d10:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d12:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d14:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d16:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d18:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d1a:	b9 84       	ldd	r11, Y+9	; 0x09
    3d1c:	c8 84       	ldd	r12, Y+8	; 0x08
    3d1e:	df 80       	ldd	r13, Y+7	; 0x07
    3d20:	ee 80       	ldd	r14, Y+6	; 0x06
    3d22:	fd 80       	ldd	r15, Y+5	; 0x05
    3d24:	0c 81       	ldd	r16, Y+4	; 0x04
    3d26:	1b 81       	ldd	r17, Y+3	; 0x03
    3d28:	aa 81       	ldd	r26, Y+2	; 0x02
    3d2a:	b9 81       	ldd	r27, Y+1	; 0x01
    3d2c:	ce 0f       	add	r28, r30
    3d2e:	d1 1d       	adc	r29, r1
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	de bf       	out	0x3e, r29	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	cd bf       	out	0x3d, r28	; 61
    3d3a:	ed 01       	movw	r28, r26
    3d3c:	08 95       	ret

00003d3e <itoa>:
    3d3e:	fb 01       	movw	r30, r22
    3d40:	9f 01       	movw	r18, r30
    3d42:	e8 94       	clt
    3d44:	42 30       	cpi	r20, 0x02	; 2
    3d46:	c4 f0       	brlt	.+48     	; 0x3d78 <itoa+0x3a>
    3d48:	45 32       	cpi	r20, 0x25	; 37
    3d4a:	b4 f4       	brge	.+44     	; 0x3d78 <itoa+0x3a>
    3d4c:	4a 30       	cpi	r20, 0x0A	; 10
    3d4e:	29 f4       	brne	.+10     	; 0x3d5a <itoa+0x1c>
    3d50:	97 fb       	bst	r25, 7
    3d52:	1e f4       	brtc	.+6      	; 0x3d5a <itoa+0x1c>
    3d54:	90 95       	com	r25
    3d56:	81 95       	neg	r24
    3d58:	9f 4f       	sbci	r25, 0xFF	; 255
    3d5a:	64 2f       	mov	r22, r20
    3d5c:	77 27       	eor	r23, r23
    3d5e:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <__udivmodhi4>
    3d62:	80 5d       	subi	r24, 0xD0	; 208
    3d64:	8a 33       	cpi	r24, 0x3A	; 58
    3d66:	0c f0       	brlt	.+2      	; 0x3d6a <itoa+0x2c>
    3d68:	89 5d       	subi	r24, 0xD9	; 217
    3d6a:	81 93       	st	Z+, r24
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	00 97       	sbiw	r24, 0x00	; 0
    3d70:	a1 f7       	brne	.-24     	; 0x3d5a <itoa+0x1c>
    3d72:	16 f4       	brtc	.+4      	; 0x3d78 <itoa+0x3a>
    3d74:	5d e2       	ldi	r21, 0x2D	; 45
    3d76:	51 93       	st	Z+, r21
    3d78:	10 82       	st	Z, r1
    3d7a:	c9 01       	movw	r24, r18
    3d7c:	0c 94 c0 1e 	jmp	0x3d80	; 0x3d80 <strrev>

00003d80 <strrev>:
    3d80:	dc 01       	movw	r26, r24
    3d82:	fc 01       	movw	r30, r24
    3d84:	67 2f       	mov	r22, r23
    3d86:	71 91       	ld	r23, Z+
    3d88:	77 23       	and	r23, r23
    3d8a:	e1 f7       	brne	.-8      	; 0x3d84 <strrev+0x4>
    3d8c:	32 97       	sbiw	r30, 0x02	; 2
    3d8e:	04 c0       	rjmp	.+8      	; 0x3d98 <strrev+0x18>
    3d90:	7c 91       	ld	r23, X
    3d92:	6d 93       	st	X+, r22
    3d94:	70 83       	st	Z, r23
    3d96:	62 91       	ld	r22, -Z
    3d98:	ae 17       	cp	r26, r30
    3d9a:	bf 07       	cpc	r27, r31
    3d9c:	c8 f3       	brcs	.-14     	; 0x3d90 <strrev+0x10>
    3d9e:	08 95       	ret

00003da0 <__udivmodhi4>:
    3da0:	aa 1b       	sub	r26, r26
    3da2:	bb 1b       	sub	r27, r27
    3da4:	51 e1       	ldi	r21, 0x11	; 17
    3da6:	07 c0       	rjmp	.+14     	; 0x3db6 <__udivmodhi4_ep>

00003da8 <__udivmodhi4_loop>:
    3da8:	aa 1f       	adc	r26, r26
    3daa:	bb 1f       	adc	r27, r27
    3dac:	a6 17       	cp	r26, r22
    3dae:	b7 07       	cpc	r27, r23
    3db0:	10 f0       	brcs	.+4      	; 0x3db6 <__udivmodhi4_ep>
    3db2:	a6 1b       	sub	r26, r22
    3db4:	b7 0b       	sbc	r27, r23

00003db6 <__udivmodhi4_ep>:
    3db6:	88 1f       	adc	r24, r24
    3db8:	99 1f       	adc	r25, r25
    3dba:	5a 95       	dec	r21
    3dbc:	a9 f7       	brne	.-22     	; 0x3da8 <__udivmodhi4_loop>
    3dbe:	80 95       	com	r24
    3dc0:	90 95       	com	r25
    3dc2:	bc 01       	movw	r22, r24
    3dc4:	cd 01       	movw	r24, r26
    3dc6:	08 95       	ret

00003dc8 <_exit>:
    3dc8:	f8 94       	cli

00003dca <__stop_program>:
    3dca:	ff cf       	rjmp	.-2      	; 0x3dca <__stop_program>
